{
    "pipes": [],
    "interfaces": [
        {
            "name": "AddComponentData",
            "id": "interface-AddComponentData-246b202a9a2107c5374ee24cbd86cf92d0d9f331f1025b05d1696a13bca4c8e557369c419d5d568e280fd59aa3e76a9eaf884158931580601969e2da7de6b450",
            "file": "src/app/ui/screen-design-page/canvas/canvas.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport { HostListener } from '@angular/core';\nimport {ComponentDescriptorDto, SdComponentDto, SdComponentTypeSelectionDto} from \"@storydoc/models\";\nimport {ScreenDesignService} from \"../screen-design.service\";\n\nexport interface DragRequest {\n  type: 'ADD_COMPONENT' | 'MOVE_COMPONENT'\n  add: AddComponentData\n  move:  MoveComponentData\n}\n\nexport interface AddComponentData {\n  dx: number,\n  dy: number,\n  desc: ComponentDescriptorDto\n}\n\nexport interface MoveComponentData {\n  x0: number,\n  y0: number,\n  component: SdComponentDto\n}\n\n@Component({\n  selector: 'app-canvas',\n  templateUrl: './canvas.component.html',\n  styleUrls: ['./canvas.component.scss']\n})\nexport class CanvasComponent implements OnInit {\n\n  constructor(private service: ScreenDesignService) {\n  }\n\n  @HostListener('document:keyup', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if(event.key === 'Delete'){\n      this.service.deleteSelection()\n    }\n  }\n\n  screenDesign$ = this.service.screenDesign$\n\n  selection$ = this.service.selection$\n\n  ngOnInit(): void {\n  }\n\n  allowDrop(ev: DragEvent) {\n    ev.preventDefault();\n  }\n\n  @ViewChild(\"canvasElem\") canvasElem: ElementRef\n\n  doDrop(ev: any) {\n    ev.preventDefault();\n    var data = ev.dataTransfer.getData(\"text\");\n    let request = <DragRequest>JSON.parse(data)\n\n    if (request.type==='ADD_COMPONENT') {\n      let coord =  {\n        x: ev.clientX - this.canvasElem.nativeElement.getBoundingClientRect().left - request.add.dx,\n        y: ev.clientY - this.canvasElem.nativeElement.getBoundingClientRect().top -request.add.dy\n      }\n      let componentDescriptor = request.add.desc\n      this.service.addComponent(componentDescriptor, coord)\n    }\n    else if (request.type==='MOVE_COMPONENT') {\n      let dx = request.move.x0 - ev.clientX\n      let dy = request.move.y0 - ev.clientY\n      let coord =  {\n        x: request.move.component.x - dx,\n        y: request.move.component.y - dy\n      }\n      this.service.moveComponent(request.move.component, coord)\n    }\n\n  }\n\n\n  getAttributeValue(attName: string, component: SdComponentDto): string {\n    let attribute = component.attributes.find(att => att.name===attName)\n    return attribute ? attribute.value : component.name\n  }\n\n  select(component: SdComponentDto) {\n    this.service.selectComponent(component)\n  }\n\n  isSelected(component: SdComponentDto, selection: SdComponentDto | \"NONE\") {\n    if (selection==='NONE') return false\n    return component?.id.id === selection?.id.id\n  }\n\n  style(child: SdComponentTypeSelectionDto, index: number): string {\n    let style =  'position: absolute; top:'+(child.component.y)+'px; left:'+(child.component.x) + 'px;'\n    return style\n  }\n\n  dragStart(ev: DragEvent, child: SdComponentTypeSelectionDto) {\n    let x0 = ev.clientX\n    let y0 = ev.clientY\n    ev.dataTransfer.setData(\"text\", JSON.stringify(<DragRequest>{\n      type : 'MOVE_COMPONENT',\n      move: { x0, y0, component: child.component}\n    }));\n\n  }\n\n  lassoSelect: boolean = false\n  lassoSelectBegin(event: any) {\n    if (event.target.id != 'canvas') return\n    this.lassoSelect = true\n    console.log(event)\n  }\n\n  lassoSelectStyle() : string {\n    return this.lassoSelect? \"\" : \"visibility: hidden;\"\n  }\n\n}\n",
            "properties": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentDescriptorDto",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "dx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "dy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AddScreenshotDialogData",
            "id": "interface-AddScreenshotDialogData-d9d688e777829d02a27937820067977967056d8d3e4c25bf649b113873f02670a6d761c5507d7a8173d0a4bfb4b5cc0ef50ea0675168c7813166406a5e5fdbb9",
            "file": "src/app/ui/uiscenario-page/add-screenshot-dialog/add-screenshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ScreenShotCollectionDto} from \"@storydoc/models\";\n\nexport interface AddScreenshotDialogData {\n  screenshot: string,\n}\n\nexport interface AddScreenshotDialogInput {\n  mode: 'UPDATE' | 'NEW'\n  data: AddScreenshotDialogData\n}\n\n@Component({\n  selector: 'app-add-screenshot-dialog',\n  templateUrl: './add-screenshot-dialog.component.html',\n  styleUrls: ['./add-screenshot-dialog.component.scss']\n})\nexport class AddScreenshotDialogComponent {\n\n  @Input()\n  input: AddScreenshotDialogInput\n\n  @Input()\n  screenshotCollectionDTO: ScreenShotCollectionDto\n\n  formGroup: FormGroup = new FormGroup({\n    screenshot: new FormControl(null, Validators.required),\n  })\n\n  @Output()\n  private onConfirm = new EventEmitter()\n\n  @Output()\n  private onCancel = new EventEmitter()\n\n  cancel() {\n    this.onCancel.emit()\n  }\n\n  save() {\n    this.onConfirm.emit(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "screenshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AddScreenshotDialogInput",
            "id": "interface-AddScreenshotDialogInput-d9d688e777829d02a27937820067977967056d8d3e4c25bf649b113873f02670a6d761c5507d7a8173d0a4bfb4b5cc0ef50ea0675168c7813166406a5e5fdbb9",
            "file": "src/app/ui/uiscenario-page/add-screenshot-dialog/add-screenshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ScreenShotCollectionDto} from \"@storydoc/models\";\n\nexport interface AddScreenshotDialogData {\n  screenshot: string,\n}\n\nexport interface AddScreenshotDialogInput {\n  mode: 'UPDATE' | 'NEW'\n  data: AddScreenshotDialogData\n}\n\n@Component({\n  selector: 'app-add-screenshot-dialog',\n  templateUrl: './add-screenshot-dialog.component.html',\n  styleUrls: ['./add-screenshot-dialog.component.scss']\n})\nexport class AddScreenshotDialogComponent {\n\n  @Input()\n  input: AddScreenshotDialogInput\n\n  @Input()\n  screenshotCollectionDTO: ScreenShotCollectionDto\n\n  formGroup: FormGroup = new FormGroup({\n    screenshot: new FormControl(null, Validators.required),\n  })\n\n  @Output()\n  private onConfirm = new EventEmitter()\n\n  @Output()\n  private onCancel = new EventEmitter()\n\n  cancel() {\n    this.onCancel.emit()\n  }\n\n  save() {\n    this.onConfirm.emit(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddScreenshotDialogData",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"UPDATE\" | \"NEW\"",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ApiConfigurationParams",
            "id": "interface-ApiConfigurationParams-db041dc06e29ffff133e6d5e32db744ae15b56d237310730b07121a087b880ef86bfa2e2e7295842e4664c922ffe09403d7b1d5a30d7ab08039b93a07ba2355e",
            "file": "src/app/api/api-configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = 'http://localhost:8080';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n",
            "properties": [
                {
                    "name": "rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Parameters for <code>ApiModule.forRoot()</code></p>\n",
            "rawdescription": "\n\nParameters for `ApiModule.forRoot()`\n",
            "methods": []
        },
        {
            "name": "ArtifactDescriptor",
            "id": "interface-ArtifactDescriptor-dc129df091bff54566e375bf93d91f0f3aeb8acb66a3a46bf8084268a069803e0f636a26dbf5212fa1f8acea601ff713e9964a8d8b9563eb0eca5a66d79014a0",
            "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from \"@angular/core\";\n\nexport interface ArtifactDescriptor {\n  key: string\n  icon: string\n  label: string\n  editorUrl: string\n}\n\nlet timeLineModel = {\n  key: 'io.storydoc.server.timeline.domain.TimeLineModel',\n  icon: '/assets/timeline.png',\n  label: 'Timeline',\n  editorUrl: '/fe/timeline'\n\n} as ArtifactDescriptor\n\nlet uiScenario = {\n  key: 'io.storydoc.server.ui.domain.UIScenario',\n  icon: '/assets/artifact-ui-scenario.png',\n  label: 'UI Scenario',\n  editorUrl: '/fe/ui-scenario'\n\n} as ArtifactDescriptor\n\nlet uiScreenshotCollection = {\n  key: 'io.storydoc.server.ui.domain.ScreenShotCollection',\n  icon: '/assets/artifact-ui-design.png',\n  label: 'UI Screenshot collection',\n  editorUrl: '/fe/ui-screenshot-collection'\n} as ArtifactDescriptor\n\nlet uiScreenDesign = {\n  key: 'io.storydoc.server.ui.domain.screendesign.ScreenDesign',\n  icon: '/assets/artifact-ui-design.png',\n  label: 'Screen design',\n  editorUrl: '/fe/ui-screen-design'\n\n} as ArtifactDescriptor\n\nlet codeExecution = {\n  key: 'io.storydoc.server.code.domain.CodeExecution',\n  icon: '/assets/test-script.png',\n  label: 'Code Execution',\n  editorUrl: '/fe/code-trace'\n} as ArtifactDescriptor\n\nlet sourceCodeConfig = {\n  key: 'io.storydoc.server.code.domain.SourceCodeConfig',\n  icon: '/assets/config.png',\n  label: 'SourceCode Config',\n  editorUrl: '/fe/source-code-config'\n} as ArtifactDescriptor\n\nlet map: { [key: string]: ArtifactDescriptor } = {\n  'io.storydoc.server.timeline.domain.TimeLineModel': timeLineModel,\n  'io.storydoc.server.ui.domain.screendesign.ScreenDesign': uiScreenDesign,\n  'io.storydoc.server.ui.domain.UIScenario': uiScenario,\n  'io.storydoc.server.ui.domain.ScreenShotCollection': uiScreenshotCollection,\n  'io.storydoc.server.code.domain.CodeExecution': codeExecution,\n  'io.storydoc.server.code.domain.SourceCodeConfig': sourceCodeConfig\n}\n\nlet list: ArtifactDescriptor[] = [\n  timeLineModel,\n  uiScreenDesign,\n  uiScenario,\n  uiScreenshotCollection,\n  codeExecution,\n  sourceCodeConfig\n]\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArtifactDataService {\n\n  descriptor(artifactType: string): ArtifactDescriptor {\n    return map[artifactType]\n  }\n\n  list(): ArtifactDescriptor[] {\n    return list\n  }\n\n}\n",
            "properties": [
                {
                    "name": "editorUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ArtifactDialogData",
            "id": "interface-ArtifactDialogData-2d40a9ea8550f4eb97017113546eae3a18e63dd63740cfcfdb2006e97637f3c7a919235f87c0da38e34fa1b7f70cd4c032d18163c79fc0d75f05ec247be04867",
            "file": "src/app/document/document-page/create-artifact-dialog/create-artifact-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, Input, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ArtifactDataService, ArtifactDescriptor} from \"../block/artifact-block/artifact-data.service\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface ArtifactDialogData {\n  name?: string\n  file?: string\n  artifactType: string\n}\n\nexport interface ArtifactDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: ArtifactDialogData\n  confirm: (ArtifactDialogData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-create-artifact-dialog',\n  templateUrl: './create-artifact-dialog.component.html',\n  styleUrls: ['./create-artifact-dialog.component.scss']\n})\nexport class CreateArtifactDialogComponent {\n\n  constructor(private changeDetector: ChangeDetectorRef, private artifactDataService: ArtifactDataService) {\n  }\n\n  @Input()\n  spec: ArtifactDialogSpec\n\n  @ViewChild('type') typeField: ElementRef\n  @ViewChild('name') nameField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      if (this.updateMode()) {\n        this.artifactType.disable()\n        setFocusOn(this.nameField)\n      } else {\n        this.artifactType.enable()\n        setFocusOn(this.typeField)\n      }\n    }\n  }\n\n  updateMode(): boolean {\n    return this.spec.mode=='UPDATE'\n  }\n\n\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n    artifactType: new FormControl(null, Validators.required),\n  })\n\n  get artifactType(): FormControl {\n    return <FormControl> this.formGroup.get('artifactType')\n  }\n\n  descriptors(): ArtifactDescriptor[] {\n    return this.artifactDataService.list()\n  }\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "artifactType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ArtifactDialogSpec",
            "id": "interface-ArtifactDialogSpec-2d40a9ea8550f4eb97017113546eae3a18e63dd63740cfcfdb2006e97637f3c7a919235f87c0da38e34fa1b7f70cd4c032d18163c79fc0d75f05ec247be04867",
            "file": "src/app/document/document-page/create-artifact-dialog/create-artifact-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, Input, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ArtifactDataService, ArtifactDescriptor} from \"../block/artifact-block/artifact-data.service\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface ArtifactDialogData {\n  name?: string\n  file?: string\n  artifactType: string\n}\n\nexport interface ArtifactDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: ArtifactDialogData\n  confirm: (ArtifactDialogData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-create-artifact-dialog',\n  templateUrl: './create-artifact-dialog.component.html',\n  styleUrls: ['./create-artifact-dialog.component.scss']\n})\nexport class CreateArtifactDialogComponent {\n\n  constructor(private changeDetector: ChangeDetectorRef, private artifactDataService: ArtifactDataService) {\n  }\n\n  @Input()\n  spec: ArtifactDialogSpec\n\n  @ViewChild('type') typeField: ElementRef\n  @ViewChild('name') nameField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      if (this.updateMode()) {\n        this.artifactType.disable()\n        setFocusOn(this.nameField)\n      } else {\n        this.artifactType.enable()\n        setFocusOn(this.typeField)\n      }\n    }\n  }\n\n  updateMode(): boolean {\n    return this.spec.mode=='UPDATE'\n  }\n\n\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n    artifactType: new FormControl(null, Validators.required),\n  })\n\n  get artifactType(): FormControl {\n    return <FormControl> this.formGroup.get('artifactType')\n  }\n\n  descriptors(): ArtifactDescriptor[] {\n    return this.artifactDataService.list()\n  }\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtifactDialogData",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"UPDATE\" | \"NEW\"",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ArtifactDto",
            "id": "interface-ArtifactDto-c9f96cf61527207d040bf89604021c72aba94293fb2de2b5c9f7ceeb76440148d2c152989cb2730263188e6bd058a6ea3640c3de385ba18bd76eabaac2f9e353",
            "file": "src/app/api/models/artifact-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ArtifactId } from './artifact-id';\nimport { ItemDto } from './item-dto';\nimport { ResourceUrn } from './resource-urn';\nexport interface ArtifactDto {\n  artifactId?: ArtifactId;\n  artifactType?: string;\n  binary?: boolean;\n  binaryType?: string;\n  collection?: boolean;\n  items?: Array<ItemDto>;\n  name?: string;\n  state?: 'CREATED' | 'READY';\n  urn?: ResourceUrn;\n}\n",
            "properties": [
                {
                    "name": "artifactId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtifactId",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "artifactType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "binary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "binaryType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "collection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"CREATED\" | \"READY\"",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "urn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResourceUrn",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ArtifactId",
            "id": "interface-ArtifactId-bf8014c8aa5b20d49a6c6d5bb9220280746fe15d13f6b55305f81151d071d27ed0524092ece8e4b4e8b0cc0ed6b04d6c43138dfa616938220f533fd7510a9c0e",
            "file": "src/app/api/models/artifact-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ArtifactId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ArtifactSelectionDialogData",
            "id": "interface-ArtifactSelectionDialogData-b5135469502e0cfb14f430db68d9a6c20f83c629c9537b9d11dcd3816bccf44f1605c767cc18333c11579b09772fca707049808eea2d943dba11ec68bd114d19",
            "file": "src/app/document/document-page/artifact-selection-dialog/artifact-selection-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ArtifactDto, ArtifactId, BlockCoordinate} from \"@storydoc/models\";\nimport {ArtifactSelectionService} from \"./artifact-selection.service\";\n\nexport interface ArtifactSelectionDialogData  {\n}\n\nexport interface ArtifactSelectionDialogSpec  {\n  artifactType: string;\n  artifactLabel: string;\n  blockCoord: BlockCoordinate,\n  confirm: (selection: ArtifactId)=> void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-artifact-selection-dialog',\n  templateUrl: './artifact-selection-dialog.component.html',\n  styleUrls: ['./artifact-selection-dialog.component.scss']\n})\nexport class ArtifactSelectionDialogComponent implements OnInit, OnChanges {\n\n  @Input()\n  spec: ArtifactSelectionDialogSpec\n\n  constructor(private service: ArtifactSelectionService) { }\n\n  artifacts$ = this.service.artifacts$\n\n  ngOnInit(): void {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.spec) return\n    this.service.select(this.spec.artifactType, this.spec.blockCoord)\n  }\n\n\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  select(artifact: ArtifactDto) {\n    this.spec.confirm(artifact.artifactId)\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "ArtifactSelectionDialogSpec",
            "id": "interface-ArtifactSelectionDialogSpec-b5135469502e0cfb14f430db68d9a6c20f83c629c9537b9d11dcd3816bccf44f1605c767cc18333c11579b09772fca707049808eea2d943dba11ec68bd114d19",
            "file": "src/app/document/document-page/artifact-selection-dialog/artifact-selection-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ArtifactDto, ArtifactId, BlockCoordinate} from \"@storydoc/models\";\nimport {ArtifactSelectionService} from \"./artifact-selection.service\";\n\nexport interface ArtifactSelectionDialogData  {\n}\n\nexport interface ArtifactSelectionDialogSpec  {\n  artifactType: string;\n  artifactLabel: string;\n  blockCoord: BlockCoordinate,\n  confirm: (selection: ArtifactId)=> void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-artifact-selection-dialog',\n  templateUrl: './artifact-selection-dialog.component.html',\n  styleUrls: ['./artifact-selection-dialog.component.scss']\n})\nexport class ArtifactSelectionDialogComponent implements OnInit, OnChanges {\n\n  @Input()\n  spec: ArtifactSelectionDialogSpec\n\n  constructor(private service: ArtifactSelectionService) { }\n\n  artifacts$ = this.service.artifacts$\n\n  ngOnInit(): void {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.spec) return\n    this.service.select(this.spec.artifactType, this.spec.blockCoord)\n  }\n\n\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  select(artifact: ArtifactDto) {\n    this.spec.confirm(artifact.artifactId)\n  }\n}\n",
            "properties": [
                {
                    "name": "artifactLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "artifactType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "blockCoord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockCoordinate",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BlockCoordinate",
            "id": "interface-BlockCoordinate-094472d1cfd216f1b0a284558d0767dc80f8aaee8598f4b5e0845811be70ac8ba2c307f9185492ae196fcb64be861156a929772ba534b0b873612c2c64c813a6",
            "file": "src/app/api/models/block-coordinate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BlockId } from './block-id';\nimport { StoryDocId } from './story-doc-id';\nexport interface BlockCoordinate {\n  blockId?: BlockId;\n  storyDocId?: StoryDocId;\n}\n",
            "properties": [
                {
                    "name": "blockId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockId",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "storyDocId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BlockDialogData",
            "id": "interface-BlockDialogData-7175dcf9540d66f90766cb537a1fe47fdffe263c4b2a1548953568d5dab094740316826d27443115c7a7c8da85894a39ceda3fa1740a623edb1d03f9100c93ba",
            "file": "src/app/document/document-page/create-block-dialog/create-block-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface BlockDialogData {\n  name?: string\n}\n\nexport interface BlockDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: BlockDialogData\n  confirm: (BlockDialogData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-create-block-dialog',\n  templateUrl: './create-block-dialog.component.html',\n  styleUrls: ['./create-block-dialog.component.scss']\n})\nexport class CreateBlockDialogComponent implements OnChanges {\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  @Input()\n  spec: BlockDialogSpec\n\n  @ViewChild('name') nameField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      setFocusOn(this.nameField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required)\n  })\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BlockDialogSpec",
            "id": "interface-BlockDialogSpec-7175dcf9540d66f90766cb537a1fe47fdffe263c4b2a1548953568d5dab094740316826d27443115c7a7c8da85894a39ceda3fa1740a623edb1d03f9100c93ba",
            "file": "src/app/document/document-page/create-block-dialog/create-block-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface BlockDialogData {\n  name?: string\n}\n\nexport interface BlockDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: BlockDialogData\n  confirm: (BlockDialogData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-create-block-dialog',\n  templateUrl: './create-block-dialog.component.html',\n  styleUrls: ['./create-block-dialog.component.scss']\n})\nexport class CreateBlockDialogComponent implements OnChanges {\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  @Input()\n  spec: BlockDialogSpec\n\n  @ViewChild('name') nameField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      setFocusOn(this.nameField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required)\n  })\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockDialogData",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"UPDATE\" | \"NEW\"",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BlockDto",
            "id": "interface-BlockDto-347f55f89784746a3094d6dca9dd4025515df359d9ade767157ad989a10be2f4a8bd7453f7d609784752e78df0f7e20dc6412860cc9696fa20c55415d188980c",
            "file": "src/app/api/models/block-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ArtifactDto } from './artifact-dto';\nimport { BlockId } from './block-id';\nexport interface BlockDto {\n  artifacts?: Array<ArtifactDto>;\n  blockId?: BlockId;\n  blockType?: string;\n  numbering?: Array<number>;\n  parentBlockId?: BlockId;\n  text?: string;\n  title?: string;\n}\n",
            "properties": [
                {
                    "name": "artifacts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ArtifactDto>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "blockId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockId",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "blockType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "numbering",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "parentBlockId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockId",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BlockId",
            "id": "interface-BlockId-73aac7151a517e01b61c3ecda1cbd750b8c06f2581147167b6e8a9984464894892e0d76696ef613aa89c799526483a8561b70bc38e33b09b1da59aaf50d2ff2a",
            "file": "src/app/api/models/block-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BlockId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BluePrint",
            "id": "interface-BluePrint-91b80b366557e11924b926e0009d1650f6ca44e84bb9c3ab9c34a92037e3a9bd724f0af90292a453fc160bf742ad040a3d898e85a3090895440faab2e0f8761c",
            "file": "src/app/api/models/blue-print.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BluePrintElement } from './blue-print-element';\nimport { Layout } from './layout';\nexport interface BluePrint extends BluePrintElement {\n  elements?: Array<BluePrintElement>;\n  layout?: Layout;\n  name?: string;\n  subElements?: Array<BluePrintElement>;\n  type?: string;\n}\n",
            "properties": [
                {
                    "name": "elements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<BluePrintElement>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "layout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Layout",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "subElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<BluePrintElement>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "BluePrintElement"
        },
        {
            "name": "BluePrint",
            "id": "interface-BluePrint-7fc3fdfec60eb0f078a9ef74d64ad841f3589ad740b36ab9f8d9668ef89053a6d77f8b83b3997ab045c67e90cf9718825aabbab582f6b09a99e306a4b8bed570-1",
            "file": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Inject, Input, OnInit} from '@angular/core'\nimport {DOCUMENT} from \"@angular/common\"\n\ndeclare var LeaderLine: any\n\nexport interface BluePrintElem {\n  type: string\n  name: string\n}\n\nexport interface CompositeBluePrintElem extends BluePrintElem {\n  subElements: BluePrintElem[]\n}\n\nexport interface BluePrint extends CompositeBluePrintElem {\n  type: \"BluePrint\"\n}\n\nexport interface MethodElem {\n  id: string\n  methodName: string\n  active: boolean\n}\n\nexport interface ClassElem extends BluePrintElem {\n  type: \"ClassElem\"\n  role: string\n  className: string\n  methods: MethodElem[]\n}\n\nexport interface Line {\n  idFrom: string\n  idTo: string\n}\n\n@Component({\n  selector: 'app-diagram-example',\n  templateUrl: './diagram-example.component.html',\n  styleUrls: ['./diagram-example.component.scss']\n})\nexport class DiagramExampleComponent implements OnInit {\n\n  @Input()\n  diagram: BluePrint\n\n  @Input()\n  lines: Line[]\n\n  constructor(@Inject(DOCUMENT) private document) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  leaderLines: any[] = new Array()\n\n  ngAfterViewInit() {\n    console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n    this.lines.forEach(line => {\n      this.leaderLines.push(new LeaderLine(\n        this.document.getElementById(line.idFrom),\n        this.document.getElementById(line.idTo),\n        {\n          path: 'arc',\n          color: 'red',\n          size: 4,\n          //endPlug: 'arrow3'\n        }\n      ))\n    })\n  }\n\n  ngOnDestroy() {\n    if (this.leaderLines) {\n      console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n      for (var leaderLine of this.leaderLines) {\n        console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n        console.log(\"typeof this.leaderLine\", typeof leaderLine)\n        //leaderLine.remove()\n      }\n      this.leaderLines = []\n    }\n  }\n\n}\n\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "CompositeBluePrintElem",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BluePrint-1"
        },
        {
            "name": "BluePrintDiagram",
            "id": "interface-BluePrintDiagram-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BluePrintDiagram[]",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 88
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BluePrintElem",
            "id": "interface-BluePrintElem-7fc3fdfec60eb0f078a9ef74d64ad841f3589ad740b36ab9f8d9668ef89053a6d77f8b83b3997ab045c67e90cf9718825aabbab582f6b09a99e306a4b8bed570",
            "file": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Inject, Input, OnInit} from '@angular/core'\nimport {DOCUMENT} from \"@angular/common\"\n\ndeclare var LeaderLine: any\n\nexport interface BluePrintElem {\n  type: string\n  name: string\n}\n\nexport interface CompositeBluePrintElem extends BluePrintElem {\n  subElements: BluePrintElem[]\n}\n\nexport interface BluePrint extends CompositeBluePrintElem {\n  type: \"BluePrint\"\n}\n\nexport interface MethodElem {\n  id: string\n  methodName: string\n  active: boolean\n}\n\nexport interface ClassElem extends BluePrintElem {\n  type: \"ClassElem\"\n  role: string\n  className: string\n  methods: MethodElem[]\n}\n\nexport interface Line {\n  idFrom: string\n  idTo: string\n}\n\n@Component({\n  selector: 'app-diagram-example',\n  templateUrl: './diagram-example.component.html',\n  styleUrls: ['./diagram-example.component.scss']\n})\nexport class DiagramExampleComponent implements OnInit {\n\n  @Input()\n  diagram: BluePrint\n\n  @Input()\n  lines: Line[]\n\n  constructor(@Inject(DOCUMENT) private document) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  leaderLines: any[] = new Array()\n\n  ngAfterViewInit() {\n    console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n    this.lines.forEach(line => {\n      this.leaderLines.push(new LeaderLine(\n        this.document.getElementById(line.idFrom),\n        this.document.getElementById(line.idTo),\n        {\n          path: 'arc',\n          color: 'red',\n          size: 4,\n          //endPlug: 'arrow3'\n        }\n      ))\n    })\n  }\n\n  ngOnDestroy() {\n    if (this.leaderLines) {\n      console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n      for (var leaderLine of this.leaderLines) {\n        console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n        console.log(\"typeof this.leaderLine\", typeof leaderLine)\n        //leaderLine.remove()\n      }\n      this.leaderLines = []\n    }\n  }\n\n}\n\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BluePrintElement",
            "id": "interface-BluePrintElement-78f240d9ebf09d43ea17c74080abf3030a386a6e86faa71c3549625e3f4527d672b34e89b62c6a94d25e36c4b34e40a53d636c58c9a9ec4a2c37aa2ae891c727",
            "file": "src/app/api/models/blue-print-element.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BluePrintElement {\n  type?: string;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BlueprintStoreState",
            "id": "interface-BlueprintStoreState-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "bluePrint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BluePrint",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "bluePrintDiagram",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BluePrintDiagram",
                    "optional": false,
                    "description": "",
                    "line": 94
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClassElem",
            "id": "interface-ClassElem-7fc3fdfec60eb0f078a9ef74d64ad841f3589ad740b36ab9f8d9668ef89053a6d77f8b83b3997ab045c67e90cf9718825aabbab582f6b09a99e306a4b8bed570",
            "file": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Inject, Input, OnInit} from '@angular/core'\nimport {DOCUMENT} from \"@angular/common\"\n\ndeclare var LeaderLine: any\n\nexport interface BluePrintElem {\n  type: string\n  name: string\n}\n\nexport interface CompositeBluePrintElem extends BluePrintElem {\n  subElements: BluePrintElem[]\n}\n\nexport interface BluePrint extends CompositeBluePrintElem {\n  type: \"BluePrint\"\n}\n\nexport interface MethodElem {\n  id: string\n  methodName: string\n  active: boolean\n}\n\nexport interface ClassElem extends BluePrintElem {\n  type: \"ClassElem\"\n  role: string\n  className: string\n  methods: MethodElem[]\n}\n\nexport interface Line {\n  idFrom: string\n  idTo: string\n}\n\n@Component({\n  selector: 'app-diagram-example',\n  templateUrl: './diagram-example.component.html',\n  styleUrls: ['./diagram-example.component.scss']\n})\nexport class DiagramExampleComponent implements OnInit {\n\n  @Input()\n  diagram: BluePrint\n\n  @Input()\n  lines: Line[]\n\n  constructor(@Inject(DOCUMENT) private document) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  leaderLines: any[] = new Array()\n\n  ngAfterViewInit() {\n    console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n    this.lines.forEach(line => {\n      this.leaderLines.push(new LeaderLine(\n        this.document.getElementById(line.idFrom),\n        this.document.getElementById(line.idTo),\n        {\n          path: 'arc',\n          color: 'red',\n          size: 4,\n          //endPlug: 'arrow3'\n        }\n      ))\n    })\n  }\n\n  ngOnDestroy() {\n    if (this.leaderLines) {\n      console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n      for (var leaderLine of this.leaderLines) {\n        console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n        console.log(\"typeof this.leaderLine\", typeof leaderLine)\n        //leaderLine.remove()\n      }\n      this.leaderLines = []\n    }\n  }\n\n}\n\n",
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "methods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MethodElem[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "BluePrintElem"
        },
        {
            "name": "CodeConfigurationData",
            "id": "interface-CodeConfigurationData-9d5e7fe52bb74b6ea4b7b44ecf58062d6a5182bb5647ce8809f7024b33d348c8261560c679231a2636d09a73bf67f6f4c8368b6da96cab17d973c59e8c917af7",
            "file": "src/app/code/code-configuration-page/code-configuration-dialog/code-configuration-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {setFocusOn} from \"@storydoc/common\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\n\nexport interface CodeConfigurationData {\n  path: string,\n  addMore: boolean\n}\n\nexport interface CodeConfigurationSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: CodeConfigurationData\n  confirm: (CodeConfigurationData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-code-configuration-dialog',\n  templateUrl: './code-configuration-dialog.component.html',\n  styleUrls: ['./code-configuration-dialog.component.scss']\n})\nexport class CodeConfigurationDialogComponent implements OnChanges {\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n  }\n\n  @Input()\n  spec: CodeConfigurationSpec\n\n  @ViewChild('path') pathField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      //this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n     // setFocusOn(this.pathField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    path: new FormControl(null, Validators.required),\n    addMore: new FormControl(null)\n  })\n\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  save() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "addMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CodeConfigurationSpec",
            "id": "interface-CodeConfigurationSpec-9d5e7fe52bb74b6ea4b7b44ecf58062d6a5182bb5647ce8809f7024b33d348c8261560c679231a2636d09a73bf67f6f4c8368b6da96cab17d973c59e8c917af7",
            "file": "src/app/code/code-configuration-page/code-configuration-dialog/code-configuration-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {setFocusOn} from \"@storydoc/common\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\n\nexport interface CodeConfigurationData {\n  path: string,\n  addMore: boolean\n}\n\nexport interface CodeConfigurationSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: CodeConfigurationData\n  confirm: (CodeConfigurationData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-code-configuration-dialog',\n  templateUrl: './code-configuration-dialog.component.html',\n  styleUrls: ['./code-configuration-dialog.component.scss']\n})\nexport class CodeConfigurationDialogComponent implements OnChanges {\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n  }\n\n  @Input()\n  spec: CodeConfigurationSpec\n\n  @ViewChild('path') pathField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      //this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n     // setFocusOn(this.pathField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    path: new FormControl(null, Validators.required),\n    addMore: new FormControl(null)\n  })\n\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  save() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeConfigurationData",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"UPDATE\" | \"NEW\"",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CodeExecutionCoordinate",
            "id": "interface-CodeExecutionCoordinate-29e65805d2be070de53b9a58b197ae8a6c96acf22d0cf37eb14a587ddd51739b41ab66b8b5f84e9fda99ec7bb6bacccd902f805edd4265f61f756661d57526e6",
            "file": "src/app/api/models/code-execution-coordinate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BlockCoordinate } from './block-coordinate';\nimport { CodeExecutionId } from './code-execution-id';\nexport interface CodeExecutionCoordinate {\n  blockCoordinate?: BlockCoordinate;\n  codeExecutionId?: CodeExecutionId;\n}\n",
            "properties": [
                {
                    "name": "blockCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "codeExecutionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeExecutionId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CodeExecutionEnterEvent",
            "id": "interface-CodeExecutionEnterEvent-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "methodName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "StitchEvent"
        },
        {
            "name": "CodeExecutionId",
            "id": "interface-CodeExecutionId-6c30460018e5caa75a715b5618e1fa4ccbeeebd8e855a83fcf7cd9e900846b5cd91084afd855727fc4325d9e253c67fc0dff6007694aad4a15dddc8b300c8667",
            "file": "src/app/api/models/code-execution-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CodeExecutionId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CodeExecutionReturnEvent",
            "id": "interface-CodeExecutionReturnEvent-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "methodName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "StitchEvent"
        },
        {
            "name": "CodeTraceConfigDialogData",
            "id": "interface-CodeTraceConfigDialogData-f5ae8932c7a45154722bd1f5d2e7d6e806515ee548e9c4437c6de8553f2dba8850d37beca62b010a0d6d8e8d1e02d4ce26a3028944e33302e447fb95a6b5c997",
            "file": "src/app/code/code-trace-page/code-trace-configuration-dialog/code-trace-configuration-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ModalService} from \"@storydoc/common\";\nimport {CodeService} from \"../../code.service\";\nimport {ArtifactSelectionDialogSpec} from \"../../../document/document-page/artifact-selection-dialog/artifact-selection-dialog.component\";\nimport {ArtifactDto, ArtifactId, BlockCoordinate, CodeExecutionCoordinate} from \"@storydoc/models\";\n\nexport interface CodeTraceConfigDialogData  {\n  stitchFile: string,\n  testClass: string,\n  testMethod: string\n}\n\nexport interface CodeTraceConfigDialogSpec  {\n  coord: CodeExecutionCoordinate\n  data: CodeTraceConfigDialogData\n  confirm: (data: CodeTraceConfigDialogData)=> void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-code-trace-configuration-dialog',\n  templateUrl: './code-trace-configuration-dialog.component.html',\n  styleUrls: ['./code-trace-configuration-dialog.component.scss']\n})\nexport class CodeTraceConfigurationDialogComponent implements OnInit {\n\n  constructor(\n    private modalService: ModalService,\n    private service: CodeService)\n  { }\n\n  @Input()\n  spec: CodeTraceConfigDialogSpec\n\n\n  ngOnInit(): void {\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    stitchFile: new FormControl(null, Validators.required),\n    testClass: new FormControl(null, Validators.required),\n    testMethod: new FormControl(null, Validators.required),\n  })\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n  // artifact selection dialog\n\n  artifactSelectionDialogSpec: ArtifactSelectionDialogSpec\n\n  selectCodeConfigArtifact() {\n     this.openArtifactSelectionDialog({\n       artifactType: 'io.storydoc.server.code.domain.SourceCodeConfig',\n       artifactLabel: 'SourceCode Configuration',\n       blockCoord: this.spec.coord.blockCoordinate,\n       cancel: () => this.closeArtifactSelectionDialog(),\n       confirm: (artifactId) => { this.confirmSelection(this.spec.coord.blockCoordinate, artifactId); this.closeArtifactSelectionDialog()},\n     });\n  }\n\n  artifactSelectionDialogId(): string {\n    return 'artifact-selection-dialog-id'\n  };\n\n  openArtifactSelectionDialog(spec: ArtifactSelectionDialogSpec) {\n    this.artifactSelectionDialogSpec = spec\n    this.modalService.open(this.artifactSelectionDialogId())\n  }\n\n  closeArtifactSelectionDialog() {\n    this.modalService.close(this.artifactSelectionDialogId())\n  }\n\n\n  private confirmSelection(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    this.service.setCodeExecutionConfig(blockCoordinate, artifactId)\n  }\n}\n",
            "properties": [
                {
                    "name": "stitchFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "testClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "testMethod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CodeTraceConfigDialogSpec",
            "id": "interface-CodeTraceConfigDialogSpec-f5ae8932c7a45154722bd1f5d2e7d6e806515ee548e9c4437c6de8553f2dba8850d37beca62b010a0d6d8e8d1e02d4ce26a3028944e33302e447fb95a6b5c997",
            "file": "src/app/code/code-trace-page/code-trace-configuration-dialog/code-trace-configuration-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ModalService} from \"@storydoc/common\";\nimport {CodeService} from \"../../code.service\";\nimport {ArtifactSelectionDialogSpec} from \"../../../document/document-page/artifact-selection-dialog/artifact-selection-dialog.component\";\nimport {ArtifactDto, ArtifactId, BlockCoordinate, CodeExecutionCoordinate} from \"@storydoc/models\";\n\nexport interface CodeTraceConfigDialogData  {\n  stitchFile: string,\n  testClass: string,\n  testMethod: string\n}\n\nexport interface CodeTraceConfigDialogSpec  {\n  coord: CodeExecutionCoordinate\n  data: CodeTraceConfigDialogData\n  confirm: (data: CodeTraceConfigDialogData)=> void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-code-trace-configuration-dialog',\n  templateUrl: './code-trace-configuration-dialog.component.html',\n  styleUrls: ['./code-trace-configuration-dialog.component.scss']\n})\nexport class CodeTraceConfigurationDialogComponent implements OnInit {\n\n  constructor(\n    private modalService: ModalService,\n    private service: CodeService)\n  { }\n\n  @Input()\n  spec: CodeTraceConfigDialogSpec\n\n\n  ngOnInit(): void {\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    stitchFile: new FormControl(null, Validators.required),\n    testClass: new FormControl(null, Validators.required),\n    testMethod: new FormControl(null, Validators.required),\n  })\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n  // artifact selection dialog\n\n  artifactSelectionDialogSpec: ArtifactSelectionDialogSpec\n\n  selectCodeConfigArtifact() {\n     this.openArtifactSelectionDialog({\n       artifactType: 'io.storydoc.server.code.domain.SourceCodeConfig',\n       artifactLabel: 'SourceCode Configuration',\n       blockCoord: this.spec.coord.blockCoordinate,\n       cancel: () => this.closeArtifactSelectionDialog(),\n       confirm: (artifactId) => { this.confirmSelection(this.spec.coord.blockCoordinate, artifactId); this.closeArtifactSelectionDialog()},\n     });\n  }\n\n  artifactSelectionDialogId(): string {\n    return 'artifact-selection-dialog-id'\n  };\n\n  openArtifactSelectionDialog(spec: ArtifactSelectionDialogSpec) {\n    this.artifactSelectionDialogSpec = spec\n    this.modalService.open(this.artifactSelectionDialogId())\n  }\n\n  closeArtifactSelectionDialog() {\n    this.modalService.close(this.artifactSelectionDialogId())\n  }\n\n\n  private confirmSelection(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    this.service.setCodeExecutionConfig(blockCoordinate, artifactId)\n  }\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "coord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeExecutionCoordinate",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeTraceConfigDialogData",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CodeTraceDto",
            "id": "interface-CodeTraceDto-4d8925d87c78ea6e935a1204e5c6536f7db38cd83702ae168a17b7e05e031cbc109d56d9ef5b22946e8547d2d571e8cb952047c6d3fa81c8c1d6d8a457ce9155",
            "file": "src/app/api/models/code-trace-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SourceCodeConfigCoordinate } from './source-code-config-coordinate';\nimport { StitchItemDto } from './stitch-item-dto';\nimport { StoryDocSummaryDto } from './story-doc-summary-dto';\nexport interface CodeTraceDto {\n  config?: SourceCodeConfigCoordinate;\n  description?: string;\n  items?: Array<StitchItemDto>;\n  name?: string;\n  storyDocSummary?: StoryDocSummaryDto;\n}\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceCodeConfigCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<StitchItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "storyDocSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocSummaryDto",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ComponentAttributeDescriptorDto",
            "id": "interface-ComponentAttributeDescriptorDto-394d7b3a527f17c3d9bc9fcc9f67400ffdb9fafaa061999a3c546a1fec56e4074429c60c7646dca0826d01a089da310e29b51dba4ee455d70bf1f763a138297c",
            "file": "src/app/api/models/component-attribute-descriptor-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ComponentAttributeDescriptorDto {\n  name?: string;\n  type?: 'NUMBER' | 'STRING';\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"NUMBER\" | \"STRING\"",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ComponentAttributeDto",
            "id": "interface-ComponentAttributeDto-cc652726ad8bc33d8c9e20d187b8abb45828b9c34c1092111ba457d84dd26e0ee62108b6d1f1f807219ad856c2a30c2eebfcfec5bcd15d5fc553ec3066736a20",
            "file": "src/app/api/models/component-attribute-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ComponentAttributeDto {\n  name?: string;\n  value?: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ComponentDescriptorDto",
            "id": "interface-ComponentDescriptorDto-d852259ba5a050a759d3d83eb5f6233456fae258b92b02dae1fa4e82f741d9edb5f02700e778f3e2ac3c76de5902c2380bfc17f5bd638c466d1aa34fb36ee4e5",
            "file": "src/app/api/models/component-descriptor-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentAttributeDescriptorDto } from './component-attribute-descriptor-dto';\nexport interface ComponentDescriptorDto {\n  attributes?: Array<ComponentAttributeDescriptorDto>;\n  label?: string;\n  type?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentAttributeDescriptorDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CompositeBluePrintElem",
            "id": "interface-CompositeBluePrintElem-7fc3fdfec60eb0f078a9ef74d64ad841f3589ad740b36ab9f8d9668ef89053a6d77f8b83b3997ab045c67e90cf9718825aabbab582f6b09a99e306a4b8bed570",
            "file": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Inject, Input, OnInit} from '@angular/core'\nimport {DOCUMENT} from \"@angular/common\"\n\ndeclare var LeaderLine: any\n\nexport interface BluePrintElem {\n  type: string\n  name: string\n}\n\nexport interface CompositeBluePrintElem extends BluePrintElem {\n  subElements: BluePrintElem[]\n}\n\nexport interface BluePrint extends CompositeBluePrintElem {\n  type: \"BluePrint\"\n}\n\nexport interface MethodElem {\n  id: string\n  methodName: string\n  active: boolean\n}\n\nexport interface ClassElem extends BluePrintElem {\n  type: \"ClassElem\"\n  role: string\n  className: string\n  methods: MethodElem[]\n}\n\nexport interface Line {\n  idFrom: string\n  idTo: string\n}\n\n@Component({\n  selector: 'app-diagram-example',\n  templateUrl: './diagram-example.component.html',\n  styleUrls: ['./diagram-example.component.scss']\n})\nexport class DiagramExampleComponent implements OnInit {\n\n  @Input()\n  diagram: BluePrint\n\n  @Input()\n  lines: Line[]\n\n  constructor(@Inject(DOCUMENT) private document) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  leaderLines: any[] = new Array()\n\n  ngAfterViewInit() {\n    console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n    this.lines.forEach(line => {\n      this.leaderLines.push(new LeaderLine(\n        this.document.getElementById(line.idFrom),\n        this.document.getElementById(line.idTo),\n        {\n          path: 'arc',\n          color: 'red',\n          size: 4,\n          //endPlug: 'arrow3'\n        }\n      ))\n    })\n  }\n\n  ngOnDestroy() {\n    if (this.leaderLines) {\n      console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n      for (var leaderLine of this.leaderLines) {\n        console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n        console.log(\"typeof this.leaderLine\", typeof leaderLine)\n        //leaderLine.remove()\n      }\n      this.leaderLines = []\n    }\n  }\n\n}\n\n",
            "properties": [
                {
                    "name": "subElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BluePrintElem[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "BluePrintElem"
        },
        {
            "name": "CompositeBluePrintElement",
            "id": "interface-CompositeBluePrintElement-831dbf742ec19f173631337a86f4f98f36302f83d1cbc16a9d1e7c715c7472eb0c346e8d86834944e6da92ddeaa7f72564b348caa96017b1c2f6748c1b4671d5",
            "file": "src/app/api/models/composite-blue-print-element.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BluePrintElement } from './blue-print-element';\nimport { Layout } from './layout';\nexport interface CompositeBluePrintElement extends BluePrintElement {\n  layout?: Layout;\n  subElements?: Array<BluePrintElement>;\n  type?: string;\n}\n",
            "properties": [
                {
                    "name": "layout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Layout",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<BluePrintElement>",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "BluePrintElement"
        },
        {
            "name": "ConfigPanelState",
            "id": "interface-ConfigPanelState-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "configs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtifactDto[]",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConfigPanelState",
            "id": "interface-ConfigPanelState-5e0dbeedcf3ed534fb0cfdd1abbaccb241c56c80f41d13c05168b1b1c80a64a84862fbfe4a5e251b6a7c990a01e9694f97b39f674e02d14015cdb66b1282de8f-1",
            "file": "src/app/ui/uiscenario-page/uiscenario.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Observable, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {\n  BlockCoordinate,\n  BlockId, ScreenshotCollectionCoordinate, ScreenShotCollectionDto, ScreenshotCollectionSummaryDto,\n  ScreenshotCoordinate,\n  StoryDocId, TimeLineDto,\n  TimeLineId,\n  TimeLineItemId,\n  TimeLineModelCoordinate,\n  TimeLineModelDto,\n  TimeLineModelId,\n  TimeLineModelSummaryDto,\n  UiScenarioCoordinate,\n  UiScenarioDto\n} from \"@storydoc/models\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {TimeLineControllerService, UiRestControllerService} from \"@storydoc/services\";\n\ninterface PresentationState {\n  presentationMode: boolean\n}\n\ninterface ScenarioPanelState {\n  uiScenarioCoord?: UiScenarioCoordinate,\n  uiScenarioDto?: UiScenarioDto,\n  timeLineModel?: TimeLineModelDto\n  timeLineId?: TimeLineId,\n  timeLine? : TimeLineDto\n}\n\ninterface ScreenshotSelectionPanelState {\n  screenshotCollections?: ScreenshotCollectionSummaryDto[]\n  screenshotCollectionCoord?: ScreenshotCollectionCoordinate\n  screenshotCollection?: ScreenShotCollectionDto\n}\n\ninterface ConfigPanelState {\n  timeLineModels?: TimeLineModelSummaryDto[]\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UIScenarioService implements OnDestroy {\n\n  constructor(\n    private uiRestControllerService: UiRestControllerService,\n    private timeLineControllerService: TimeLineControllerService\n  ) {\n    this.init()\n  }\n\n  // UIScenario, Timeline selection\n\n  private scenarioStore = new BehaviorSubject<ScenarioPanelState>({})\n  state$ = this.scenarioStore.asObservable()\n\n  uiScenario$ = this.state$.pipe(\n    map(state => state.uiScenarioDto),\n    distinctUntilChanged(),\n  )\n\n  timeLineModel$ = this.state$.pipe(\n    map(state => state.timeLineModel),\n    distinctUntilChanged(),\n  )\n\n  timeLineId$ = this.state$.pipe(\n    map(state => state.timeLineId),\n    distinctUntilChanged(),\n  )\n\n  timeLine$ = this.state$.pipe(\n    map(state => state.timeLine),\n    distinctUntilChanged(),\n  )\n\n  // ScreenshotSelection\n\n  screenshotStore = new BehaviorSubject<ScreenshotSelectionPanelState>({})\n\n  screenshotCollections$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollections),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollectionCoord$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollectionCoord),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollection$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollection),\n    distinctUntilChanged(),\n  )\n\n  // Config panel\n\n  private configStore = new BehaviorSubject<ConfigPanelState>({})\n  timeLineModels$ = this.configStore.pipe(\n    map(store => store.timeLineModels),\n    distinctUntilChanged()\n  )\n\n  private get uiScenario(): UiScenarioDto {\n    return this.scenarioStore.getValue()?.uiScenarioDto\n  }\n\n  private get uiScenarioCoord(): UiScenarioCoordinate {\n    return this.scenarioStore.getValue()?.uiScenarioCoord\n  }\n\n  private get timeLineModel(): TimeLineModelDto {\n    return this.scenarioStore.getValue()?.timeLineModel\n  }\n\n  // Presentation state\n\n  private presentationStore = new BehaviorSubject<PresentationState>({presentationMode: false})\n\n  presentationMode$ = this.presentationStore.pipe(\n    map(store => store.presentationMode),\n    distinctUntilChanged()\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('ScenarioStore$ >>', this.scenarioStore))\n    this.subscriptions.push(logChangesToObservable('ConfigStore$ >> ', this.configStore))\n    this.subscriptions.push(logChangesToObservable('TimeLineId$ >>', this.timeLineId$))\n    this.subscriptions.push(logChangesToObservable('timeLine$ >> ', this.timeLine$))\n    this.subscriptions.push(this.loadTimeLineModelFromUIScenario())\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadUIScenario(params: { storyDocId: StoryDocId, blockId: BlockId, uiScenarioId: string }) {\n    log(\"loadUIScenario(params)\", params)\n    this.screenshotStore.next({})\n    this.configStore.next({})\n    this.scenarioStore.next({\n      uiScenarioCoord: {\n        blockCoordinate: {\n          storyDocId: params.storyDocId,\n          blockId: params.blockId\n        },\n        uiScenarioId: {id: params.uiScenarioId}\n      }\n    })\n    this.reloadScenario()\n  }\n\n  public selectTimeLineModel(timeLineModelCoordinate: TimeLineModelCoordinate) {\n    log(\"selectTimeLineModel(coord)\", timeLineModelCoordinate)\n    this.uiRestControllerService.setUiScenarioTimeLineModelUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      timeLineModelStoryDocId: timeLineModelCoordinate.blockCoordinate.storyDocId.id,\n      timeLineModelBlockId: timeLineModelCoordinate.blockCoordinate.blockId.id,\n      timeLineModelId: timeLineModelCoordinate.timeLineModelId.id,\n    }).subscribe({\n      next: value => {\n        this.reloadScenario()\n      }\n    })\n  }\n\n  public setScenarioTimeLine(timeLineId: TimeLineId) {\n    log('setScenarioTimeLine(timeLineId)', timeLineId)\n    this.scenarioStore.next({\n      ... this.scenarioStore.value,\n      timeLineId,\n      timeLine: this.timeLineById(this.timeLineModel, timeLineId)\n    })\n  }\n\n  private timeLineById(timeLineModel: TimeLineModelDto, timeLineId: TimeLineId): TimeLineDto {\n    return this.timelinesAsArray(timeLineModel.timeLines).find(timeLine => timeLine.timeLineId.id === timeLineId.id)\n  }\n\n  private timelinesAsArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  public selectScreenshotCollection(coord: ScreenshotCollectionCoordinate) {\n    log('selectScreenshotCollection(coord)', coord)\n    this.uiRestControllerService.getScreenShotCollectionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      id: coord.screenShotCollectionId.id\n    }).subscribe(collectionDto => {\n      this.screenshotStore.next({\n        ... this.screenshotStore.getValue(),\n        screenshotCollectionCoord: coord,\n        screenshotCollection: collectionDto\n      })\n    })\n  }\n\n  public addScreenshotToScenario(screenshotCoordinate: ScreenshotCoordinate, timeLineItemId: TimeLineItemId) {\n    log('addScreenshotToScenario(screenshotCoordinate, timeLineItemId)', screenshotCoordinate, timeLineItemId)\n    this.uiRestControllerService.addScreenshotToUiScenarioUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      screenshotStoryDocId: screenshotCoordinate.collectionCoordinate.blockCoordinate.storyDocId.id,\n      screenshotBlockId: screenshotCoordinate.collectionCoordinate.blockCoordinate.blockId.id,\n      screenshotCollectionId: screenshotCoordinate.collectionCoordinate.screenShotCollectionId.id,\n      screenshotId: screenshotCoordinate.screenShotId.id,\n      timeLineItemId: timeLineItemId.id\n    }).subscribe({\n      next: (value => this.reloadScenario())\n    })\n  }\n\n  private reloadScenario() {\n    log('reloadScenario()')\n    this.uiRestControllerService.getUiScenarioUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      id: this.uiScenarioCoord.uiScenarioId.id\n    }).subscribe({\n      next: uiScenarioDto => {\n        this.scenarioStore.next({\n          ...this.scenarioStore.getValue(),\n          uiScenarioDto: uiScenarioDto,\n        })\n        this.screenshotStore.next({\n          ... this.screenshotStore.getValue(),\n          screenshotCollections: uiScenarioDto.associatedCollections\n        })\n      }\n    })\n  }\n\n  private loadTimeLineModelFromUIScenario(): Subscription {\n    return this.uiScenario$.subscribe({\n      next: uiScenario => {\n        log('uiScenario$-->refreshTimeLineModelWhenScenarioUpdates()')\n        if (!this.equalTimeLineModelCoord(this.timeLineModel?.timeLineModelCoordinate, uiScenario?.timeLineModelCoordinate)) {\n          this.loadTimeLineModel(uiScenario.timeLineModelCoordinate)\n        }\n      }\n    })\n  }\n\n  private loadTimeLineModel(coord: TimeLineModelCoordinate) {\n    log('reloadTimeLineModel(coord)', coord)\n    this.timeLineControllerService.getTimeLineModelUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      timeLineModelId: coord.timeLineModelId.id\n    }).subscribe({\n      next: (dto) => {\n        let nextValue = <ScenarioPanelState>{\n          ...this.scenarioStore.getValue(),\n          timeLineModel: dto,\n        }\n        this.scenarioStore.next(nextValue)\n        let defaultId = this.defaultTimeline(dto)?.timeLineId\n        if (!nextValue.timeLineId && (defaultId)) {\n          this.setScenarioTimeLine(defaultId)\n        }\n      }\n    })\n  }\n\n  private equalTimeLineCoord(tlmCoord1: TimeLineModelCoordinate, tlId1: TimeLineId, tlmCoord2: TimeLineModelCoordinate, tlId2: TimeLineId) {\n    return this.equalTimeLineModelCoord(tlmCoord1, tlmCoord2) && this.equalTimeLineId(tlId1, tlId2)\n  }\n\n  private equalTimeLineModelCoord(coord1: TimeLineModelCoordinate, coord2: TimeLineModelCoordinate): boolean {\n    return this.equalTimeLineModelId(coord1?.timeLineModelId, coord2?.timeLineModelId) && this.equalBlockCoordinate(coord1?.blockCoordinate, coord2?.blockCoordinate)\n  }\n\n  private equalTimeLineId(id1: TimeLineId, id2: TimeLineId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalTimeLineModelId(id1: TimeLineModelId, id2: TimeLineModelId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalBlockCoordinate(coord1: BlockCoordinate, coord2: BlockCoordinate): boolean {\n    return coord1?.storyDocId.id === coord2?.storyDocId.id && coord1?.blockId.id === coord2?.blockId.id;\n  }\n\n\n  public loadAssociatedTimeLineModels() {\n    log('loadAssociatedTimeLineModels()')\n    let uiScenario = this.uiScenario\n    this.timeLineControllerService.getTimeLineModelSummariesUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id\n    }).subscribe({\n      next: summaries => this.configStore.next({timeLineModels: summaries})\n    })\n  }\n\n  private defaultTimeline(dto: TimeLineModelDto) {\n    return this.asArray(dto.timeLines).find((timeLine)=> timeLine.name==='default');\n  }\n\n  private asArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  // presentation mode\n\n  togglePresentationMode() {\n    this.presentationStore.next({ presentationMode: !this.presentationStore.getValue().presentationMode })\n  }\n\n  selectFirst() {\n\n  }\n\n  selectPrevious() {\n\n  }\n\n  selectNext() {\n\n  }\n\n  selectLast() {\n\n  }\n}\n",
            "properties": [
                {
                    "name": "timeLineModels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineModelSummaryDto[]",
                    "optional": true,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ConfigPanelState-1"
        },
        {
            "name": "ConfirmationDialogSpec",
            "id": "interface-ConfirmationDialogSpec-875e19b115d5b6ffd98af56d9bb8db885f6eab37a6a0b78f9819ecbdd90475e395d1a8e6598190e9f3bb34613b970d8fc8df2600a36ea69db8e3740986207385",
            "file": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input} from '@angular/core';\n\nexport interface ConfirmationDialogSpec {\n  title: string;\n  message: string,\n  cancel: () => void\n  confirm: () => void\n}\n\n@Component({\n  selector: 'app-confirmation-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  styleUrls: ['./confirmation-dialog.component.scss']\n})\nexport class ConfirmationDialogComponent {\n\n  @Input()\n  spec: ConfirmationDialogSpec\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this, [])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DbDataSetDto",
            "id": "interface-DbDataSetDto-9876c4d6894ac11f3d96b5503f146d1c594b13d8ce22c3c320bd84bbbab54c1a9041e864450544e735b6fa9aafb4930af9a21c83d056515219b3753eb1ee1aaa",
            "file": "src/app/api/models/db-data-set-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableDataSetDto } from './table-data-set-dto';\nexport interface DbDataSetDto {\n  tableDataSets?: Array<TableDataSetDto>;\n}\n",
            "properties": [
                {
                    "name": "tableDataSets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<TableDataSetDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DiagramPoint",
            "id": "interface-DiagramPoint-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DocumentDialogData",
            "id": "interface-DocumentDialogData-1b726887da00f527c868736461927985900f5c0d0e41e9235d7a069131df31d2475002ceb0035d3ea2ba7e62eda883c8b78cb36414a347d4ecd7aba8de77923d",
            "file": "src/app/document/document-manager-page/create-document-dialog/create-document-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface DocumentDialogData {\n  name?: string\n}\n\nexport interface DocumentDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: DocumentDialogData\n  cancel: () => void\n  confirm: (data: DocumentDialogData) => void\n}\n\n\n@Component({\n  selector: 'app-create-document-dialog',\n  templateUrl: './create-document-dialog.component.html',\n  styleUrls: ['./create-document-dialog.component.scss']\n})\nexport class CreateDocumentDialogComponent implements OnChanges{\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  @Input()\n  spec: DocumentDialogSpec\n\n  @ViewChild('name') nameField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      setFocusOn(this.nameField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required)\n  })\n\n  @Output()\n  private onConfirm = new EventEmitter()\n\n  @Output()\n  private onCancel = new EventEmitter()\n\n  cancel() {\n    this.spec.cancel.apply(this.spec.cancel, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this.spec.confirm, [this.formGroup.value])\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DocumentDialogSpec",
            "id": "interface-DocumentDialogSpec-1b726887da00f527c868736461927985900f5c0d0e41e9235d7a069131df31d2475002ceb0035d3ea2ba7e62eda883c8b78cb36414a347d4ecd7aba8de77923d",
            "file": "src/app/document/document-manager-page/create-document-dialog/create-document-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface DocumentDialogData {\n  name?: string\n}\n\nexport interface DocumentDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: DocumentDialogData\n  cancel: () => void\n  confirm: (data: DocumentDialogData) => void\n}\n\n\n@Component({\n  selector: 'app-create-document-dialog',\n  templateUrl: './create-document-dialog.component.html',\n  styleUrls: ['./create-document-dialog.component.scss']\n})\nexport class CreateDocumentDialogComponent implements OnChanges{\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  @Input()\n  spec: DocumentDialogSpec\n\n  @ViewChild('name') nameField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      setFocusOn(this.nameField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required)\n  })\n\n  @Output()\n  private onConfirm = new EventEmitter()\n\n  @Output()\n  private onCancel = new EventEmitter()\n\n  cancel() {\n    this.spec.cancel.apply(this.spec.cancel, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this.spec.confirm, [this.formGroup.value])\n  }\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DocumentDialogData",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"UPDATE\" | \"NEW\"",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DocumentManagerState",
            "id": "interface-DocumentManagerState-dd2feae79dc92ba85fd7d81087b5b6bf7da3c8b3afe784c449c80cbfa02d8f5695273c6e726a9e509ce601ea56c0a268ba51b9defc46ef8991fd513fdcf9a7e5",
            "file": "src/app/document/document-manager-page/document-manager.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnInit} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {StoryDocId, StoryDocSummaryDto} from \"@storydoc/models\";\nimport {StoryDocRestControllerService} from \"@storydoc/services\";\n\ninterface DocumentManagerState {\n  summaries: StoryDocSummaryDto[]\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentManagerService implements OnInit {\n\n  constructor(private storyDocRestControllerService: StoryDocRestControllerService) {\n    this.refreshDocumentList()\n  }\n\n  private store = new BehaviorSubject<DocumentManagerState>({summaries: []})\n  private state$ = this.store.asObservable()\n\n  summaries$ = this.state$.pipe(\n    map(state => state.summaries)\n  )\n\n  ngOnInit(): void {\n  }\n\n  private refreshDocumentList() {\n    this.storyDocRestControllerService.getDocumentsUsingGet().subscribe({\n      next: summaries => this.store.next({summaries})\n    })\n  }\n\n  public addDocument(name: string) {\n    this.storyDocRestControllerService.createDocumentUsingPost({name}).subscribe({\n      next: value => this.refreshDocumentList()\n    })\n  }\n\n  public renameDocument(data: { storyDocId: StoryDocId, name: string }) {\n    this.storyDocRestControllerService.changeDocumentNameUsingPut({\n      storyDocId: data.storyDocId.id,\n      name: data.name\n    }).subscribe({\n      next: (value) => this.refreshDocumentList()\n    })\n  }\n\n  public deleteDocument(storyDocId: StoryDocId) {\n    this.storyDocRestControllerService.removeDocumentUsingDelete({\n      storyDocId: storyDocId.id,\n    }).subscribe({\n      next: (value) => this.refreshDocumentList()\n    })\n\n  }\n\n}\n",
            "properties": [
                {
                    "name": "summaries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocSummaryDto[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DocumentState",
            "id": "interface-DocumentState-b9ef6b3435a6dee3b8baa0317a3ae0064619401810c159aee15f5a37c808152fdc6207042686af91d3b437bf8f72089388a5a367ecf9e61a06c192dbe613f68e",
            "file": "src/app/document/document-page/document-data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {ArtifactId, BlockDto, BlockId, StoryDocDto, StoryDocId} from \"@storydoc/models\";\nimport {CodeRestControllerService, ScreenDesignRestControllerService, StoryDocRestControllerService, TimeLineControllerService, UiRestControllerService} from \"@storydoc/services\";\n\ninterface DocumentState {\n  id?: string\n  storyDoc?: StoryDocDto\n  selectedBlock?: BlockDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentDataService {\n\n  private store = new BehaviorSubject<DocumentState>({})\n\n  storyDoc$ = this.store.asObservable().pipe(\n    map(state => state.storyDoc)\n  )\n\n  selectedBlock$ = this.store.asObservable().pipe(\n    map(state => state.selectedBlock)\n  )\n\n  private getId() {\n    return this.store.getValue()?.id;\n  }\n\n  constructor(\n    private storyDocRestControllerService: StoryDocRestControllerService,\n    private uiRestControllerService: UiRestControllerService,\n    private timeLineControllerService: TimeLineControllerService,\n    private codeRestControllerService: CodeRestControllerService,\n    private screenDesignRestControllerService : ScreenDesignRestControllerService,\n  ) {\n  }\n\n  private refresh() {\n    this.storyDocRestControllerService.getDocumentUsingGet({id: this.getId()}).subscribe({\n      next: storyDoc => this.store.next({...this.store.getValue(), storyDoc})\n    })\n  }\n\n  init(id: string) {\n    this.store.next({id, storyDoc: null})\n    this.refresh()\n  }\n\n  addBlock(name: string) {\n    this.storyDocRestControllerService.addBlockUsingPost({id: this.getId(), name}).subscribe({\n      next: value => this.refresh()\n    })\n  }\n\n  selectBlock(block: BlockDto) {\n    this.store.next({...this.store.getValue(), selectedBlock: block})\n  }\n\n  renameBlock(blockId: BlockId, name: string) {\n    this.storyDocRestControllerService.renameBlockUsingPut({\n      storyDocId: this.getId(),\n      blockId: blockId.id,\n      name\n    }).subscribe({\n      next: value => this.refresh()\n    })\n  }\n\n  deleteBlock(blockId: BlockId) {\n    this.storyDocRestControllerService.removeBlockUsingDelete({\n      storyDocId: this.getId(),\n      blockId: blockId.id\n    }).subscribe({\n      next: value => this.refresh()\n    })\n  }\n\n  addArtifact(param: { blockId: string; name: string; artifactType: string }) {\n    switch (param.artifactType) {\n      case 'io.storydoc.server.timeline.domain.TimeLineModel': {\n        this.timeLineControllerService.createTimeLineModelUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: (timeLineModelCoordinate) => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.ui.domain.screendesign.ScreenDesign': {\n        this.screenDesignRestControllerService.createScreenDesignUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: (coordinate) => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.ui.domain.UIScenario': {\n        this.uiRestControllerService.createUiScenarioUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: (uiScenarioCoordinate) => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.ui.domain.ScreenShotCollection': {\n        this.uiRestControllerService.createScreenShotCollectionUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: value => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.code.domain.CodeExecution': {\n        this.codeRestControllerService.createCodeExecutionUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: value => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.code.domain.SourceCodeConfig': {\n        this.codeRestControllerService.createSourceConfigUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: value => this.refresh()\n        })\n        break\n      }\n    }\n  }\n\n  renameArtifact(params: { blockId: BlockId; name: string; artifactId: ArtifactId; storyDocId: StoryDocId }) {\n    this.storyDocRestControllerService.renameArtifactUsingPut({\n      storyDocId: params.storyDocId.id,\n      blockId: params.blockId.id,\n      artifactId: params.artifactId.id,\n      name: params.name\n    }).subscribe({\n      next: value => this.refresh()\n    })\n  }\n\n  deleteArtifact(params: { blockId: BlockId; artifactId: ArtifactId; storyDocId: StoryDocId }) {\n    this.storyDocRestControllerService.removeArtifactUsingDelete({\n      storyDocId: params.storyDocId.id,\n      blockId: params.blockId.id,\n      artifactId: params.artifactId.id,\n    }).subscribe({\n      next: value => this.refresh()\n    })\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "selectedBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockDto",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "storyDoc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocDto",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DragRequest",
            "id": "interface-DragRequest-246b202a9a2107c5374ee24cbd86cf92d0d9f331f1025b05d1696a13bca4c8e557369c419d5d568e280fd59aa3e76a9eaf884158931580601969e2da7de6b450",
            "file": "src/app/ui/screen-design-page/canvas/canvas.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport { HostListener } from '@angular/core';\nimport {ComponentDescriptorDto, SdComponentDto, SdComponentTypeSelectionDto} from \"@storydoc/models\";\nimport {ScreenDesignService} from \"../screen-design.service\";\n\nexport interface DragRequest {\n  type: 'ADD_COMPONENT' | 'MOVE_COMPONENT'\n  add: AddComponentData\n  move:  MoveComponentData\n}\n\nexport interface AddComponentData {\n  dx: number,\n  dy: number,\n  desc: ComponentDescriptorDto\n}\n\nexport interface MoveComponentData {\n  x0: number,\n  y0: number,\n  component: SdComponentDto\n}\n\n@Component({\n  selector: 'app-canvas',\n  templateUrl: './canvas.component.html',\n  styleUrls: ['./canvas.component.scss']\n})\nexport class CanvasComponent implements OnInit {\n\n  constructor(private service: ScreenDesignService) {\n  }\n\n  @HostListener('document:keyup', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if(event.key === 'Delete'){\n      this.service.deleteSelection()\n    }\n  }\n\n  screenDesign$ = this.service.screenDesign$\n\n  selection$ = this.service.selection$\n\n  ngOnInit(): void {\n  }\n\n  allowDrop(ev: DragEvent) {\n    ev.preventDefault();\n  }\n\n  @ViewChild(\"canvasElem\") canvasElem: ElementRef\n\n  doDrop(ev: any) {\n    ev.preventDefault();\n    var data = ev.dataTransfer.getData(\"text\");\n    let request = <DragRequest>JSON.parse(data)\n\n    if (request.type==='ADD_COMPONENT') {\n      let coord =  {\n        x: ev.clientX - this.canvasElem.nativeElement.getBoundingClientRect().left - request.add.dx,\n        y: ev.clientY - this.canvasElem.nativeElement.getBoundingClientRect().top -request.add.dy\n      }\n      let componentDescriptor = request.add.desc\n      this.service.addComponent(componentDescriptor, coord)\n    }\n    else if (request.type==='MOVE_COMPONENT') {\n      let dx = request.move.x0 - ev.clientX\n      let dy = request.move.y0 - ev.clientY\n      let coord =  {\n        x: request.move.component.x - dx,\n        y: request.move.component.y - dy\n      }\n      this.service.moveComponent(request.move.component, coord)\n    }\n\n  }\n\n\n  getAttributeValue(attName: string, component: SdComponentDto): string {\n    let attribute = component.attributes.find(att => att.name===attName)\n    return attribute ? attribute.value : component.name\n  }\n\n  select(component: SdComponentDto) {\n    this.service.selectComponent(component)\n  }\n\n  isSelected(component: SdComponentDto, selection: SdComponentDto | \"NONE\") {\n    if (selection==='NONE') return false\n    return component?.id.id === selection?.id.id\n  }\n\n  style(child: SdComponentTypeSelectionDto, index: number): string {\n    let style =  'position: absolute; top:'+(child.component.y)+'px; left:'+(child.component.x) + 'px;'\n    return style\n  }\n\n  dragStart(ev: DragEvent, child: SdComponentTypeSelectionDto) {\n    let x0 = ev.clientX\n    let y0 = ev.clientY\n    ev.dataTransfer.setData(\"text\", JSON.stringify(<DragRequest>{\n      type : 'MOVE_COMPONENT',\n      move: { x0, y0, component: child.component}\n    }));\n\n  }\n\n  lassoSelect: boolean = false\n  lassoSelectBegin(event: any) {\n    if (event.target.id != 'canvas') return\n    this.lassoSelect = true\n    console.log(event)\n  }\n\n  lassoSelectStyle() : string {\n    return this.lassoSelect? \"\" : \"visibility: hidden;\"\n  }\n\n}\n",
            "properties": [
                {
                    "name": "add",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddComponentData",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "move",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MoveComponentData",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"ADD_COMPONENT\" | \"MOVE_COMPONENT\"",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FileStore",
            "id": "interface-FileStore-1d2c0d68f3503e5542753b0c5b6960fdaa1e312d1d66349f08db01fc7e0b5c3ea42d0a7a22d1f59fa29723ca391abac8b9ecbf7c02323524648a53de95fcdbe6",
            "file": "src/app/api/models/file-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FileStore {\n  blockSize?: number;\n  readOnly?: boolean;\n  totalSpace?: number;\n  unallocatedSpace?: number;\n  usableSpace?: number;\n}\n",
            "properties": [
                {
                    "name": "blockSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "totalSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "unallocatedSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "usableSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FileSystem",
            "id": "interface-FileSystem-447a1aba6f1b46b96c9b18603c6559da8d4ac69278724c7b4db8a594136e9dfea8199b7aeed32704f1446b9bcdc91beb809a392036e5659fba5fe825a5a1694d",
            "file": "src/app/api/models/file-system.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IterableFileStore } from './iterable-file-store';\nimport { IterablePath } from './iterable-path';\nimport { UserPrincipalLookupService } from './user-principal-lookup-service';\nexport interface FileSystem {\n  fileStores?: IterableFileStore;\n  open?: boolean;\n  readOnly?: boolean;\n  rootDirectories?: IterablePath;\n  separator?: string;\n  userPrincipalLookupService?: UserPrincipalLookupService;\n}\n",
            "properties": [
                {
                    "name": "fileStores",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IterableFileStore",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "rootDirectories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IterablePath",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userPrincipalLookupService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserPrincipalLookupService",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FolderDto",
            "id": "interface-FolderDto-4711066867e6c8cf99b9e0e3471213aff56f421393d58671631495a60fb78f2f1088b1c01c4b9ebdfd1a0fd3df1ed1b78f41c8aab06d0a40eef18968260dc9c9",
            "file": "src/app/api/models/folder-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FolderUrn } from './folder-urn';\nexport interface FolderDto {\n  name?: string;\n  urn?: FolderUrn;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "urn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FolderUrn",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FolderUrn",
            "id": "interface-FolderUrn-b0cefa3477c0f70a0d0cf4728ab798c20741f213bbf639e6097344eac92bfb5e4e381868f741ffc3d546cf2656aa709f21aa0f59c9fde5f73c57237aae21be15",
            "file": "src/app/api/models/folder-urn.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FolderUrn {\n  path?: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "item",
            "id": "interface-item-c8937b6ec688f9349394c5176e44461aea27e1521038db391582381db62262a3cad36583c2927a288e3ac609045ee50eea32ef85293886b9ba4f32dd1c95e431",
            "file": "src/app/ui/screen-design-page/component-tree/component-tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ScreenDesignService} from \"../screen-design.service\";\nimport {ScreenDesignDto, SdComponentDto, SdComponentId, SdContainerDto} from \"@storydoc/models\";\nimport {faBorderAll, faCube} from '@fortawesome/free-solid-svg-icons'\n\ninterface item {\n  depth: number\n  label: string\n  type: 'COMPONENT' | 'CONTAINER'\n  id: SdComponentId\n  component: SdComponentDto\n}\n\n@Component({\n  selector: 'app-component-tree',\n  templateUrl: './component-tree.component.html',\n  styleUrls: ['./component-tree.component.scss']\n})\nexport class ComponentTreeComponent implements OnInit {\n\n  constructor(private service: ScreenDesignService) { }\n\n  screenDesign$ = this.service.screenDesign$\n\n  selectedContainer$ = this.service.selectedContainer$\n\n  selection$ = this.service.selection$\n  selectedComponent : SdComponentDto\n\n  ngOnInit(): void {\n    this.screenDesign$.subscribe(screenDesign => this.refreshTree(screenDesign))\n    this.selection$.subscribe(component => {\n      if (component && component!=='NONE') {\n        this.selectedComponent = component\n      }\n    })\n  }\n\n\n  tree: item[]\n  counter: number\n\n  faBorderAll = faBorderAll\n  faCube = faCube\n\n  private refreshTree(screenDesign: ScreenDesignDto) {\n    if (!screenDesign) return\n    this.tree = []\n    this.counter = 1\n    this.recursiveAdd(screenDesign.rootContainer, 0)\n  }\n\n  private recursiveAdd(container: SdContainerDto, depth: number) {\n    this.tree.push({\n      depth,\n      label: container.label? container.label : `container ${this.counter++}`,\n      type: \"CONTAINER\",\n      id: null,\n      component: null\n    })\n    container.children.forEach( (child) => {\n      if (child.component) {\n        this.tree.push({\n          depth: depth+1,\n          label: child.component.name ? child.component.name :  `${child.component.type} ${this.counter++}`,\n          type: \"COMPONENT\",\n          id: child.component.id,\n          component: child.component\n        })\n      } else if (child.container) {\n        this.recursiveAdd(child.container, depth+1)\n      }\n    })\n  }\n\n  isSelected(treeItem: item) {\n    return treeItem && treeItem.id?.id === this.selectedComponent?.id.id\n\n  }\n\n  select(treeItem: item) {\n    this.service.selectComponent(treeItem.component)\n    this.editName(treeItem)\n  }\n\n  editing: SdComponentDto\n\n  editName(treeItem: item) {\n    this.editing = treeItem.component\n  }\n\n  isEditing(treeItem: item) {\n    return this.editing && this.editing.id.id===treeItem.id?.id\n  }\n\n}\n",
            "properties": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "depth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentId",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"COMPONENT\" | \"CONTAINER\"",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ItemDialogData",
            "id": "interface-ItemDialogData-02b28883aac3c3244cde9a01c5883dd22ce698d9228a7cfe5cbf4e8c393eb3968cf1b6ee1163de437d1258606e28fbd6e9d99c54a9b4b5f49a2371ad42c52fe1",
            "file": "src/app/ui/timeline-page/create-item-dialog/create-item-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface ItemDialogData {\n  description: string,\n  addMore: boolean\n}\n\nexport interface ItemDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: ItemDialogData\n  confirm: (ItemDialogData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-create-item-dialog',\n  templateUrl: './create-item-dialog.component.html',\n  styleUrls: ['./create-item-dialog.component.scss']\n})\nexport class CreateItemDialogComponent implements OnChanges {\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  @Input()\n  spec: ItemDialogSpec\n\n  @ViewChild('description') descriptionField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      setFocusOn(this.descriptionField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    description: new FormControl(null, Validators.required),\n    addMore: new FormControl(null)\n  })\n\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  save() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "addMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ItemDialogSpec",
            "id": "interface-ItemDialogSpec-02b28883aac3c3244cde9a01c5883dd22ce698d9228a7cfe5cbf4e8c393eb3968cf1b6ee1163de437d1258606e28fbd6e9d99c54a9b4b5f49a2371ad42c52fe1",
            "file": "src/app/ui/timeline-page/create-item-dialog/create-item-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface ItemDialogData {\n  description: string,\n  addMore: boolean\n}\n\nexport interface ItemDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: ItemDialogData\n  confirm: (ItemDialogData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-create-item-dialog',\n  templateUrl: './create-item-dialog.component.html',\n  styleUrls: ['./create-item-dialog.component.scss']\n})\nexport class CreateItemDialogComponent implements OnChanges {\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  @Input()\n  spec: ItemDialogSpec\n\n  @ViewChild('description') descriptionField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      setFocusOn(this.descriptionField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    description: new FormControl(null, Validators.required),\n    addMore: new FormControl(null)\n  })\n\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  save() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDialogData",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"UPDATE\" | \"NEW\"",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ItemDto",
            "id": "interface-ItemDto-c93199468d4e9e39606d013192ee34c8671ca82e553eeffd215fcf8dc3e7a1bbda6aa5b7866b5b91a15ccc60eb580be3105e381c0c219f8278f4ee70dfd37f3d",
            "file": "src/app/api/models/item-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ItemDto {\n  id?: string;\n  name?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IterableFileStore",
            "id": "interface-IterableFileStore-4288f93037660b28716bf942a52b6c8fe71058cbfb1738b33347503f4b2987ba071c3d699b02f102549f662bc79a6261c624eb2c0b8a76122162497a86831bf1",
            "file": "src/app/api/models/iterable-file-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IterableFileStore {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "IterablePath",
            "id": "interface-IterablePath-3c46aa4a899fea328dbed8628c3839102788a1888d7bd7f4916db4e273225c6d17371ebfe5b6427dd1be8110b9953ae53d8ebfb2ca7e1dab5ba5edbbdc52fed0",
            "file": "src/app/api/models/iterable-path.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IterablePath {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "LayeredLayout",
            "id": "interface-LayeredLayout-63ec66622046fb6bb2fb10fb563d8888fcac21fb6974a4387b1d610d454c13165c349b92cd25460cb13285661d9289236f444e1e7f0dccd1425dcaf3fd1a2693",
            "file": "src/app/api/models/layered-layout.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Layout } from './layout';\nexport interface LayeredLayout extends Layout {\n  type?: string;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Layout"
        },
        {
            "name": "Layout",
            "id": "interface-Layout-9749329b8ae6ee571b3f108f6d5f800b926f2c6a5cf59bcf5eddf455d3e0b0bb17e235efb916a5fe2928ce883e9efc4c6f053527900a3224360f5d9c26d73ed2",
            "file": "src/app/api/models/layout.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Layout {\n  type?: string;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Line",
            "id": "interface-Line-7fc3fdfec60eb0f078a9ef74d64ad841f3589ad740b36ab9f8d9668ef89053a6d77f8b83b3997ab045c67e90cf9718825aabbab582f6b09a99e306a4b8bed570",
            "file": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Inject, Input, OnInit} from '@angular/core'\nimport {DOCUMENT} from \"@angular/common\"\n\ndeclare var LeaderLine: any\n\nexport interface BluePrintElem {\n  type: string\n  name: string\n}\n\nexport interface CompositeBluePrintElem extends BluePrintElem {\n  subElements: BluePrintElem[]\n}\n\nexport interface BluePrint extends CompositeBluePrintElem {\n  type: \"BluePrint\"\n}\n\nexport interface MethodElem {\n  id: string\n  methodName: string\n  active: boolean\n}\n\nexport interface ClassElem extends BluePrintElem {\n  type: \"ClassElem\"\n  role: string\n  className: string\n  methods: MethodElem[]\n}\n\nexport interface Line {\n  idFrom: string\n  idTo: string\n}\n\n@Component({\n  selector: 'app-diagram-example',\n  templateUrl: './diagram-example.component.html',\n  styleUrls: ['./diagram-example.component.scss']\n})\nexport class DiagramExampleComponent implements OnInit {\n\n  @Input()\n  diagram: BluePrint\n\n  @Input()\n  lines: Line[]\n\n  constructor(@Inject(DOCUMENT) private document) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  leaderLines: any[] = new Array()\n\n  ngAfterViewInit() {\n    console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n    this.lines.forEach(line => {\n      this.leaderLines.push(new LeaderLine(\n        this.document.getElementById(line.idFrom),\n        this.document.getElementById(line.idTo),\n        {\n          path: 'arc',\n          color: 'red',\n          size: 4,\n          //endPlug: 'arrow3'\n        }\n      ))\n    })\n  }\n\n  ngOnDestroy() {\n    if (this.leaderLines) {\n      console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n      for (var leaderLine of this.leaderLines) {\n        console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n        console.log(\"typeof this.leaderLine\", typeof leaderLine)\n        //leaderLine.remove()\n      }\n      this.leaderLines = []\n    }\n  }\n\n}\n\n",
            "properties": [
                {
                    "name": "idFrom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "idTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MethodElem",
            "id": "interface-MethodElem-7fc3fdfec60eb0f078a9ef74d64ad841f3589ad740b36ab9f8d9668ef89053a6d77f8b83b3997ab045c67e90cf9718825aabbab582f6b09a99e306a4b8bed570",
            "file": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Inject, Input, OnInit} from '@angular/core'\nimport {DOCUMENT} from \"@angular/common\"\n\ndeclare var LeaderLine: any\n\nexport interface BluePrintElem {\n  type: string\n  name: string\n}\n\nexport interface CompositeBluePrintElem extends BluePrintElem {\n  subElements: BluePrintElem[]\n}\n\nexport interface BluePrint extends CompositeBluePrintElem {\n  type: \"BluePrint\"\n}\n\nexport interface MethodElem {\n  id: string\n  methodName: string\n  active: boolean\n}\n\nexport interface ClassElem extends BluePrintElem {\n  type: \"ClassElem\"\n  role: string\n  className: string\n  methods: MethodElem[]\n}\n\nexport interface Line {\n  idFrom: string\n  idTo: string\n}\n\n@Component({\n  selector: 'app-diagram-example',\n  templateUrl: './diagram-example.component.html',\n  styleUrls: ['./diagram-example.component.scss']\n})\nexport class DiagramExampleComponent implements OnInit {\n\n  @Input()\n  diagram: BluePrint\n\n  @Input()\n  lines: Line[]\n\n  constructor(@Inject(DOCUMENT) private document) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  leaderLines: any[] = new Array()\n\n  ngAfterViewInit() {\n    console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n    this.lines.forEach(line => {\n      this.leaderLines.push(new LeaderLine(\n        this.document.getElementById(line.idFrom),\n        this.document.getElementById(line.idTo),\n        {\n          path: 'arc',\n          color: 'red',\n          size: 4,\n          //endPlug: 'arrow3'\n        }\n      ))\n    })\n  }\n\n  ngOnDestroy() {\n    if (this.leaderLines) {\n      console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n      for (var leaderLine of this.leaderLines) {\n        console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n        console.log(\"typeof this.leaderLine\", typeof leaderLine)\n        //leaderLine.remove()\n      }\n      this.leaderLines = []\n    }\n  }\n\n}\n\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "methodName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MoveComponentData",
            "id": "interface-MoveComponentData-246b202a9a2107c5374ee24cbd86cf92d0d9f331f1025b05d1696a13bca4c8e557369c419d5d568e280fd59aa3e76a9eaf884158931580601969e2da7de6b450",
            "file": "src/app/ui/screen-design-page/canvas/canvas.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport { HostListener } from '@angular/core';\nimport {ComponentDescriptorDto, SdComponentDto, SdComponentTypeSelectionDto} from \"@storydoc/models\";\nimport {ScreenDesignService} from \"../screen-design.service\";\n\nexport interface DragRequest {\n  type: 'ADD_COMPONENT' | 'MOVE_COMPONENT'\n  add: AddComponentData\n  move:  MoveComponentData\n}\n\nexport interface AddComponentData {\n  dx: number,\n  dy: number,\n  desc: ComponentDescriptorDto\n}\n\nexport interface MoveComponentData {\n  x0: number,\n  y0: number,\n  component: SdComponentDto\n}\n\n@Component({\n  selector: 'app-canvas',\n  templateUrl: './canvas.component.html',\n  styleUrls: ['./canvas.component.scss']\n})\nexport class CanvasComponent implements OnInit {\n\n  constructor(private service: ScreenDesignService) {\n  }\n\n  @HostListener('document:keyup', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if(event.key === 'Delete'){\n      this.service.deleteSelection()\n    }\n  }\n\n  screenDesign$ = this.service.screenDesign$\n\n  selection$ = this.service.selection$\n\n  ngOnInit(): void {\n  }\n\n  allowDrop(ev: DragEvent) {\n    ev.preventDefault();\n  }\n\n  @ViewChild(\"canvasElem\") canvasElem: ElementRef\n\n  doDrop(ev: any) {\n    ev.preventDefault();\n    var data = ev.dataTransfer.getData(\"text\");\n    let request = <DragRequest>JSON.parse(data)\n\n    if (request.type==='ADD_COMPONENT') {\n      let coord =  {\n        x: ev.clientX - this.canvasElem.nativeElement.getBoundingClientRect().left - request.add.dx,\n        y: ev.clientY - this.canvasElem.nativeElement.getBoundingClientRect().top -request.add.dy\n      }\n      let componentDescriptor = request.add.desc\n      this.service.addComponent(componentDescriptor, coord)\n    }\n    else if (request.type==='MOVE_COMPONENT') {\n      let dx = request.move.x0 - ev.clientX\n      let dy = request.move.y0 - ev.clientY\n      let coord =  {\n        x: request.move.component.x - dx,\n        y: request.move.component.y - dy\n      }\n      this.service.moveComponent(request.move.component, coord)\n    }\n\n  }\n\n\n  getAttributeValue(attName: string, component: SdComponentDto): string {\n    let attribute = component.attributes.find(att => att.name===attName)\n    return attribute ? attribute.value : component.name\n  }\n\n  select(component: SdComponentDto) {\n    this.service.selectComponent(component)\n  }\n\n  isSelected(component: SdComponentDto, selection: SdComponentDto | \"NONE\") {\n    if (selection==='NONE') return false\n    return component?.id.id === selection?.id.id\n  }\n\n  style(child: SdComponentTypeSelectionDto, index: number): string {\n    let style =  'position: absolute; top:'+(child.component.y)+'px; left:'+(child.component.x) + 'px;'\n    return style\n  }\n\n  dragStart(ev: DragEvent, child: SdComponentTypeSelectionDto) {\n    let x0 = ev.clientX\n    let y0 = ev.clientY\n    ev.dataTransfer.setData(\"text\", JSON.stringify(<DragRequest>{\n      type : 'MOVE_COMPONENT',\n      move: { x0, y0, component: child.component}\n    }));\n\n  }\n\n  lassoSelect: boolean = false\n  lassoSelectBegin(event: any) {\n    if (event.target.id != 'canvas') return\n    this.lassoSelect = true\n    console.log(event)\n  }\n\n  lassoSelectStyle() : string {\n    return this.lassoSelect? \"\" : \"visibility: hidden;\"\n  }\n\n}\n",
            "properties": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "x0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "y0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NavigationItemDto",
            "id": "interface-NavigationItemDto-41543e19ddd753904a8d00d286635131463c67e62b98f95ccebec15529df759ac7e29689e3d80b13b538fe9f8858d578b0b0eaf924c9df95cb97751fa3a34671",
            "file": "src/app/api/models/navigation-item-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NavigationItemDto {\n  query?: string;\n  rootItem?: boolean;\n  table?: string;\n}\n",
            "properties": [
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "rootItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NavigationModelDto",
            "id": "interface-NavigationModelDto-217d195b2e51046f61d6e1306ea66e870a9e8f7c2fc9a8b0e03713a880b8275bd31c40bfb2e12c7dbd6c02c40d084bd28313f805d11371f6f0e1c8027eea2e7e",
            "file": "src/app/api/models/navigation-model-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NavigationItemDto } from './navigation-item-dto';\nexport interface NavigationModelDto {\n  items?: Array<NavigationItemDto>;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<NavigationItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ParameterOptions",
            "id": "interface-ParameterOptions-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "properties": [
                {
                    "name": "explode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Defines the options for appending a parameter</p>\n",
            "rawdescription": "\n\nDefines the options for appending a parameter\n",
            "methods": []
        },
        {
            "name": "Path",
            "id": "interface-Path-71bddba6df3c6cf7cb0e96343a61c9338c8d0bd0bc0ffd1b2744a01611466b63ba3b6c6749fc6ef876f6d7c2ab6cc335b924dbbe47cac3409d73b0e308cdfe99",
            "file": "src/app/api/models/path.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FileSystem } from './file-system';\nexport interface Path {\n  absolute?: boolean;\n  fileName?: Path;\n  fileSystem?: FileSystem;\n  nameCount?: number;\n  parent?: Path;\n  root?: Path;\n}\n",
            "properties": [
                {
                    "name": "absolute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fileSystem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileSystem",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "nameCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PopupMenuItemSpec",
            "id": "interface-PopupMenuItemSpec-0ed2a066939d050c3817abdaa5224e1550abfc0e1e39053eafafcfdc32891f5f99dc3539479d24da9479d665fdc02464183e284e09222363516fefb06a72513e",
            "file": "src/app/common/popup-menu/popup-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, HostBinding, HostListener, Input, OnInit} from '@angular/core';\n\n// based on https://mobiarch.wordpress.com/2018/07/07/create-a-popup-menu-in-angular/\n\nexport interface PopupMenuItemSpec {\n  label: string\n  onClick: () => void\n}\n\n@Component({\n  selector: 'app-popup-menu',\n  templateUrl: './popup-menu.component.html',\n  styleUrls: ['./popup-menu.component.scss']\n})\nexport class PopupMenuComponent implements OnInit {\n  @HostBinding(\"style.top\") y = \"0px\"\n  @HostBinding(\"style.left\") x = \"0px\"\n  @HostBinding(\"style.visibility\") visibility = \"hidden\"\n  @Input() @HostBinding(\"style.width\") width = \"200px\"\n\n  constructor() {\n  }\n\n  items: PopupMenuItemSpec[]\n\n  ngOnInit() {\n  }\n\n  open(e: MouseEvent) {\n    this.x = `${e.pageX}px`\n    this.y = `${e.pageY}px`\n\n    this.visibility = \"visible\"\n\n    e.stopPropagation()\n  }\n\n  close() {\n    this.visibility = \"hidden\"\n  }\n\n  @HostListener('document:click')\n  public onDocumentClick() {\n    if (this.visibility === \"visible\") {\n      this.close()\n    }\n  }\n\n  onClick(item: PopupMenuItemSpec) {\n    item.onClick.apply(this, [])\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PresentationState",
            "id": "interface-PresentationState-5e0dbeedcf3ed534fb0cfdd1abbaccb241c56c80f41d13c05168b1b1c80a64a84862fbfe4a5e251b6a7c990a01e9694f97b39f674e02d14015cdb66b1282de8f",
            "file": "src/app/ui/uiscenario-page/uiscenario.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Observable, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {\n  BlockCoordinate,\n  BlockId, ScreenshotCollectionCoordinate, ScreenShotCollectionDto, ScreenshotCollectionSummaryDto,\n  ScreenshotCoordinate,\n  StoryDocId, TimeLineDto,\n  TimeLineId,\n  TimeLineItemId,\n  TimeLineModelCoordinate,\n  TimeLineModelDto,\n  TimeLineModelId,\n  TimeLineModelSummaryDto,\n  UiScenarioCoordinate,\n  UiScenarioDto\n} from \"@storydoc/models\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {TimeLineControllerService, UiRestControllerService} from \"@storydoc/services\";\n\ninterface PresentationState {\n  presentationMode: boolean\n}\n\ninterface ScenarioPanelState {\n  uiScenarioCoord?: UiScenarioCoordinate,\n  uiScenarioDto?: UiScenarioDto,\n  timeLineModel?: TimeLineModelDto\n  timeLineId?: TimeLineId,\n  timeLine? : TimeLineDto\n}\n\ninterface ScreenshotSelectionPanelState {\n  screenshotCollections?: ScreenshotCollectionSummaryDto[]\n  screenshotCollectionCoord?: ScreenshotCollectionCoordinate\n  screenshotCollection?: ScreenShotCollectionDto\n}\n\ninterface ConfigPanelState {\n  timeLineModels?: TimeLineModelSummaryDto[]\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UIScenarioService implements OnDestroy {\n\n  constructor(\n    private uiRestControllerService: UiRestControllerService,\n    private timeLineControllerService: TimeLineControllerService\n  ) {\n    this.init()\n  }\n\n  // UIScenario, Timeline selection\n\n  private scenarioStore = new BehaviorSubject<ScenarioPanelState>({})\n  state$ = this.scenarioStore.asObservable()\n\n  uiScenario$ = this.state$.pipe(\n    map(state => state.uiScenarioDto),\n    distinctUntilChanged(),\n  )\n\n  timeLineModel$ = this.state$.pipe(\n    map(state => state.timeLineModel),\n    distinctUntilChanged(),\n  )\n\n  timeLineId$ = this.state$.pipe(\n    map(state => state.timeLineId),\n    distinctUntilChanged(),\n  )\n\n  timeLine$ = this.state$.pipe(\n    map(state => state.timeLine),\n    distinctUntilChanged(),\n  )\n\n  // ScreenshotSelection\n\n  screenshotStore = new BehaviorSubject<ScreenshotSelectionPanelState>({})\n\n  screenshotCollections$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollections),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollectionCoord$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollectionCoord),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollection$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollection),\n    distinctUntilChanged(),\n  )\n\n  // Config panel\n\n  private configStore = new BehaviorSubject<ConfigPanelState>({})\n  timeLineModels$ = this.configStore.pipe(\n    map(store => store.timeLineModels),\n    distinctUntilChanged()\n  )\n\n  private get uiScenario(): UiScenarioDto {\n    return this.scenarioStore.getValue()?.uiScenarioDto\n  }\n\n  private get uiScenarioCoord(): UiScenarioCoordinate {\n    return this.scenarioStore.getValue()?.uiScenarioCoord\n  }\n\n  private get timeLineModel(): TimeLineModelDto {\n    return this.scenarioStore.getValue()?.timeLineModel\n  }\n\n  // Presentation state\n\n  private presentationStore = new BehaviorSubject<PresentationState>({presentationMode: false})\n\n  presentationMode$ = this.presentationStore.pipe(\n    map(store => store.presentationMode),\n    distinctUntilChanged()\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('ScenarioStore$ >>', this.scenarioStore))\n    this.subscriptions.push(logChangesToObservable('ConfigStore$ >> ', this.configStore))\n    this.subscriptions.push(logChangesToObservable('TimeLineId$ >>', this.timeLineId$))\n    this.subscriptions.push(logChangesToObservable('timeLine$ >> ', this.timeLine$))\n    this.subscriptions.push(this.loadTimeLineModelFromUIScenario())\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadUIScenario(params: { storyDocId: StoryDocId, blockId: BlockId, uiScenarioId: string }) {\n    log(\"loadUIScenario(params)\", params)\n    this.screenshotStore.next({})\n    this.configStore.next({})\n    this.scenarioStore.next({\n      uiScenarioCoord: {\n        blockCoordinate: {\n          storyDocId: params.storyDocId,\n          blockId: params.blockId\n        },\n        uiScenarioId: {id: params.uiScenarioId}\n      }\n    })\n    this.reloadScenario()\n  }\n\n  public selectTimeLineModel(timeLineModelCoordinate: TimeLineModelCoordinate) {\n    log(\"selectTimeLineModel(coord)\", timeLineModelCoordinate)\n    this.uiRestControllerService.setUiScenarioTimeLineModelUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      timeLineModelStoryDocId: timeLineModelCoordinate.blockCoordinate.storyDocId.id,\n      timeLineModelBlockId: timeLineModelCoordinate.blockCoordinate.blockId.id,\n      timeLineModelId: timeLineModelCoordinate.timeLineModelId.id,\n    }).subscribe({\n      next: value => {\n        this.reloadScenario()\n      }\n    })\n  }\n\n  public setScenarioTimeLine(timeLineId: TimeLineId) {\n    log('setScenarioTimeLine(timeLineId)', timeLineId)\n    this.scenarioStore.next({\n      ... this.scenarioStore.value,\n      timeLineId,\n      timeLine: this.timeLineById(this.timeLineModel, timeLineId)\n    })\n  }\n\n  private timeLineById(timeLineModel: TimeLineModelDto, timeLineId: TimeLineId): TimeLineDto {\n    return this.timelinesAsArray(timeLineModel.timeLines).find(timeLine => timeLine.timeLineId.id === timeLineId.id)\n  }\n\n  private timelinesAsArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  public selectScreenshotCollection(coord: ScreenshotCollectionCoordinate) {\n    log('selectScreenshotCollection(coord)', coord)\n    this.uiRestControllerService.getScreenShotCollectionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      id: coord.screenShotCollectionId.id\n    }).subscribe(collectionDto => {\n      this.screenshotStore.next({\n        ... this.screenshotStore.getValue(),\n        screenshotCollectionCoord: coord,\n        screenshotCollection: collectionDto\n      })\n    })\n  }\n\n  public addScreenshotToScenario(screenshotCoordinate: ScreenshotCoordinate, timeLineItemId: TimeLineItemId) {\n    log('addScreenshotToScenario(screenshotCoordinate, timeLineItemId)', screenshotCoordinate, timeLineItemId)\n    this.uiRestControllerService.addScreenshotToUiScenarioUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      screenshotStoryDocId: screenshotCoordinate.collectionCoordinate.blockCoordinate.storyDocId.id,\n      screenshotBlockId: screenshotCoordinate.collectionCoordinate.blockCoordinate.blockId.id,\n      screenshotCollectionId: screenshotCoordinate.collectionCoordinate.screenShotCollectionId.id,\n      screenshotId: screenshotCoordinate.screenShotId.id,\n      timeLineItemId: timeLineItemId.id\n    }).subscribe({\n      next: (value => this.reloadScenario())\n    })\n  }\n\n  private reloadScenario() {\n    log('reloadScenario()')\n    this.uiRestControllerService.getUiScenarioUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      id: this.uiScenarioCoord.uiScenarioId.id\n    }).subscribe({\n      next: uiScenarioDto => {\n        this.scenarioStore.next({\n          ...this.scenarioStore.getValue(),\n          uiScenarioDto: uiScenarioDto,\n        })\n        this.screenshotStore.next({\n          ... this.screenshotStore.getValue(),\n          screenshotCollections: uiScenarioDto.associatedCollections\n        })\n      }\n    })\n  }\n\n  private loadTimeLineModelFromUIScenario(): Subscription {\n    return this.uiScenario$.subscribe({\n      next: uiScenario => {\n        log('uiScenario$-->refreshTimeLineModelWhenScenarioUpdates()')\n        if (!this.equalTimeLineModelCoord(this.timeLineModel?.timeLineModelCoordinate, uiScenario?.timeLineModelCoordinate)) {\n          this.loadTimeLineModel(uiScenario.timeLineModelCoordinate)\n        }\n      }\n    })\n  }\n\n  private loadTimeLineModel(coord: TimeLineModelCoordinate) {\n    log('reloadTimeLineModel(coord)', coord)\n    this.timeLineControllerService.getTimeLineModelUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      timeLineModelId: coord.timeLineModelId.id\n    }).subscribe({\n      next: (dto) => {\n        let nextValue = <ScenarioPanelState>{\n          ...this.scenarioStore.getValue(),\n          timeLineModel: dto,\n        }\n        this.scenarioStore.next(nextValue)\n        let defaultId = this.defaultTimeline(dto)?.timeLineId\n        if (!nextValue.timeLineId && (defaultId)) {\n          this.setScenarioTimeLine(defaultId)\n        }\n      }\n    })\n  }\n\n  private equalTimeLineCoord(tlmCoord1: TimeLineModelCoordinate, tlId1: TimeLineId, tlmCoord2: TimeLineModelCoordinate, tlId2: TimeLineId) {\n    return this.equalTimeLineModelCoord(tlmCoord1, tlmCoord2) && this.equalTimeLineId(tlId1, tlId2)\n  }\n\n  private equalTimeLineModelCoord(coord1: TimeLineModelCoordinate, coord2: TimeLineModelCoordinate): boolean {\n    return this.equalTimeLineModelId(coord1?.timeLineModelId, coord2?.timeLineModelId) && this.equalBlockCoordinate(coord1?.blockCoordinate, coord2?.blockCoordinate)\n  }\n\n  private equalTimeLineId(id1: TimeLineId, id2: TimeLineId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalTimeLineModelId(id1: TimeLineModelId, id2: TimeLineModelId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalBlockCoordinate(coord1: BlockCoordinate, coord2: BlockCoordinate): boolean {\n    return coord1?.storyDocId.id === coord2?.storyDocId.id && coord1?.blockId.id === coord2?.blockId.id;\n  }\n\n\n  public loadAssociatedTimeLineModels() {\n    log('loadAssociatedTimeLineModels()')\n    let uiScenario = this.uiScenario\n    this.timeLineControllerService.getTimeLineModelSummariesUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id\n    }).subscribe({\n      next: summaries => this.configStore.next({timeLineModels: summaries})\n    })\n  }\n\n  private defaultTimeline(dto: TimeLineModelDto) {\n    return this.asArray(dto.timeLines).find((timeLine)=> timeLine.name==='default');\n  }\n\n  private asArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  // presentation mode\n\n  togglePresentationMode() {\n    this.presentationStore.next({ presentationMode: !this.presentationStore.getValue().presentationMode })\n  }\n\n  selectFirst() {\n\n  }\n\n  selectPrevious() {\n\n  }\n\n  selectNext() {\n\n  }\n\n  selectLast() {\n\n  }\n}\n",
            "properties": [
                {
                    "name": "presentationMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ResourceUrn",
            "id": "interface-ResourceUrn-e3faf8a9b9c201b2107ef0e9ca05afd70bf6739a54292a84712a4518ce00fad756512b97ce567d8bdfd6a0097ca81e587d29f4e0234058ffce38438d1617dd4a",
            "file": "src/app/api/models/resource-urn.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FolderUrn } from './folder-urn';\nexport interface ResourceUrn {\n  fileName?: string;\n  folder?: FolderUrn;\n}\n",
            "properties": [
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "folder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FolderUrn",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Role",
            "id": "interface-Role-52597fe7682f54bdf72452d827639873b392f329a9eb3073076ffee13749ca6e47e3b6ed31c1b7923b64715d4a340190f74455aaf130e08ca6689af6bf5d04ef",
            "file": "src/app/api/models/role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BluePrintElement } from './blue-print-element';\nexport interface Role extends BluePrintElement {\n  name?: string;\n  type?: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "BluePrintElement"
        },
        {
            "name": "ScenarioConfigDialogData",
            "id": "interface-ScenarioConfigDialogData-18c24b1f5a3b97683657e7ba2123373308fecee8387787e2d5b7dd1c124650a18e84925f8bceae2f7645752ea07fc406595655341c9bf2d3495de2859ccf465b",
            "file": "src/app/ui/uiscenario-page/scenario-config-dialog/scenario-config-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {UIScenarioService} from \"../uiscenario.service\";\nimport {TimeLineModelCoordinate, TimeLineModelSummaryDto} from \"@storydoc/models\";\n\nexport interface ScenarioConfigDialogData  {\n  timeLineModel: TimeLineModelCoordinate\n}\n\nexport interface ScenarioConfigDialogSpec  {\n  data: ScenarioConfigDialogData\n  confirm: (data: ScenarioConfigDialogData)=> void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-scenario-config-dialog',\n  templateUrl: './scenario-config-dialog.component.html',\n  styleUrls: ['./scenario-config-dialog.component.scss']\n})\nexport class ScenarioConfigDialogComponent implements OnInit {\n\n  constructor(private service: UIScenarioService) { }\n\n  timeLineModels$ = this.service.timeLineModels$\n\n  @Input()\n  spec: ScenarioConfigDialogSpec\n\n\n  ngOnInit(): void {\n    this.service.loadAssociatedTimeLineModels()\n  }\n\n  formGroup: FormGroup = new FormGroup({\n      timeLineModel : new FormControl(null, [Validators.required])\n  })\n\n  compareTimeLineModel(s1: TimeLineModelSummaryDto, s2: TimeLineModelSummaryDto): boolean {\n    return s1?.timeLineModelCoordinate?.timeLineModelId.id === s2?.timeLineModelCoordinate?.timeLineModelId.id\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n}\n",
            "properties": [
                {
                    "name": "timeLineModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineModelCoordinate",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScenarioConfigDialogSpec",
            "id": "interface-ScenarioConfigDialogSpec-18c24b1f5a3b97683657e7ba2123373308fecee8387787e2d5b7dd1c124650a18e84925f8bceae2f7645752ea07fc406595655341c9bf2d3495de2859ccf465b",
            "file": "src/app/ui/uiscenario-page/scenario-config-dialog/scenario-config-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {UIScenarioService} from \"../uiscenario.service\";\nimport {TimeLineModelCoordinate, TimeLineModelSummaryDto} from \"@storydoc/models\";\n\nexport interface ScenarioConfigDialogData  {\n  timeLineModel: TimeLineModelCoordinate\n}\n\nexport interface ScenarioConfigDialogSpec  {\n  data: ScenarioConfigDialogData\n  confirm: (data: ScenarioConfigDialogData)=> void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-scenario-config-dialog',\n  templateUrl: './scenario-config-dialog.component.html',\n  styleUrls: ['./scenario-config-dialog.component.scss']\n})\nexport class ScenarioConfigDialogComponent implements OnInit {\n\n  constructor(private service: UIScenarioService) { }\n\n  timeLineModels$ = this.service.timeLineModels$\n\n  @Input()\n  spec: ScenarioConfigDialogSpec\n\n\n  ngOnInit(): void {\n    this.service.loadAssociatedTimeLineModels()\n  }\n\n  formGroup: FormGroup = new FormGroup({\n      timeLineModel : new FormControl(null, [Validators.required])\n  })\n\n  compareTimeLineModel(s1: TimeLineModelSummaryDto, s2: TimeLineModelSummaryDto): boolean {\n    return s1?.timeLineModelCoordinate?.timeLineModelId.id === s2?.timeLineModelCoordinate?.timeLineModelId.id\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioConfigDialogData",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScenarioPanelState",
            "id": "interface-ScenarioPanelState-5e0dbeedcf3ed534fb0cfdd1abbaccb241c56c80f41d13c05168b1b1c80a64a84862fbfe4a5e251b6a7c990a01e9694f97b39f674e02d14015cdb66b1282de8f",
            "file": "src/app/ui/uiscenario-page/uiscenario.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Observable, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {\n  BlockCoordinate,\n  BlockId, ScreenshotCollectionCoordinate, ScreenShotCollectionDto, ScreenshotCollectionSummaryDto,\n  ScreenshotCoordinate,\n  StoryDocId, TimeLineDto,\n  TimeLineId,\n  TimeLineItemId,\n  TimeLineModelCoordinate,\n  TimeLineModelDto,\n  TimeLineModelId,\n  TimeLineModelSummaryDto,\n  UiScenarioCoordinate,\n  UiScenarioDto\n} from \"@storydoc/models\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {TimeLineControllerService, UiRestControllerService} from \"@storydoc/services\";\n\ninterface PresentationState {\n  presentationMode: boolean\n}\n\ninterface ScenarioPanelState {\n  uiScenarioCoord?: UiScenarioCoordinate,\n  uiScenarioDto?: UiScenarioDto,\n  timeLineModel?: TimeLineModelDto\n  timeLineId?: TimeLineId,\n  timeLine? : TimeLineDto\n}\n\ninterface ScreenshotSelectionPanelState {\n  screenshotCollections?: ScreenshotCollectionSummaryDto[]\n  screenshotCollectionCoord?: ScreenshotCollectionCoordinate\n  screenshotCollection?: ScreenShotCollectionDto\n}\n\ninterface ConfigPanelState {\n  timeLineModels?: TimeLineModelSummaryDto[]\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UIScenarioService implements OnDestroy {\n\n  constructor(\n    private uiRestControllerService: UiRestControllerService,\n    private timeLineControllerService: TimeLineControllerService\n  ) {\n    this.init()\n  }\n\n  // UIScenario, Timeline selection\n\n  private scenarioStore = new BehaviorSubject<ScenarioPanelState>({})\n  state$ = this.scenarioStore.asObservable()\n\n  uiScenario$ = this.state$.pipe(\n    map(state => state.uiScenarioDto),\n    distinctUntilChanged(),\n  )\n\n  timeLineModel$ = this.state$.pipe(\n    map(state => state.timeLineModel),\n    distinctUntilChanged(),\n  )\n\n  timeLineId$ = this.state$.pipe(\n    map(state => state.timeLineId),\n    distinctUntilChanged(),\n  )\n\n  timeLine$ = this.state$.pipe(\n    map(state => state.timeLine),\n    distinctUntilChanged(),\n  )\n\n  // ScreenshotSelection\n\n  screenshotStore = new BehaviorSubject<ScreenshotSelectionPanelState>({})\n\n  screenshotCollections$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollections),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollectionCoord$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollectionCoord),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollection$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollection),\n    distinctUntilChanged(),\n  )\n\n  // Config panel\n\n  private configStore = new BehaviorSubject<ConfigPanelState>({})\n  timeLineModels$ = this.configStore.pipe(\n    map(store => store.timeLineModels),\n    distinctUntilChanged()\n  )\n\n  private get uiScenario(): UiScenarioDto {\n    return this.scenarioStore.getValue()?.uiScenarioDto\n  }\n\n  private get uiScenarioCoord(): UiScenarioCoordinate {\n    return this.scenarioStore.getValue()?.uiScenarioCoord\n  }\n\n  private get timeLineModel(): TimeLineModelDto {\n    return this.scenarioStore.getValue()?.timeLineModel\n  }\n\n  // Presentation state\n\n  private presentationStore = new BehaviorSubject<PresentationState>({presentationMode: false})\n\n  presentationMode$ = this.presentationStore.pipe(\n    map(store => store.presentationMode),\n    distinctUntilChanged()\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('ScenarioStore$ >>', this.scenarioStore))\n    this.subscriptions.push(logChangesToObservable('ConfigStore$ >> ', this.configStore))\n    this.subscriptions.push(logChangesToObservable('TimeLineId$ >>', this.timeLineId$))\n    this.subscriptions.push(logChangesToObservable('timeLine$ >> ', this.timeLine$))\n    this.subscriptions.push(this.loadTimeLineModelFromUIScenario())\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadUIScenario(params: { storyDocId: StoryDocId, blockId: BlockId, uiScenarioId: string }) {\n    log(\"loadUIScenario(params)\", params)\n    this.screenshotStore.next({})\n    this.configStore.next({})\n    this.scenarioStore.next({\n      uiScenarioCoord: {\n        blockCoordinate: {\n          storyDocId: params.storyDocId,\n          blockId: params.blockId\n        },\n        uiScenarioId: {id: params.uiScenarioId}\n      }\n    })\n    this.reloadScenario()\n  }\n\n  public selectTimeLineModel(timeLineModelCoordinate: TimeLineModelCoordinate) {\n    log(\"selectTimeLineModel(coord)\", timeLineModelCoordinate)\n    this.uiRestControllerService.setUiScenarioTimeLineModelUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      timeLineModelStoryDocId: timeLineModelCoordinate.blockCoordinate.storyDocId.id,\n      timeLineModelBlockId: timeLineModelCoordinate.blockCoordinate.blockId.id,\n      timeLineModelId: timeLineModelCoordinate.timeLineModelId.id,\n    }).subscribe({\n      next: value => {\n        this.reloadScenario()\n      }\n    })\n  }\n\n  public setScenarioTimeLine(timeLineId: TimeLineId) {\n    log('setScenarioTimeLine(timeLineId)', timeLineId)\n    this.scenarioStore.next({\n      ... this.scenarioStore.value,\n      timeLineId,\n      timeLine: this.timeLineById(this.timeLineModel, timeLineId)\n    })\n  }\n\n  private timeLineById(timeLineModel: TimeLineModelDto, timeLineId: TimeLineId): TimeLineDto {\n    return this.timelinesAsArray(timeLineModel.timeLines).find(timeLine => timeLine.timeLineId.id === timeLineId.id)\n  }\n\n  private timelinesAsArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  public selectScreenshotCollection(coord: ScreenshotCollectionCoordinate) {\n    log('selectScreenshotCollection(coord)', coord)\n    this.uiRestControllerService.getScreenShotCollectionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      id: coord.screenShotCollectionId.id\n    }).subscribe(collectionDto => {\n      this.screenshotStore.next({\n        ... this.screenshotStore.getValue(),\n        screenshotCollectionCoord: coord,\n        screenshotCollection: collectionDto\n      })\n    })\n  }\n\n  public addScreenshotToScenario(screenshotCoordinate: ScreenshotCoordinate, timeLineItemId: TimeLineItemId) {\n    log('addScreenshotToScenario(screenshotCoordinate, timeLineItemId)', screenshotCoordinate, timeLineItemId)\n    this.uiRestControllerService.addScreenshotToUiScenarioUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      screenshotStoryDocId: screenshotCoordinate.collectionCoordinate.blockCoordinate.storyDocId.id,\n      screenshotBlockId: screenshotCoordinate.collectionCoordinate.blockCoordinate.blockId.id,\n      screenshotCollectionId: screenshotCoordinate.collectionCoordinate.screenShotCollectionId.id,\n      screenshotId: screenshotCoordinate.screenShotId.id,\n      timeLineItemId: timeLineItemId.id\n    }).subscribe({\n      next: (value => this.reloadScenario())\n    })\n  }\n\n  private reloadScenario() {\n    log('reloadScenario()')\n    this.uiRestControllerService.getUiScenarioUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      id: this.uiScenarioCoord.uiScenarioId.id\n    }).subscribe({\n      next: uiScenarioDto => {\n        this.scenarioStore.next({\n          ...this.scenarioStore.getValue(),\n          uiScenarioDto: uiScenarioDto,\n        })\n        this.screenshotStore.next({\n          ... this.screenshotStore.getValue(),\n          screenshotCollections: uiScenarioDto.associatedCollections\n        })\n      }\n    })\n  }\n\n  private loadTimeLineModelFromUIScenario(): Subscription {\n    return this.uiScenario$.subscribe({\n      next: uiScenario => {\n        log('uiScenario$-->refreshTimeLineModelWhenScenarioUpdates()')\n        if (!this.equalTimeLineModelCoord(this.timeLineModel?.timeLineModelCoordinate, uiScenario?.timeLineModelCoordinate)) {\n          this.loadTimeLineModel(uiScenario.timeLineModelCoordinate)\n        }\n      }\n    })\n  }\n\n  private loadTimeLineModel(coord: TimeLineModelCoordinate) {\n    log('reloadTimeLineModel(coord)', coord)\n    this.timeLineControllerService.getTimeLineModelUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      timeLineModelId: coord.timeLineModelId.id\n    }).subscribe({\n      next: (dto) => {\n        let nextValue = <ScenarioPanelState>{\n          ...this.scenarioStore.getValue(),\n          timeLineModel: dto,\n        }\n        this.scenarioStore.next(nextValue)\n        let defaultId = this.defaultTimeline(dto)?.timeLineId\n        if (!nextValue.timeLineId && (defaultId)) {\n          this.setScenarioTimeLine(defaultId)\n        }\n      }\n    })\n  }\n\n  private equalTimeLineCoord(tlmCoord1: TimeLineModelCoordinate, tlId1: TimeLineId, tlmCoord2: TimeLineModelCoordinate, tlId2: TimeLineId) {\n    return this.equalTimeLineModelCoord(tlmCoord1, tlmCoord2) && this.equalTimeLineId(tlId1, tlId2)\n  }\n\n  private equalTimeLineModelCoord(coord1: TimeLineModelCoordinate, coord2: TimeLineModelCoordinate): boolean {\n    return this.equalTimeLineModelId(coord1?.timeLineModelId, coord2?.timeLineModelId) && this.equalBlockCoordinate(coord1?.blockCoordinate, coord2?.blockCoordinate)\n  }\n\n  private equalTimeLineId(id1: TimeLineId, id2: TimeLineId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalTimeLineModelId(id1: TimeLineModelId, id2: TimeLineModelId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalBlockCoordinate(coord1: BlockCoordinate, coord2: BlockCoordinate): boolean {\n    return coord1?.storyDocId.id === coord2?.storyDocId.id && coord1?.blockId.id === coord2?.blockId.id;\n  }\n\n\n  public loadAssociatedTimeLineModels() {\n    log('loadAssociatedTimeLineModels()')\n    let uiScenario = this.uiScenario\n    this.timeLineControllerService.getTimeLineModelSummariesUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id\n    }).subscribe({\n      next: summaries => this.configStore.next({timeLineModels: summaries})\n    })\n  }\n\n  private defaultTimeline(dto: TimeLineModelDto) {\n    return this.asArray(dto.timeLines).find((timeLine)=> timeLine.name==='default');\n  }\n\n  private asArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  // presentation mode\n\n  togglePresentationMode() {\n    this.presentationStore.next({ presentationMode: !this.presentationStore.getValue().presentationMode })\n  }\n\n  selectFirst() {\n\n  }\n\n  selectPrevious() {\n\n  }\n\n  selectNext() {\n\n  }\n\n  selectLast() {\n\n  }\n}\n",
            "properties": [
                {
                    "name": "timeLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineDto",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "timeLineId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineId",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "timeLineModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineModelDto",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "uiScenarioCoord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UiScenarioCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "uiScenarioDto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UiScenarioDto",
                    "optional": true,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenDesignCoordinate",
            "id": "interface-ScreenDesignCoordinate-408207bc37e3f8ee041a7a18b9a12b9b687aa8f9e5a2c9562fdb252fc6deed8bc1561634b99398a1f5dfa193b2d4bc3e380b5d0f1058c238f55d9f7000ba542f",
            "file": "src/app/api/models/screen-design-coordinate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BlockCoordinate } from './block-coordinate';\nimport { ScreenDesignId } from './screen-design-id';\nexport interface ScreenDesignCoordinate {\n  blockCoordinate?: BlockCoordinate;\n  screenDesignId?: ScreenDesignId;\n}\n",
            "properties": [
                {
                    "name": "blockCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "screenDesignId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenDesignId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenDesignDto",
            "id": "interface-ScreenDesignDto-66b7c8b6a6f45011481685705b04caa5730bfa10c9e963998cc2690aaa7dd03260aecdd402db1ed324ea5a9e308cf5fe3562128a3fea73b7b863ecd2577f48ca",
            "file": "src/app/api/models/screen-design-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SdContainerDto } from './sd-container-dto';\nimport { ScreenDesignCoordinate } from './screen-design-coordinate';\nimport { StoryDocSummaryDto } from './story-doc-summary-dto';\nexport interface ScreenDesignDto {\n  coordinate?: ScreenDesignCoordinate;\n  name?: string;\n  rootContainer?: SdContainerDto;\n  storyDocSummaryDTO?: StoryDocSummaryDto;\n}\n",
            "properties": [
                {
                    "name": "coordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenDesignCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "rootContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdContainerDto",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "storyDocSummaryDTO",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocSummaryDto",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenDesignId",
            "id": "interface-ScreenDesignId-e383f00c23613aaffd85f9fc100db785d273eb7417862bac6b96a730d33810dc07f94bf2c163fbfd343472c9e17c633c9ca7ac572de6a6675f742e5d8acb707b",
            "file": "src/app/api/models/screen-design-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ScreenDesignId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenshotCollectionCoordinate",
            "id": "interface-ScreenshotCollectionCoordinate-50afac0c2501e9cbadd2d4b8897e7f3ad2378ababf47ecda7fb322ba2de8a60480b2cfac04618d1dcf1ff430ee3458e24a1e344cd878a39a54d5d1874e9d0565",
            "file": "src/app/api/models/screenshot-collection-coordinate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BlockCoordinate } from './block-coordinate';\nimport { ScreenShotCollectionId } from './screen-shot-collection-id';\nexport interface ScreenshotCollectionCoordinate {\n  blockCoordinate?: BlockCoordinate;\n  screenShotCollectionId?: ScreenShotCollectionId;\n}\n",
            "properties": [
                {
                    "name": "blockCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "screenShotCollectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenShotCollectionId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenShotCollectionDto",
            "id": "interface-ScreenShotCollectionDto-3b0082232d66bacc75137bb57e6576ba850ac1fbee358b5bd95730d5b668d84d7ddb5981b387693812c020facb31d1c490fa2d8e6a19ac7ebcb2faed1ca558f8",
            "file": "src/app/api/models/screen-shot-collection-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ScreenShotDto } from './screen-shot-dto';\nimport { ScreenshotCollectionCoordinate } from './screenshot-collection-coordinate';\nimport { StoryDocSummaryDto } from './story-doc-summary-dto';\nexport interface ScreenShotCollectionDto {\n  coordinate?: ScreenshotCollectionCoordinate;\n  name?: string;\n  screenShots?: Array<ScreenShotDto>;\n  storyDocSummary?: StoryDocSummaryDto;\n}\n",
            "properties": [
                {
                    "name": "coordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenshotCollectionCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "screenShots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScreenShotDto>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "storyDocSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocSummaryDto",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenShotCollectionId",
            "id": "interface-ScreenShotCollectionId-0543b59f3f22fc3dbc041c9151d59849b430d3350c1fb7bae0475e6906d9e6904820f8f9d3098f20a5cf11cd25dc6c9aab09438d6dbb8f0da8ae86e15f67e368",
            "file": "src/app/api/models/screen-shot-collection-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ScreenShotCollectionId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenshotCollectionSummaryDto",
            "id": "interface-ScreenshotCollectionSummaryDto-e6ee72d01b2db64f075f48ed8198fe3f4e03bcc8cfc231c480fa4133448c400acd588f4a2f9ee851fd11c54265adb9501d454693b457af1bf6443dfe8856bc5b",
            "file": "src/app/api/models/screenshot-collection-summary-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ScreenshotCollectionCoordinate } from './screenshot-collection-coordinate';\nexport interface ScreenshotCollectionSummaryDto {\n  collectionCoordinate?: ScreenshotCollectionCoordinate;\n  name?: string;\n}\n",
            "properties": [
                {
                    "name": "collectionCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenshotCollectionCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenshotCoordinate",
            "id": "interface-ScreenshotCoordinate-9290cc346c721926f8ae8b8dc237c123b2be50bf153a0630fffa6c5bc1e04695cdee9d50a54ad412d933a4b1b3fa2fb001ece4e6e848ff8d187259eddceb32cb",
            "file": "src/app/api/models/screenshot-coordinate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ScreenShotId } from './screen-shot-id';\nimport { ScreenshotCollectionCoordinate } from './screenshot-collection-coordinate';\nexport interface ScreenshotCoordinate {\n  collectionCoordinate?: ScreenshotCollectionCoordinate;\n  screenShotId?: ScreenShotId;\n}\n",
            "properties": [
                {
                    "name": "collectionCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenshotCollectionCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "screenShotId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenShotId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenshotDialogData",
            "id": "interface-ScreenshotDialogData-56bdba0e92ea94f0292cdc486e3cdf4b350aaafffb12c2469e5cc17c2d77c1dd5b54a2afabb9530dbfd6531b7c255a2bb02f6ac96acb63734bc394b62dd47822",
            "file": "src/app/ui/screenshot-collection-page/create-screenshot-dialog/create-screenshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, Input, SimpleChanges, ViewChild} from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators} from \"@angular/forms\";\n\nexport interface ScreenshotDialogData {\n  name: string,\n  file: string,\n  fileSource: any,\n  fileSize: number\n}\n\nexport interface ScreenshotDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: ScreenshotDialogData\n  confirm: (data: ScreenshotDialogData) => void\n  cancel: () => void\n  maxFileSize: number\n}\n\n@Component({\n  selector: 'app-create-screenshot-dialog',\n  templateUrl: './create-screenshot-dialog.component.html',\n  styleUrls: ['./create-screenshot-dialog.component.scss']\n})\nexport class CreateScreenshotDialogComponent {\n\n  @Input()\n  spec: ScreenshotDialogSpec\n\n  @ViewChild('fileElement') fileElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      if (this.spec.mode == 'NEW') {\n        this.newFormGroup.setValue(this.spec.data)\n      } else {\n        this.editFormGroup.setValue(this.spec.data)\n      }\n    }\n  }\n\n  // new\n  newFormGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n    file: new FormControl('', [Validators.required]),\n    fileSource: new FormControl('', [Validators.required]),\n    fileSize: new FormControl(0, [this.validFileSize()])\n  })\n\n  get newNameControl(): FormControl {\n    return <FormControl>this.newFormGroup.get('name')\n  }\n\n  get fileSizeControl(): FormControl {\n    return <FormControl> this.newFormGroup.get('fileSize')\n  }\n\n  validFileSize(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors| null => {\n      if (!this.spec) return null\n      const invalid = control.value > this.spec.maxFileSize\n      return invalid ? {validFileSize: {value: 'File size is too big, max filesize is ' + this.spec.maxFileSize}} : null;\n    }\n  }\n\n\n  onFileChange(event) {\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0]\n      this.newFormGroup.patchValue({\n        fileSource: file\n      });\n      this.fileSizeControl.setValue(file.size)\n      if (!this.newNameControl.value) {\n        this.newNameControl.setValue(file.name)\n      }\n    }\n  }\n\n  // edit\n\n  editFormGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n  })\n\n\n\n  cancel() {\n    this.spec.cancel.apply(this.spec.cancel, [])\n  }\n\n  save() {\n    this.spec.confirm.apply(this.spec.confirm, this.spec.mode=='NEW' ? [this.newFormGroup.value] : [this.editFormGroup.value])\n  }\n\n  invalidFile(): boolean {\n    return !this.newFormGroup.get('fileSize').valid\n  }\n}\n",
            "properties": [
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "fileSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenshotDialogSpec",
            "id": "interface-ScreenshotDialogSpec-56bdba0e92ea94f0292cdc486e3cdf4b350aaafffb12c2469e5cc17c2d77c1dd5b54a2afabb9530dbfd6531b7c255a2bb02f6ac96acb63734bc394b62dd47822",
            "file": "src/app/ui/screenshot-collection-page/create-screenshot-dialog/create-screenshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, ElementRef, Input, SimpleChanges, ViewChild} from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators} from \"@angular/forms\";\n\nexport interface ScreenshotDialogData {\n  name: string,\n  file: string,\n  fileSource: any,\n  fileSize: number\n}\n\nexport interface ScreenshotDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: ScreenshotDialogData\n  confirm: (data: ScreenshotDialogData) => void\n  cancel: () => void\n  maxFileSize: number\n}\n\n@Component({\n  selector: 'app-create-screenshot-dialog',\n  templateUrl: './create-screenshot-dialog.component.html',\n  styleUrls: ['./create-screenshot-dialog.component.scss']\n})\nexport class CreateScreenshotDialogComponent {\n\n  @Input()\n  spec: ScreenshotDialogSpec\n\n  @ViewChild('fileElement') fileElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      if (this.spec.mode == 'NEW') {\n        this.newFormGroup.setValue(this.spec.data)\n      } else {\n        this.editFormGroup.setValue(this.spec.data)\n      }\n    }\n  }\n\n  // new\n  newFormGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n    file: new FormControl('', [Validators.required]),\n    fileSource: new FormControl('', [Validators.required]),\n    fileSize: new FormControl(0, [this.validFileSize()])\n  })\n\n  get newNameControl(): FormControl {\n    return <FormControl>this.newFormGroup.get('name')\n  }\n\n  get fileSizeControl(): FormControl {\n    return <FormControl> this.newFormGroup.get('fileSize')\n  }\n\n  validFileSize(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors| null => {\n      if (!this.spec) return null\n      const invalid = control.value > this.spec.maxFileSize\n      return invalid ? {validFileSize: {value: 'File size is too big, max filesize is ' + this.spec.maxFileSize}} : null;\n    }\n  }\n\n\n  onFileChange(event) {\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0]\n      this.newFormGroup.patchValue({\n        fileSource: file\n      });\n      this.fileSizeControl.setValue(file.size)\n      if (!this.newNameControl.value) {\n        this.newNameControl.setValue(file.name)\n      }\n    }\n  }\n\n  // edit\n\n  editFormGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n  })\n\n\n\n  cancel() {\n    this.spec.cancel.apply(this.spec.cancel, [])\n  }\n\n  save() {\n    this.spec.confirm.apply(this.spec.confirm, this.spec.mode=='NEW' ? [this.newFormGroup.value] : [this.editFormGroup.value])\n  }\n\n  invalidFile(): boolean {\n    return !this.newFormGroup.get('fileSize').valid\n  }\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenshotDialogData",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"UPDATE\" | \"NEW\"",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenShotDto",
            "id": "interface-ScreenShotDto-9116e75f95f3da4c61c70ab9d2e49a3e128091cf13dfe058226fe890dbee9f4d8d9311b31011214085f964de362b77c8b4d75ab0bdbfa126d79eeeab4ca910f7",
            "file": "src/app/api/models/screen-shot-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ScreenShotId } from './screen-shot-id';\nexport interface ScreenShotDto {\n  id?: ScreenShotId;\n  imgURL?: string;\n  name?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenShotId",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "imgURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenShotId",
            "id": "interface-ScreenShotId-55494b7b4a69867544b523cbb4b3645dab85b6d39804ddf98aa6f7d720d537a1c575961c5e46e786c82f72b981145f83cf1bfacec68b1d6ab5da387d6876b264",
            "file": "src/app/api/models/screen-shot-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ScreenShotId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenshotSelectionPanelState",
            "id": "interface-ScreenshotSelectionPanelState-5e0dbeedcf3ed534fb0cfdd1abbaccb241c56c80f41d13c05168b1b1c80a64a84862fbfe4a5e251b6a7c990a01e9694f97b39f674e02d14015cdb66b1282de8f",
            "file": "src/app/ui/uiscenario-page/uiscenario.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Observable, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {\n  BlockCoordinate,\n  BlockId, ScreenshotCollectionCoordinate, ScreenShotCollectionDto, ScreenshotCollectionSummaryDto,\n  ScreenshotCoordinate,\n  StoryDocId, TimeLineDto,\n  TimeLineId,\n  TimeLineItemId,\n  TimeLineModelCoordinate,\n  TimeLineModelDto,\n  TimeLineModelId,\n  TimeLineModelSummaryDto,\n  UiScenarioCoordinate,\n  UiScenarioDto\n} from \"@storydoc/models\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {TimeLineControllerService, UiRestControllerService} from \"@storydoc/services\";\n\ninterface PresentationState {\n  presentationMode: boolean\n}\n\ninterface ScenarioPanelState {\n  uiScenarioCoord?: UiScenarioCoordinate,\n  uiScenarioDto?: UiScenarioDto,\n  timeLineModel?: TimeLineModelDto\n  timeLineId?: TimeLineId,\n  timeLine? : TimeLineDto\n}\n\ninterface ScreenshotSelectionPanelState {\n  screenshotCollections?: ScreenshotCollectionSummaryDto[]\n  screenshotCollectionCoord?: ScreenshotCollectionCoordinate\n  screenshotCollection?: ScreenShotCollectionDto\n}\n\ninterface ConfigPanelState {\n  timeLineModels?: TimeLineModelSummaryDto[]\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UIScenarioService implements OnDestroy {\n\n  constructor(\n    private uiRestControllerService: UiRestControllerService,\n    private timeLineControllerService: TimeLineControllerService\n  ) {\n    this.init()\n  }\n\n  // UIScenario, Timeline selection\n\n  private scenarioStore = new BehaviorSubject<ScenarioPanelState>({})\n  state$ = this.scenarioStore.asObservable()\n\n  uiScenario$ = this.state$.pipe(\n    map(state => state.uiScenarioDto),\n    distinctUntilChanged(),\n  )\n\n  timeLineModel$ = this.state$.pipe(\n    map(state => state.timeLineModel),\n    distinctUntilChanged(),\n  )\n\n  timeLineId$ = this.state$.pipe(\n    map(state => state.timeLineId),\n    distinctUntilChanged(),\n  )\n\n  timeLine$ = this.state$.pipe(\n    map(state => state.timeLine),\n    distinctUntilChanged(),\n  )\n\n  // ScreenshotSelection\n\n  screenshotStore = new BehaviorSubject<ScreenshotSelectionPanelState>({})\n\n  screenshotCollections$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollections),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollectionCoord$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollectionCoord),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollection$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollection),\n    distinctUntilChanged(),\n  )\n\n  // Config panel\n\n  private configStore = new BehaviorSubject<ConfigPanelState>({})\n  timeLineModels$ = this.configStore.pipe(\n    map(store => store.timeLineModels),\n    distinctUntilChanged()\n  )\n\n  private get uiScenario(): UiScenarioDto {\n    return this.scenarioStore.getValue()?.uiScenarioDto\n  }\n\n  private get uiScenarioCoord(): UiScenarioCoordinate {\n    return this.scenarioStore.getValue()?.uiScenarioCoord\n  }\n\n  private get timeLineModel(): TimeLineModelDto {\n    return this.scenarioStore.getValue()?.timeLineModel\n  }\n\n  // Presentation state\n\n  private presentationStore = new BehaviorSubject<PresentationState>({presentationMode: false})\n\n  presentationMode$ = this.presentationStore.pipe(\n    map(store => store.presentationMode),\n    distinctUntilChanged()\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('ScenarioStore$ >>', this.scenarioStore))\n    this.subscriptions.push(logChangesToObservable('ConfigStore$ >> ', this.configStore))\n    this.subscriptions.push(logChangesToObservable('TimeLineId$ >>', this.timeLineId$))\n    this.subscriptions.push(logChangesToObservable('timeLine$ >> ', this.timeLine$))\n    this.subscriptions.push(this.loadTimeLineModelFromUIScenario())\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadUIScenario(params: { storyDocId: StoryDocId, blockId: BlockId, uiScenarioId: string }) {\n    log(\"loadUIScenario(params)\", params)\n    this.screenshotStore.next({})\n    this.configStore.next({})\n    this.scenarioStore.next({\n      uiScenarioCoord: {\n        blockCoordinate: {\n          storyDocId: params.storyDocId,\n          blockId: params.blockId\n        },\n        uiScenarioId: {id: params.uiScenarioId}\n      }\n    })\n    this.reloadScenario()\n  }\n\n  public selectTimeLineModel(timeLineModelCoordinate: TimeLineModelCoordinate) {\n    log(\"selectTimeLineModel(coord)\", timeLineModelCoordinate)\n    this.uiRestControllerService.setUiScenarioTimeLineModelUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      timeLineModelStoryDocId: timeLineModelCoordinate.blockCoordinate.storyDocId.id,\n      timeLineModelBlockId: timeLineModelCoordinate.blockCoordinate.blockId.id,\n      timeLineModelId: timeLineModelCoordinate.timeLineModelId.id,\n    }).subscribe({\n      next: value => {\n        this.reloadScenario()\n      }\n    })\n  }\n\n  public setScenarioTimeLine(timeLineId: TimeLineId) {\n    log('setScenarioTimeLine(timeLineId)', timeLineId)\n    this.scenarioStore.next({\n      ... this.scenarioStore.value,\n      timeLineId,\n      timeLine: this.timeLineById(this.timeLineModel, timeLineId)\n    })\n  }\n\n  private timeLineById(timeLineModel: TimeLineModelDto, timeLineId: TimeLineId): TimeLineDto {\n    return this.timelinesAsArray(timeLineModel.timeLines).find(timeLine => timeLine.timeLineId.id === timeLineId.id)\n  }\n\n  private timelinesAsArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  public selectScreenshotCollection(coord: ScreenshotCollectionCoordinate) {\n    log('selectScreenshotCollection(coord)', coord)\n    this.uiRestControllerService.getScreenShotCollectionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      id: coord.screenShotCollectionId.id\n    }).subscribe(collectionDto => {\n      this.screenshotStore.next({\n        ... this.screenshotStore.getValue(),\n        screenshotCollectionCoord: coord,\n        screenshotCollection: collectionDto\n      })\n    })\n  }\n\n  public addScreenshotToScenario(screenshotCoordinate: ScreenshotCoordinate, timeLineItemId: TimeLineItemId) {\n    log('addScreenshotToScenario(screenshotCoordinate, timeLineItemId)', screenshotCoordinate, timeLineItemId)\n    this.uiRestControllerService.addScreenshotToUiScenarioUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      screenshotStoryDocId: screenshotCoordinate.collectionCoordinate.blockCoordinate.storyDocId.id,\n      screenshotBlockId: screenshotCoordinate.collectionCoordinate.blockCoordinate.blockId.id,\n      screenshotCollectionId: screenshotCoordinate.collectionCoordinate.screenShotCollectionId.id,\n      screenshotId: screenshotCoordinate.screenShotId.id,\n      timeLineItemId: timeLineItemId.id\n    }).subscribe({\n      next: (value => this.reloadScenario())\n    })\n  }\n\n  private reloadScenario() {\n    log('reloadScenario()')\n    this.uiRestControllerService.getUiScenarioUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      id: this.uiScenarioCoord.uiScenarioId.id\n    }).subscribe({\n      next: uiScenarioDto => {\n        this.scenarioStore.next({\n          ...this.scenarioStore.getValue(),\n          uiScenarioDto: uiScenarioDto,\n        })\n        this.screenshotStore.next({\n          ... this.screenshotStore.getValue(),\n          screenshotCollections: uiScenarioDto.associatedCollections\n        })\n      }\n    })\n  }\n\n  private loadTimeLineModelFromUIScenario(): Subscription {\n    return this.uiScenario$.subscribe({\n      next: uiScenario => {\n        log('uiScenario$-->refreshTimeLineModelWhenScenarioUpdates()')\n        if (!this.equalTimeLineModelCoord(this.timeLineModel?.timeLineModelCoordinate, uiScenario?.timeLineModelCoordinate)) {\n          this.loadTimeLineModel(uiScenario.timeLineModelCoordinate)\n        }\n      }\n    })\n  }\n\n  private loadTimeLineModel(coord: TimeLineModelCoordinate) {\n    log('reloadTimeLineModel(coord)', coord)\n    this.timeLineControllerService.getTimeLineModelUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      timeLineModelId: coord.timeLineModelId.id\n    }).subscribe({\n      next: (dto) => {\n        let nextValue = <ScenarioPanelState>{\n          ...this.scenarioStore.getValue(),\n          timeLineModel: dto,\n        }\n        this.scenarioStore.next(nextValue)\n        let defaultId = this.defaultTimeline(dto)?.timeLineId\n        if (!nextValue.timeLineId && (defaultId)) {\n          this.setScenarioTimeLine(defaultId)\n        }\n      }\n    })\n  }\n\n  private equalTimeLineCoord(tlmCoord1: TimeLineModelCoordinate, tlId1: TimeLineId, tlmCoord2: TimeLineModelCoordinate, tlId2: TimeLineId) {\n    return this.equalTimeLineModelCoord(tlmCoord1, tlmCoord2) && this.equalTimeLineId(tlId1, tlId2)\n  }\n\n  private equalTimeLineModelCoord(coord1: TimeLineModelCoordinate, coord2: TimeLineModelCoordinate): boolean {\n    return this.equalTimeLineModelId(coord1?.timeLineModelId, coord2?.timeLineModelId) && this.equalBlockCoordinate(coord1?.blockCoordinate, coord2?.blockCoordinate)\n  }\n\n  private equalTimeLineId(id1: TimeLineId, id2: TimeLineId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalTimeLineModelId(id1: TimeLineModelId, id2: TimeLineModelId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalBlockCoordinate(coord1: BlockCoordinate, coord2: BlockCoordinate): boolean {\n    return coord1?.storyDocId.id === coord2?.storyDocId.id && coord1?.blockId.id === coord2?.blockId.id;\n  }\n\n\n  public loadAssociatedTimeLineModels() {\n    log('loadAssociatedTimeLineModels()')\n    let uiScenario = this.uiScenario\n    this.timeLineControllerService.getTimeLineModelSummariesUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id\n    }).subscribe({\n      next: summaries => this.configStore.next({timeLineModels: summaries})\n    })\n  }\n\n  private defaultTimeline(dto: TimeLineModelDto) {\n    return this.asArray(dto.timeLines).find((timeLine)=> timeLine.name==='default');\n  }\n\n  private asArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  // presentation mode\n\n  togglePresentationMode() {\n    this.presentationStore.next({ presentationMode: !this.presentationStore.getValue().presentationMode })\n  }\n\n  selectFirst() {\n\n  }\n\n  selectPrevious() {\n\n  }\n\n  selectNext() {\n\n  }\n\n  selectLast() {\n\n  }\n}\n",
            "properties": [
                {
                    "name": "screenshotCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenShotCollectionDto",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "screenshotCollectionCoord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenshotCollectionCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "screenshotCollections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenshotCollectionSummaryDto[]",
                    "optional": true,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScreenShotTimeLineItemDto",
            "id": "interface-ScreenShotTimeLineItemDto-7b5168f1edb2a61e29e45d17830ca8e88f05b0ea9b1cd111a053876f88a4c7fa62fd7650fdf867287d0f8e6de166cecedd8d1c8bd3bcc4bb540b13298cc0f269",
            "file": "src/app/api/models/screen-shot-time-line-item-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ScreenshotCoordinate } from './screenshot-coordinate';\nimport { TimeLineItemId } from './time-line-item-id';\nexport interface ScreenShotTimeLineItemDto {\n  screenshotCoordinate?: ScreenshotCoordinate;\n  timeLineItemId?: TimeLineItemId;\n}\n",
            "properties": [
                {
                    "name": "screenshotCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenshotCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "timeLineItemId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineItemId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SdComponentDto",
            "id": "interface-SdComponentDto-a491bc66c69660c0b606e0cb21e2495eb4acd6270c8b21ec51611ac4507e5ef74351875f79f8a0db5c3427d2107fdca6be7136669482a5dd164c9d6427231907",
            "file": "src/app/api/models/sd-component-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentAttributeDto } from './component-attribute-dto';\nimport { SdComponentId } from './sd-component-id';\nexport interface SdComponentDto {\n  attributes?: Array<ComponentAttributeDto>;\n  id?: SdComponentId;\n  label?: string;\n  name?: string;\n  type?: string;\n  'x'?: number;\n  'y'?: number;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentAttributeDto>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentId",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SdComponentId",
            "id": "interface-SdComponentId-d0ca279a584d2df9e88f79ed28ce27e3fa0dbff4096df76e79301cddf730c9e55ebb5106100a456e0e9083f4cc8bc29e837bfbe5394489476353aa9b664f1a0a",
            "file": "src/app/api/models/sd-component-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SdComponentId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SdComponentTypeSelectionDto",
            "id": "interface-SdComponentTypeSelectionDto-01ece98f684d5d8634f22fc445f17a1119690fe3e20a3e8842a90601291273f5fe51eb14e9e43894e9704041ac13a833e2acafcf5f985b8cc4de9f6fb948dcdd",
            "file": "src/app/api/models/sd-component-type-selection-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SdComponentDto } from './sd-component-dto';\nimport { SdContainerDto } from './sd-container-dto';\nexport interface SdComponentTypeSelectionDto {\n  component?: SdComponentDto;\n  container?: SdContainerDto;\n}\n",
            "properties": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentDto",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdContainerDto",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SdContainerDto",
            "id": "interface-SdContainerDto-aeca138ee87c946ec46db0873fc7f035ce2f2a730a83f76c47ad4e0d3302a7a144852e0cbd036ad2d451dc3ff1215215832fc4d3d50346d317e5b60186dc7f2d",
            "file": "src/app/api/models/sd-container-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SdComponentId } from './sd-component-id';\nimport { SdComponentTypeSelectionDto } from './sd-component-type-selection-dto';\nexport interface SdContainerDto {\n  children?: Array<SdComponentTypeSelectionDto>;\n  id?: SdComponentId;\n  label?: string;\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SdComponentTypeSelectionDto>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentId",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SourceCodeConfigCoordinate",
            "id": "interface-SourceCodeConfigCoordinate-4d2e32debaa4db72f0a09f83900df9e21a6b8e08f23f2af5bbb2276b4e60dd766ccb45edaa87519e99344c48ead353b010055db02d9d11133419027724d2283f",
            "file": "src/app/api/models/source-code-config-coordinate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BlockCoordinate } from './block-coordinate';\nimport { SourceCodeConfigId } from './source-code-config-id';\nexport interface SourceCodeConfigCoordinate {\n  blockCoordinate?: BlockCoordinate;\n  sourceCodeConfigId?: SourceCodeConfigId;\n}\n",
            "properties": [
                {
                    "name": "blockCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sourceCodeConfigId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceCodeConfigId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SourceCodeConfigDto",
            "id": "interface-SourceCodeConfigDto-447cc1751166ac824dbf3c977598dc354436d0d4a553d6ecbfe6169ec24fa04605433faf24d3c97a5021c3bc5ca0d5153ae209fc90d551881bbb89e908841d60",
            "file": "src/app/api/models/source-code-config-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SourceCodeConfigId } from './source-code-config-id';\nimport { StoryDocSummaryDto } from './story-doc-summary-dto';\nexport interface SourceCodeConfigDto {\n  dirs?: Array<string>;\n  id?: SourceCodeConfigId;\n  name?: string;\n  storyDocSummary?: StoryDocSummaryDto;\n}\n",
            "properties": [
                {
                    "name": "dirs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceCodeConfigId",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "storyDocSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocSummaryDto",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SourceCodeConfigId",
            "id": "interface-SourceCodeConfigId-bf98a673767f783ca3614741063f0ef19d8916bc3561c4e19177d82f2a46bbeea6f83f3a9c1fb2e62a68288f87d55a232f4d39bdf78a69055acf4ea3d9dedc33",
            "file": "src/app/api/models/source-code-config-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SourceCodeConfigId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SourceCodeConfigStoreState",
            "id": "interface-SourceCodeConfigStoreState-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "coord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceCodeConfigCoordinate",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "sourceCodeConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceCodeConfigDto",
                    "optional": true,
                    "description": "",
                    "line": 66
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SourceCodeDto",
            "id": "interface-SourceCodeDto-f8d5045c7b80bf0f369c121045d5c1d6dcc11a3dbe421bb459f0d83031af2f5aad699bf327fef5bbb5897d9da46f81b501cb916e0351944ccc89e09e5f43b393",
            "file": "src/app/api/models/source-code-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SourceCodeDto {\n  lines?: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "lines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SourceCodeStoreState",
            "id": "interface-SourceCodeStoreState-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "sourceCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceCodeDto",
                    "optional": true,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-ddb6fe18069fda27012312b51f104dd364acef278b85169ed6de12972dd5584808e7a0218a822dff9fae38e850d8323c474d6e2fabf6dd5cfb13d16754d1d62a",
            "file": "src/app/common/admin-data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {AdminControllerService} from \"@storydoc/services\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {StoryDocServerProperties} from \"@storydoc/models\";\nimport {map} from \"rxjs/operators\";\n\ninterface State {\n  serverProperties: StoryDocServerProperties;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminDataService {\n\n  constructor(private adminControllerService: AdminControllerService) { this.load()}\n\n  private store = new BehaviorSubject<State>({ serverProperties: null })\n\n  settings$ = this.store.asObservable().pipe(\n    map(state => state.serverProperties)\n  )\n\n  private load() {\n    this.adminControllerService.getConfigUsingGet({}).subscribe( serverProperties => this.store.next({ serverProperties }))\n  }\n\n}\n",
            "properties": [
                {
                    "name": "serverProperties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocServerProperties",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-916904f5da2d9bee2fee33ab0af944d7c9c2930842cd315b1ce4eaed72cb757785b25efee65b7ba33f0f8d95004646cf26e8becf48f5580e0e258388a2ac03e7-1",
            "file": "src/app/db/dbdata-page/dbdata.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {DbDataSetDto, NavigationModelDto} from \"@storydoc/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqldbControllerService} from \"@storydoc/services\";\nimport {log} from '@storydoc/common'\n\ninterface State {\n  dataSet?: DbDataSetDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DBDataService implements  OnDestroy{\n\n  constructor(private dbControllerService: SqldbControllerService) { this.init() }\n\n  private store = new BehaviorSubject<State>({})\n  state$ = this.store.asObservable()\n\n  dataSet$ = this.store.asObservable().pipe(\n    map(state => state.dataSet)\n  )\n\n  private get dataset(): DbDataSetDto {\n    return <DbDataSetDto> this.store.getValue().dataSet\n  }\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(this.logStateChanges())\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n\n  load() {\n    this.dbControllerService.getDbDataSetUsingGet({}).subscribe( dataSet => this.store.next({ dataSet }))\n  }\n\n\n\n  addTableData() {\n    this.dataset.tableDataSets.push({})\n    this.store.next({\n      dataSet: {\n        tableDataSets: this.dataset.tableDataSets\n      }\n    })\n  }\n\n  private logStateChanges() {\n    return this.state$.subscribe((state)=> { log('   state$ >> ', state) })\n  }\n\n}\n",
            "properties": [
                {
                    "name": "dataSet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DbDataSetDto",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-6eb63d542cd3b040728a83bccb85f1c06b49b8e43b17825e7a4d6bede290549f9846b93a8983e05063305b113e3adb834e6a60175d218359d4808116d1953581-2",
            "file": "src/app/db/dbnavigation-page/dbnavigation.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {SqldbControllerService} from \"@storydoc/services\";\nimport {NavigationModelDto} from \"@storydoc/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\ninterface State {\n  navigationModel?: NavigationModelDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DBNavigationService {\n\n  constructor(private sqldbControllerService: SqldbControllerService) { }\n\n  private store = new BehaviorSubject<State>({})\n\n  navigationModel$ = this.store.asObservable().pipe(\n    map(state => state.navigationModel)\n  )\n\n  init() {\n    this.sqldbControllerService.getNavigationModelUsingGet().subscribe((navigationModel)=>\n      this.store.next({...this.store.getValue(), navigationModel})\n    )\n  }\n\n}\n",
            "properties": [
                {
                    "name": "navigationModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationModelDto",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "State",
            "id": "interface-State-f854a9ede475a2a61819b4c9d6fa004f12394e016a845dcd237e11852689dec6c3c9085c14c9a27095aaf0d69364da23ae27d63cb58b9f8cc544bb4c71be6e29-3",
            "file": "src/app/ui/screen-design-page/screen-design.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {ComponentDescriptorDto} from \"../../api/models/component-descriptor-dto\";\nimport {ScreenDesignRestControllerService} from \"../../api/services/screen-design-rest-controller.service\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {ComponentAttributeDescriptorDto, ComponentAttributeDto, ScreenDesignCoordinate, ScreenDesignDto, SdComponentDto, SdContainerDto} from \"@storydoc/models\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\n\ninterface State {\n  palette?: ComponentDescriptorDto[]\n  coord?: ScreenDesignCoordinate\n  screenDesign? : ScreenDesignDto\n  selection? : SdComponentDto | 'NONE'\n  selectedContainer? : SdContainerDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScreenDesignService implements  OnDestroy{\n\n  constructor(private screenDesignRestControllerService: ScreenDesignRestControllerService) { this.init() }\n\n  private store = new BehaviorSubject<State>({})\n\n  palette$ = this.store.asObservable().pipe(\n    map(state => state.palette)\n  )\n\n  screenDesign$ = this.store.asObservable().pipe(\n    map(state => state.screenDesign)\n  )\n\n  selectedContainer$ = this.store.asObservable().pipe(\n    map(state => state.selectedContainer)\n  )\n\n  selection$ = this.store.asObservable().pipe(\n    map(state => state.selection)\n  )\n\n  get selectedContainer():SdContainerDto {\n    return this.store.getValue().selectedContainer\n  }\n\n  get selectedComponent():SdComponentDto | 'NONE' {\n    return this.store.getValue().selection\n  }\n\n  get coord():ScreenDesignCoordinate {\n    return this.store.getValue().coord\n  }\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    log('init()')\n    this.loadPalette()\n    this.subscriptions.push(logChangesToObservable('store$ >>', this.store))\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public setScreenDesign(coord: ScreenDesignCoordinate) {\n    this.store.next({\n      ... this.store.getValue(),\n      coord,\n      screenDesign: null,\n      selectedContainer: null,\n      selection: 'NONE'\n    })\n    this.reload();\n  }\n\n  private reload() {\n    if (!this.coord) return\n    this.screenDesignRestControllerService.getScreenDesignUsingGet({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id\n    }).subscribe(screenDesign => this.store.next({\n      ...this.store.getValue(),\n      screenDesign,\n      selectedContainer: screenDesign.rootContainer\n    }))\n  }\n\n  private loadPalette() {\n    this.screenDesignRestControllerService.getComponentPaletteUsingGet({}).subscribe(palette => this.store.next({\n      ... this.store.getValue(),\n      palette\n    }))\n  }\n\n  addComponent(componentDescriptor: ComponentDescriptorDto, { x, y} ) {\n    this.screenDesignRestControllerService.createComponentUsingPost({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id,\n      containerId: this.selectedContainer.id.id,\n      type: componentDescriptor.type,\n      x: Math.round(x),\n      y: Math.round(y)\n    }).subscribe(()=> this.reload())\n  }\n\n  moveComponent(component: SdComponentDto, coord: { x: number; y: number }) {\n    this.screenDesignRestControllerService.updateComponentLocationUsingPut({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id,\n      componenId: component.id.id,\n      x: coord.x,\n      y: coord.y\n    }).subscribe(()=> this.reload())\n  }\n\n  renameComponent(component: SdComponentDto, name: string) {\n    this.screenDesignRestControllerService.updateComponentNameUsingPut({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id,\n      componenId: component.id.id,\n      name\n    }).subscribe(()=> this.reload())\n  }\n\n  deleteComponent(component: SdComponentDto) {\n    this.screenDesignRestControllerService.deleteComponentUsingDelete({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id,\n      componenId: component.id.id,\n    }).subscribe(()=> this.reload())\n  }\n\n  selectComponent(component: SdComponentDto) {\n    this.store.next({\n      ... this.store.getValue(),\n      selection: component\n    })\n\n  }\n\n  setAttribute(component: SdComponentDto | \"NONE\", attribute: ComponentAttributeDescriptorDto, value: any) {\n    if (component==\"NONE\") return\n    let componentAttribute = component.attributes.find(att => att.name===attribute.name)\n    if (!componentAttribute) {\n      componentAttribute = <ComponentAttributeDto>{\n        name: attribute.name,\n        value: null\n      }\n      component.attributes.push(componentAttribute)\n    }\n    componentAttribute.value = value\n    this.store.next({\n      ... this.store.getValue(),\n      screenDesign: {\n        ... this.store.getValue().screenDesign\n      }\n    })\n  }\n\n  deleteSelection() {\n    if (this.selectedComponent != 'NONE' ) {\n      this.deleteComponent(this.selectedComponent)\n    }\n  }\n\n  renameSelectedComponent(name: string) {\n    if (this.selectedComponent != 'NONE'){\n      this.renameComponent(this.selectedComponent, name);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "coord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenDesignCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentDescriptorDto[]",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "screenDesign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenDesignDto",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdContainerDto",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentDto | \"NONE\"",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "State-3"
        },
        {
            "name": "State",
            "id": "interface-State-a1c921c428e87456ca64461ecc8d6860ee4957dd740bc949b194377b02a6547bd0eda3720adcff7505e9baf7a7df306fb8df94e643e35089db01555338c64d4a-4",
            "file": "src/app/ui/screenshot-collection-page/screenshot-collection.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from './../../../environments/environment'\nimport {Injectable} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {map, tap} from \"rxjs/operators\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {ScreenshotCollectionCoordinate, ScreenShotCollectionDto, ScreenShotId} from \"@storydoc/models\";\nimport {UiRestControllerService} from \"@storydoc/services\";\n\ninterface State {\n  coord?: ScreenshotCollectionCoordinate\n  screenShotCollection?: ScreenShotCollectionDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScreenshotCollectionService {\n\n  constructor(\n    private http: HttpClient,\n    private uiRestControllerService: UiRestControllerService) {\n  }\n\n  private store = new BehaviorSubject<State>({})\n\n  screenshotCollection$ = this.store.asObservable().pipe(\n    map(state => state.screenShotCollection)\n  )\n\n  public initId(coord: ScreenshotCollectionCoordinate) {\n    this.store.next({coord})\n    this.load()\n  }\n\n  rootUrl() : string {\n    return environment.production ? '' : ('http://localhost:' + environment.port)\n  }\n\n  public AddScreenshot(params: { fileSource: any, name: string }, callback: (msg: any ) => void) {\n    const formData = new FormData();\n    formData.append('file', params.fileSource);\n    formData.set('storyDocId', this.collectionCoord.blockCoordinate.storyDocId.id)\n    formData.set('blockId', this.collectionCoord.blockCoordinate.blockId.id)\n    formData.set('screenshotCollectionId', this.collectionCoord.screenShotCollectionId.id)\n    formData.set('name', params.name)\n    this.http.post(this.rootUrl() +'/api/ui/screenshot' , formData).subscribe({\n      next: value => this.load(),\n//      error: err => callback.apply(this, ['file size limit exceeded'])\n    })\n  }\n\n  public get collectionCoord() {\n    return this.store.getValue().coord;\n  }\n\n  private load() {\n    this.uiRestControllerService.getScreenShotCollectionUsingGet({\n      storyDocId: this.collectionCoord.blockCoordinate.storyDocId.id,\n      blockId: this.collectionCoord.blockCoordinate.blockId.id,\n      id: this.collectionCoord.screenShotCollectionId.id\n    }).subscribe({\n      next:\n        dto => {\n          this.store.next({\n            ...this.store.getValue(),\n            screenShotCollection: dto,\n          })\n        }\n    })\n\n  }\n\n  deleteScreenshot(screenShotId: ScreenShotId) {\n    this.uiRestControllerService.removeScreenshotFromCollectionUsingDelete({\n      storyDocId: this.collectionCoord.blockCoordinate.storyDocId.id,\n      blockId: this.collectionCoord.blockCoordinate.blockId.id,\n      screenshotCollectionId: this.collectionCoord.screenShotCollectionId.id,\n      screenshotId: screenShotId.id\n    }).subscribe( next => this.load())\n  }\n\n  renameScreenShot(screenShotId: ScreenShotId, name: string) {\n    this.uiRestControllerService.renameScreenshotInCollectionUsingPut({\n      storyDocId: this.collectionCoord.blockCoordinate.storyDocId.id,\n      blockId: this.collectionCoord.blockCoordinate.blockId.id,\n      screenshotCollectionId: this.collectionCoord.screenShotCollectionId.id,\n      screenshotId: screenShotId.id,\n      name: name\n    }).subscribe( next => this.load())\n  }\n}\n",
            "properties": [
                {
                    "name": "coord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenshotCollectionCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "screenShotCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenShotCollectionDto",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "State-4"
        },
        {
            "name": "StitchEvent",
            "id": "interface-StitchEvent-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "eventName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "modelName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StitchItemDto",
            "id": "interface-StitchItemDto-e4db6d59e6f719c276759b9f52d65a1054516a638a83936b68be06b59bbd8dda8cccc569f681265fc0ebd6692aaf6d67ee35735dce74554d4da4470ad46570f6",
            "file": "src/app/api/models/stitch-item-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StitchItemDto {\n  attributes?: { [key: string]: string };\n  children?: Array<StitchItemDto>;\n  eventName?: string;\n  modelName?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<StitchItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "eventName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "modelName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StoryDocDto",
            "id": "interface-StoryDocDto-6f3c86a4a1e3445f31c99e6003c1612924e64783646e39b3c65db572a82c4f1bc3b2ed287666978bca639cfa1c9712aef8453d702564c3f5639fa78187be93c6",
            "file": "src/app/api/models/story-doc-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BlockDto } from './block-dto';\nimport { ResourceUrn } from './resource-urn';\nimport { StoryDocId } from './story-doc-id';\nexport interface StoryDocDto {\n  blocks?: Array<BlockDto>;\n  storyDocId?: StoryDocId;\n  title?: string;\n  urn?: ResourceUrn;\n}\n",
            "properties": [
                {
                    "name": "blocks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<BlockDto>",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "storyDocId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocId",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "urn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResourceUrn",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StoryDocId",
            "id": "interface-StoryDocId-a5c85f43a8bc91ff599d4314897fab27968e89e76c40fc219cf3afdb6b05b0ea015b9fe74093f6bd2766e703e7f6ed14edb9deb524534cc9847869001115d61d",
            "file": "src/app/api/models/story-doc-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StoryDocId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StoryDocServerProperties",
            "id": "interface-StoryDocServerProperties-40a61387b52b163543353ff1476dbc32ada37e3eaea6671e5c84eed3f20fd4d1ac5ce159cb3fe188252d056ca8d15604b9f854e59809efe3880c23aacf4bfc89",
            "file": "src/app/api/models/story-doc-server-properties.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StoryDocServerProperties {\n  maxFileSize?: number;\n  workspaceFolder?: string;\n}\n",
            "properties": [
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "workspaceFolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StoryDocSummaryDto",
            "id": "interface-StoryDocSummaryDto-fc2c73c8f056e88d058347ad0f6038bf8c1f85bdf46e12a3f7550277d071c9f70ce8d36ccb2675747b2d756544ef117f74e2ce28d52f191534da4ace978ab1e6",
            "file": "src/app/api/models/story-doc-summary-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StoryDocId } from './story-doc-id';\nexport interface StoryDocSummaryDto {\n  name?: string;\n  storyDocId?: StoryDocId;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "storyDocId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocId",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableDataSetDto",
            "id": "interface-TableDataSetDto-de72b9101926a040b346376513bbaf05b0262e694aca6b2910b2ced30c1cf9561ea271092b0bf2207911732dce0270b10e0470ea2bdc651e914ac1bba790fa7a",
            "file": "src/app/api/models/table-data-set-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableDataSetDto {\n  query?: string;\n}\n",
            "properties": [
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TestCaseBDDEvent",
            "id": "interface-TestCaseBDDEvent-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "noun",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "StitchEvent"
        },
        {
            "name": "TimeLineDto",
            "id": "interface-TimeLineDto-7f23fb47d17c6d402d54cf811d4c7694f4f163f550718e582a1937148af2bdbd82638314b89bda011e07ca1eb8aff370aebb9aa74c2c14ad51dafd906d3f737d",
            "file": "src/app/api/models/time-line-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TimeLineId } from './time-line-id';\nimport { TimeLineItemDto } from './time-line-item-dto';\nexport interface TimeLineDto {\n  items?: Array<TimeLineItemDto>;\n  name?: string;\n  timeLineId?: TimeLineId;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<TimeLineItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "timeLineId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineId",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TimeLineId",
            "id": "interface-TimeLineId-73ba6f89b4fdacff380487e712dec7ab2833921808e5205e8ba7fb2eb5e143f690d8e4b6555cdc759d1c00e177b1055cef4ea61ffe7fe2fd6978665ad74726fb",
            "file": "src/app/api/models/time-line-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TimeLineId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TimeLineItemDto",
            "id": "interface-TimeLineItemDto-652fdc57dcbd7cf8c14254b0fa6584d48c731590e068d0acd25bc2a69cecaa578caa28483a401529bc36b9fc9177b69ea4b0a88f01227cc874960211d7f10901",
            "file": "src/app/api/models/time-line-item-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TimeLineItemId } from './time-line-item-id';\nexport interface TimeLineItemDto {\n  description?: string;\n  itemId?: TimeLineItemId;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "itemId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineItemId",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TimeLineItemId",
            "id": "interface-TimeLineItemId-10deee76642027b4e02b62b18043077f845ef502955b04bd70f7c1afc89e47709dc5ae1ab59dbe7ee0fdf560a87b445d9cc65e8df034946a105ce8fe0e4f8c31",
            "file": "src/app/api/models/time-line-item-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TimeLineItemId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TimeLineModelCoordinate",
            "id": "interface-TimeLineModelCoordinate-719164c3b4421533d0bbae5dd7a0df8d7a1a91ae33dd4b8bd90edab92d7f83b2f82f6b07df3163d726482fe7d44bfd272876a00ecf2d81cd7ddac1038046c8b7",
            "file": "src/app/api/models/time-line-model-coordinate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BlockCoordinate } from './block-coordinate';\nimport { TimeLineModelId } from './time-line-model-id';\nexport interface TimeLineModelCoordinate {\n  blockCoordinate?: BlockCoordinate;\n  timeLineModelId?: TimeLineModelId;\n}\n",
            "properties": [
                {
                    "name": "blockCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "timeLineModelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineModelId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TimeLineModelDto",
            "id": "interface-TimeLineModelDto-60e34fc76fdc1dfff0ecb3bebacd2aca7c923508b749e3a480494e2fcb664542ed57d56f7e315c4f36a228b4a794078a3b5ec3dd53f88657874951fc5630054e",
            "file": "src/app/api/models/time-line-model-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StoryDocSummaryDto } from './story-doc-summary-dto';\nimport { TimeLineDto } from './time-line-dto';\nimport { TimeLineModelCoordinate } from './time-line-model-coordinate';\nexport interface TimeLineModelDto {\n  name?: string;\n  storyDocSummary?: StoryDocSummaryDto;\n  timeLineModelCoordinate?: TimeLineModelCoordinate;\n  timeLines?: { [key: string]: TimeLineDto };\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "storyDocSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocSummaryDto",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "timeLineModelCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineModelCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "timeLines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TimeLineModelId",
            "id": "interface-TimeLineModelId-c2526cfdba52406b7de4ced098d3d6a24e4db72579aba02ebed4d992a86966437624fe9d87dcca5526aef6eb1201b65011043f61a47734452a47ddbeee49da84",
            "file": "src/app/api/models/time-line-model-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TimeLineModelId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TimeLineModelSummaryDto",
            "id": "interface-TimeLineModelSummaryDto-bfec8d88ab57d41d53da4396db0f7febd0e1f899e3809c6637c9389624cd372599c43677085fe9a01a235ba7cf9187185075c80d5e169c3ebb60485e16a31571",
            "file": "src/app/api/models/time-line-model-summary-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TimeLineModelCoordinate } from './time-line-model-coordinate';\nexport interface TimeLineModelSummaryDto {\n  name?: string;\n  timeLineModelCoordinate?: TimeLineModelCoordinate;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "timeLineModelCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineModelCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TimeLineSelection",
            "id": "interface-TimeLineSelection-2a89d481b857cb592e031ff5fac7ac91b5cb7b6233421ba19fcf5a1132d2528bec6ed3975c99dd073f912ff755635c6368656a01cab02dc25605efb471581f0f",
            "file": "src/app/ui/uiscenario-page/time-line-selection-panel/time-line-selection-panel.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {TimeLineDto, TimeLineId, TimeLineModelCoordinate, TimeLineModelSummaryDto} from \"@storydoc/models\";\nimport {TimeLineControllerService} from \"@storydoc/services\";\nimport {UIScenarioService} from \"../uiscenario.service\";\nimport {Subscription} from \"rxjs\";\n\nexport interface TimeLineSelection {\n  timeLineId: TimeLineId\n}\n\n@Component({\n  selector: 'app-time-line-selection-panel',\n  templateUrl: './time-line-selection-panel.component.html',\n  styleUrls: ['./time-line-selection-panel.component.scss']\n})\nexport class TimeLineSelectionPanelComponent implements OnInit, OnDestroy{\n\n  constructor(\n    private timeLineControllerService: TimeLineControllerService,\n    private uiScenarioService: UIScenarioService\n  ) {\n  }\n\n  timeLineModel$ = this.uiScenarioService.timeLineModel$\n\n  timeLineId$ = this.uiScenarioService.timeLineId$\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n    this.subscriptions.push(this.timeLineId$.subscribe(timelineId => {\n      this.timeLineControl.setValue(timelineId, {onlySelf: true})\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    timeLine: new FormControl(),\n  })\n\n  private get timeLineControl(): FormControl {\n    return <FormControl> this.formGroup.get('timeLine')\n  }\n\n  onTimeLineChange() {\n    let timeLineId = this.timeLineControl.value;\n    this.uiScenarioService.setScenarioTimeLine(timeLineId)\n  }\n\n  timelinesAsArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n}\n",
            "properties": [
                {
                    "name": "timeLineId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineId",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TraceStoreState",
            "id": "interface-TraceStoreState-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "codeTrace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeTraceDto",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "coord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeExecutionCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "selectedEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StitchEvent",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "treeNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeNode[]",
                    "optional": true,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TreeNode",
            "id": "interface-TreeNode-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeNode[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UiScenarioCoordinate",
            "id": "interface-UiScenarioCoordinate-587e6423b00a82ef4996b915a206cf03a7867007fde4baa51b14894ceff2a1d03492f2810c486a24c337b63eda1b9ce371e43bdfd3242b1e31e2e7eafb7f5839",
            "file": "src/app/api/models/ui-scenario-coordinate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BlockCoordinate } from './block-coordinate';\nimport { UiScenarioId } from './ui-scenario-id';\nexport interface UiScenarioCoordinate {\n  blockCoordinate?: BlockCoordinate;\n  uiScenarioId?: UiScenarioId;\n}\n",
            "properties": [
                {
                    "name": "blockCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "uiScenarioId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UiScenarioId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UiScenarioDto",
            "id": "interface-UiScenarioDto-d876615a1e95f95d405921a4f8d023b877add6dc67db1851870a22160220636e7adfa4f60ae46f427b744084cd37afa8ef16f1be4c1bbfbb070f98ef1a8038c3",
            "file": "src/app/api/models/ui-scenario-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ScreenShotTimeLineItemDto } from './screen-shot-time-line-item-dto';\nimport { ScreenshotCollectionSummaryDto } from './screenshot-collection-summary-dto';\nimport { StoryDocSummaryDto } from './story-doc-summary-dto';\nimport { TimeLineModelCoordinate } from './time-line-model-coordinate';\nimport { UiScenarioId } from './ui-scenario-id';\nexport interface UiScenarioDto {\n  associatedCollections?: Array<ScreenshotCollectionSummaryDto>;\n  id?: UiScenarioId;\n  name?: string;\n  screenshots?: Array<ScreenShotTimeLineItemDto>;\n  state?: 'CREATED' | 'READY';\n  storyDocSummary?: StoryDocSummaryDto;\n  timeLineModelCoordinate?: TimeLineModelCoordinate;\n}\n",
            "properties": [
                {
                    "name": "associatedCollections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScreenshotCollectionSummaryDto>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UiScenarioId",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "screenshots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScreenShotTimeLineItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"CREATED\" | \"READY\"",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "storyDocSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocSummaryDto",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "timeLineModelCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineModelCoordinate",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UiScenarioId",
            "id": "interface-UiScenarioId-8c39effc296d859ad1ca5ce8b4ce503a34a21d7771ac0f28d6b9b0bfa0a597e07850cede60955e5d35ac9f589f0b37eaf0985f1dd3086df7bf2e4192a57cfd67",
            "file": "src/app/api/models/ui-scenario-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UiScenarioId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserPrincipalLookupService",
            "id": "interface-UserPrincipalLookupService-28b822800d2033ba2643faf3f568ae067ea4c51aeb057a8ef9e39c93f2df1f0e78cccb3300f1ec74f516c6daba6225536ff731ddebc147c759e48bd238022d7b",
            "file": "src/app/api/models/user-principal-lookup-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserPrincipalLookupService {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "WorkspaceSettings",
            "id": "interface-WorkspaceSettings-68b8e7b596c4cba4de7d6587b46aa6bfecd346cdecf7ea5fa3fdf15d43f8b2c6229c3bf436503de94aa737552fc6f4c3a111e9598bf28ac420926e8c7ab64299",
            "file": "src/app/api/models/workspace-settings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Path } from './path';\nexport interface WorkspaceSettings {\n  workspaceFolder?: Path;\n}\n",
            "properties": [
                {
                    "name": "workspaceFolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AdminControllerService",
            "id": "injectable-AdminControllerService-5c9ef11d23feb9f3883a6e20ed8269f04e3688280e28cff55149e8f08431c3ee3e5b858f08ea379c9550d6f1cd6f408f3cd9f526b3310733d75afa957c109a36",
            "file": "src/app/api/services/admin-controller.service.ts",
            "properties": [
                {
                    "name": "GetConfigUsingGetPath",
                    "defaultValue": "'/api/admin/config'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getConfigUsingGet</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nPath part for operation getConfigUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getConfigUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StoryDocServerProperties>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetConfig.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getConfigUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getConfig.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getConfigUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfigUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<StoryDocServerProperties>>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetConfig.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getConfigUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getConfig.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getConfigUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Admin Controller</p>\n",
            "rawdescription": "\n\nAdmin Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { StoryDocServerProperties } from '../models/story-doc-server-properties';\n\n\n/**\n * Admin Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getConfigUsingGet\n   */\n  static readonly GetConfigUsingGetPath = '/api/admin/config';\n\n  /**\n   * getConfig.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getConfigUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getConfigUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<StoryDocServerProperties>> {\n\n    const rb = new RequestBuilder(this.rootUrl, AdminControllerService.GetConfigUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<StoryDocServerProperties>;\n      })\n    );\n  }\n\n  /**\n   * getConfig.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getConfigUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getConfigUsingGet(params?: {\n  }): Observable<StoryDocServerProperties> {\n\n    return this.getConfigUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<StoryDocServerProperties>) => r.body as StoryDocServerProperties)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "AdminDataService",
            "id": "injectable-AdminDataService-ddb6fe18069fda27012312b51f104dd364acef278b85169ed6de12972dd5584808e7a0218a822dff9fae38e850d8323c474d6e2fabf6dd5cfb13d16754d1d62a",
            "file": "src/app/common/admin-data.service.ts",
            "properties": [
                {
                    "name": "settings$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.serverProperties)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<State>({ serverProperties: null })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {AdminControllerService} from \"@storydoc/services\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {StoryDocServerProperties} from \"@storydoc/models\";\nimport {map} from \"rxjs/operators\";\n\ninterface State {\n  serverProperties: StoryDocServerProperties;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminDataService {\n\n  constructor(private adminControllerService: AdminControllerService) { this.load()}\n\n  private store = new BehaviorSubject<State>({ serverProperties: null })\n\n  settings$ = this.store.asObservable().pipe(\n    map(state => state.serverProperties)\n  )\n\n  private load() {\n    this.adminControllerService.getConfigUsingGet({}).subscribe( serverProperties => this.store.next({ serverProperties }))\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "adminControllerService",
                        "type": "AdminControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "adminControllerService",
                        "type": "AdminControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ApiConfiguration",
            "id": "injectable-ApiConfiguration-db041dc06e29ffff133e6d5e32db744ae15b56d237310730b07121a087b880ef86bfa2e2e7295842e4664c922ffe09403d7b1d5a30d7ab08039b93a07ba2355e",
            "file": "src/app/api/api-configuration.ts",
            "properties": [
                {
                    "name": "rootUrl",
                    "defaultValue": "'http://localhost:8080'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Global configuration</p>\n",
            "rawdescription": "\n\nGlobal configuration\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = 'http://localhost:8080';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n",
            "type": "injectable"
        },
        {
            "name": "ArtifactDataService",
            "id": "injectable-ArtifactDataService-dc129df091bff54566e375bf93d91f0f3aeb8acb66a3a46bf8084268a069803e0f636a26dbf5212fa1f8acea601ff713e9964a8d8b9563eb0eca5a66d79014a0",
            "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "descriptor",
                    "args": [
                        {
                            "name": "artifactType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ArtifactDescriptor",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "artifactType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "ArtifactDescriptor[]",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\n\nexport interface ArtifactDescriptor {\n  key: string\n  icon: string\n  label: string\n  editorUrl: string\n}\n\nlet timeLineModel = {\n  key: 'io.storydoc.server.timeline.domain.TimeLineModel',\n  icon: '/assets/timeline.png',\n  label: 'Timeline',\n  editorUrl: '/fe/timeline'\n\n} as ArtifactDescriptor\n\nlet uiScenario = {\n  key: 'io.storydoc.server.ui.domain.UIScenario',\n  icon: '/assets/artifact-ui-scenario.png',\n  label: 'UI Scenario',\n  editorUrl: '/fe/ui-scenario'\n\n} as ArtifactDescriptor\n\nlet uiScreenshotCollection = {\n  key: 'io.storydoc.server.ui.domain.ScreenShotCollection',\n  icon: '/assets/artifact-ui-design.png',\n  label: 'UI Screenshot collection',\n  editorUrl: '/fe/ui-screenshot-collection'\n} as ArtifactDescriptor\n\nlet uiScreenDesign = {\n  key: 'io.storydoc.server.ui.domain.screendesign.ScreenDesign',\n  icon: '/assets/artifact-ui-design.png',\n  label: 'Screen design',\n  editorUrl: '/fe/ui-screen-design'\n\n} as ArtifactDescriptor\n\nlet codeExecution = {\n  key: 'io.storydoc.server.code.domain.CodeExecution',\n  icon: '/assets/test-script.png',\n  label: 'Code Execution',\n  editorUrl: '/fe/code-trace'\n} as ArtifactDescriptor\n\nlet sourceCodeConfig = {\n  key: 'io.storydoc.server.code.domain.SourceCodeConfig',\n  icon: '/assets/config.png',\n  label: 'SourceCode Config',\n  editorUrl: '/fe/source-code-config'\n} as ArtifactDescriptor\n\nlet map: { [key: string]: ArtifactDescriptor } = {\n  'io.storydoc.server.timeline.domain.TimeLineModel': timeLineModel,\n  'io.storydoc.server.ui.domain.screendesign.ScreenDesign': uiScreenDesign,\n  'io.storydoc.server.ui.domain.UIScenario': uiScenario,\n  'io.storydoc.server.ui.domain.ScreenShotCollection': uiScreenshotCollection,\n  'io.storydoc.server.code.domain.CodeExecution': codeExecution,\n  'io.storydoc.server.code.domain.SourceCodeConfig': sourceCodeConfig\n}\n\nlet list: ArtifactDescriptor[] = [\n  timeLineModel,\n  uiScreenDesign,\n  uiScenario,\n  uiScreenshotCollection,\n  codeExecution,\n  sourceCodeConfig\n]\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArtifactDataService {\n\n  descriptor(artifactType: string): ArtifactDescriptor {\n    return map[artifactType]\n  }\n\n  list(): ArtifactDescriptor[] {\n    return list\n  }\n\n}\n",
            "type": "injectable"
        },
        {
            "name": "ArtifactSelectionService",
            "id": "injectable-ArtifactSelectionService-cd1eed529386779a94301664832feb5a59671b19cd6284366a72856f1710dca53c4866383e13d43c6b5010a8b8ad98b26c251f789d1c0489768baa49acf8f72b",
            "file": "src/app/document/document-page/artifact-selection-dialog/artifact-selection.service.ts",
            "properties": [
                {
                    "name": "artifacts$",
                    "defaultValue": "new BehaviorSubject<ArtifactDto[]>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "artifactType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blockCoord",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "artifactType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blockCoord",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {ArtifactDto, BlockCoordinate, BlockDto} from \"@storydoc/models\";\nimport {StoryDocRestControllerService} from \"@storydoc/services\";\nimport {BehaviorSubject} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArtifactSelectionService {\n\n  artifacts$ = new BehaviorSubject<ArtifactDto[]>(null)\n\n  constructor(private storyDocRestControllerService: StoryDocRestControllerService) { }\n\n  select(artifactType: string, blockCoord: BlockCoordinate) {\n    this.storyDocRestControllerService.getDocumentUsingGet({ id: blockCoord.storyDocId.id}).subscribe((storyDoc)=>{\n        let block: BlockDto = storyDoc.blocks.find((block)=> block.blockId.id===blockCoord.blockId.id)\n        let artifacts = block.artifacts.filter((artifact)=> artifact.artifactType===artifactType)\n        this.artifacts$.next(artifacts)\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storyDocRestControllerService",
                        "type": "StoryDocRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "storyDocRestControllerService",
                        "type": "StoryDocRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BaseService",
            "id": "injectable-BaseService-aa17020d3b263477ad20c7513d92cd15eaad1b8f29c1936606cba913bbe75d1bf3c4e7c112e28da035af8391d0a69fd770e37b5cbf86ec26eb83a0e6789cdbaa",
            "file": "src/app/api/base-service.ts",
            "properties": [
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Base class for services</p>\n",
            "rawdescription": "\n\nBase class for services\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "rootUrl": {
                    "name": "rootUrl",
                    "setSignature": {
                        "name": "rootUrl",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "rootUrl",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "rawdescription": "\n\nSets the root URL for API operations in this service.\n",
                        "description": "<p>Sets the root URL for API operations in this service.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "rootUrl",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "rootUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 24,
                        "rawdescription": "\n\nReturns the root url for all operations in this service. If not set directly in this\nservice, will fallback to `ApiConfiguration.rootUrl`.\n",
                        "description": "<p>Returns the root url for all operations in this service. If not set directly in this\nservice, will fallback to <code>ApiConfiguration.rootUrl</code>.</p>\n"
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "CodeRestControllerService",
            "id": "injectable-CodeRestControllerService-8a60cc14dbf4be0d4836d3bd273fce273a60436225b94c649b78c41d85942d5416390c22dd69e9f4f2c0301f6331f9ec00463c583de84b1004c817e9b13b105b",
            "file": "src/app/api/services/code-rest-controller.service.ts",
            "properties": [
                {
                    "name": "CreateCodeExecutionUsingPostPath",
                    "defaultValue": "'/api/code/codeexecution'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createCodeExecutionUsingPost</p>\n",
                    "line": 172,
                    "rawdescription": "\n\nPath part for operation createCodeExecutionUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "CreateSourceConfigUsingPostPath",
                    "defaultValue": "'/api/code/sourcecodeconfig'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createSourceConfigUsingPost</p>\n",
                    "line": 669,
                    "rawdescription": "\n\nPath part for operation createSourceConfigUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetBluePrintUsingGetPath",
                    "defaultValue": "'/api/code/blueprint'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getBluePrintUsingGet</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nPath part for operation getBluePrintUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetCodeExecutionUsingGetPath",
                    "defaultValue": "'/api/code/codeexecution'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getCodeExecutionUsingGet</p>\n",
                    "line": 88,
                    "rawdescription": "\n\nPath part for operation getCodeExecutionUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSourceConfigUsingGetPath",
                    "defaultValue": "'/api/code/sourcecodeconfig'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSourceConfigUsingGet</p>\n",
                    "line": 585,
                    "rawdescription": "\n\nPath part for operation getSourceConfigUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "SetConfigForCodeExecutionUsingPostPath",
                    "defaultValue": "'/api/code/codeexecution/config'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation setConfigForCodeExecutionUsingPost</p>\n",
                    "line": 256,
                    "rawdescription": "\n\nPath part for operation setConfigForCodeExecutionUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "SetSourcePathUsingPostPath",
                    "defaultValue": "'/api/code/sourcecodeconfig/path'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation setSourcePathUsingPost</p>\n",
                    "line": 753,
                    "rawdescription": "\n\nPath part for operation setSourcePathUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "SetStitchDetailsForCodeExecutionUsingPostPath",
                    "defaultValue": "'/api/code/codeexecution/stitch'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation setStitchDetailsForCodeExecutionUsingPost</p>\n",
                    "line": 373,
                    "rawdescription": "\n\nPath part for operation setStitchDetailsForCodeExecutionUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "SourceUsingGetPath",
                    "defaultValue": "'/api/code/source'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation sourceUsingGet</p>\n",
                    "line": 490,
                    "rawdescription": "\n\nPath part for operation sourceUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createCodeExecutionUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CodeExecutionCoordinate>",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateCodeExecution.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createCodeExecutionUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createCodeExecution.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createCodeExecutionUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCodeExecutionUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<CodeExecutionCoordinate>>",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateCodeExecution.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createCodeExecutionUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createCodeExecution.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createCodeExecutionUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSourceConfigUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SourceCodeConfigCoordinate>",
                    "typeParameters": [],
                    "line": 727,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateSourceConfig.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createSourceConfigUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createSourceConfig.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createSourceConfigUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSourceConfigUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SourceCodeConfigCoordinate>>",
                    "typeParameters": [],
                    "line": 681,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateSourceConfig.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createSourceConfigUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createSourceConfig.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createSourceConfigUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBluePrintUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BluePrint>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetBluePrint.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getBluePrintUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getBluePrint.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getBluePrintUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBluePrintUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<BluePrint>>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetBluePrint.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getBluePrintUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getBluePrint.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getBluePrintUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCodeExecutionUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CodeTraceDto>",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetCodeExecution.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getCodeExecutionUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getCodeExecution.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getCodeExecutionUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCodeExecutionUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<CodeTraceDto>>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetCodeExecution.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getCodeExecutionUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getCodeExecution.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getCodeExecutionUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSourceConfigUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SourceCodeConfigDto>",
                    "typeParameters": [],
                    "line": 643,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSourceConfig.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSourceConfigUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSourceConfig.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSourceConfigUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSourceConfigUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SourceCodeConfigDto>>",
                    "typeParameters": [],
                    "line": 597,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSourceConfig.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSourceConfigUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSourceConfig.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSourceConfigUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setConfigForCodeExecutionUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 332,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetConfigForCodeExecution.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `setConfigForCodeExecutionUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>setConfigForCodeExecution.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>setConfigForCodeExecutionUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setConfigForCodeExecutionUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetConfigForCodeExecution.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `setConfigForCodeExecutionUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>setConfigForCodeExecution.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>setConfigForCodeExecutionUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSourcePathUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 817,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetSourcePath.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `setSourcePathUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>setSourcePath.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>setSourcePathUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSourcePathUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 765,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetSourcePath.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `setSourcePathUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>setSourcePath.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>setSourcePathUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStitchDetailsForCodeExecutionUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 449,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetStitchDetailsForCodeExecution.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `setStitchDetailsForCodeExecutionUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>setStitchDetailsForCodeExecution.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>setStitchDetailsForCodeExecutionUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStitchDetailsForCodeExecutionUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetStitchDetailsForCodeExecution.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `setStitchDetailsForCodeExecutionUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>setStitchDetailsForCodeExecution.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>setStitchDetailsForCodeExecutionUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sourceUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SourceCodeDto>",
                    "typeParameters": [],
                    "line": 554,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsource.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `sourceUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>source.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>sourceUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sourceUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SourceCodeDto>>",
                    "typeParameters": [],
                    "line": 502,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsource.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `sourceUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>source.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>sourceUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Code Rest Controller</p>\n",
            "rawdescription": "\n\nCode Rest Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { BluePrint } from '../models/blue-print';\nimport { CodeExecutionCoordinate } from '../models/code-execution-coordinate';\nimport { CodeTraceDto } from '../models/code-trace-dto';\nimport { SourceCodeConfigCoordinate } from '../models/source-code-config-coordinate';\nimport { SourceCodeConfigDto } from '../models/source-code-config-dto';\nimport { SourceCodeDto } from '../models/source-code-dto';\n\n\n/**\n * Code Rest Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CodeRestControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getBluePrintUsingGet\n   */\n  static readonly GetBluePrintUsingGetPath = '/api/code/blueprint';\n\n  /**\n   * getBluePrint.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBluePrintUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBluePrintUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<BluePrint>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CodeRestControllerService.GetBluePrintUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<BluePrint>;\n      })\n    );\n  }\n\n  /**\n   * getBluePrint.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getBluePrintUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBluePrintUsingGet(params?: {\n  }): Observable<BluePrint> {\n\n    return this.getBluePrintUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<BluePrint>) => r.body as BluePrint)\n    );\n  }\n\n  /**\n   * Path part for operation getCodeExecutionUsingGet\n   */\n  static readonly GetCodeExecutionUsingGetPath = '/api/code/codeexecution';\n\n  /**\n   * getCodeExecution.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCodeExecutionUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCodeExecutionUsingGet$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * codeExecutionId\n     */\n    codeExecutionId: string;\n  }): Observable<StrictHttpResponse<CodeTraceDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CodeRestControllerService.GetCodeExecutionUsingGetPath, 'get');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('codeExecutionId', params.codeExecutionId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CodeTraceDto>;\n      })\n    );\n  }\n\n  /**\n   * getCodeExecution.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCodeExecutionUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCodeExecutionUsingGet(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * codeExecutionId\n     */\n    codeExecutionId: string;\n  }): Observable<CodeTraceDto> {\n\n    return this.getCodeExecutionUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<CodeTraceDto>) => r.body as CodeTraceDto)\n    );\n  }\n\n  /**\n   * Path part for operation createCodeExecutionUsingPost\n   */\n  static readonly CreateCodeExecutionUsingPostPath = '/api/code/codeexecution';\n\n  /**\n   * createCodeExecution.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createCodeExecutionUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createCodeExecutionUsingPost$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<StrictHttpResponse<CodeExecutionCoordinate>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CodeRestControllerService.CreateCodeExecutionUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CodeExecutionCoordinate>;\n      })\n    );\n  }\n\n  /**\n   * createCodeExecution.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createCodeExecutionUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createCodeExecutionUsingPost(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<CodeExecutionCoordinate> {\n\n    return this.createCodeExecutionUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<CodeExecutionCoordinate>) => r.body as CodeExecutionCoordinate)\n    );\n  }\n\n  /**\n   * Path part for operation setConfigForCodeExecutionUsingPost\n   */\n  static readonly SetConfigForCodeExecutionUsingPostPath = '/api/code/codeexecution/config';\n\n  /**\n   * setConfigForCodeExecution.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `setConfigForCodeExecutionUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  setConfigForCodeExecutionUsingPost$Response(params: {\n\n    /**\n     * execStoryDocId\n     */\n    execStoryDocId: string;\n\n    /**\n     * execBlockId\n     */\n    execBlockId: string;\n\n    /**\n     * codeExecutionId\n     */\n    codeExecutionId: string;\n\n    /**\n     * configStoryDocId\n     */\n    configStoryDocId: string;\n\n    /**\n     * configBlockId\n     */\n    configBlockId: string;\n\n    /**\n     * sourceCodeConfigId\n     */\n    sourceCodeConfigId: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CodeRestControllerService.SetConfigForCodeExecutionUsingPostPath, 'post');\n    if (params) {\n      rb.query('execStoryDocId', params.execStoryDocId, {\"style\":\"form\"});\n      rb.query('execBlockId', params.execBlockId, {\"style\":\"form\"});\n      rb.query('codeExecutionId', params.codeExecutionId, {\"style\":\"form\"});\n      rb.query('configStoryDocId', params.configStoryDocId, {\"style\":\"form\"});\n      rb.query('configBlockId', params.configBlockId, {\"style\":\"form\"});\n      rb.query('sourceCodeConfigId', params.sourceCodeConfigId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * setConfigForCodeExecution.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `setConfigForCodeExecutionUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  setConfigForCodeExecutionUsingPost(params: {\n\n    /**\n     * execStoryDocId\n     */\n    execStoryDocId: string;\n\n    /**\n     * execBlockId\n     */\n    execBlockId: string;\n\n    /**\n     * codeExecutionId\n     */\n    codeExecutionId: string;\n\n    /**\n     * configStoryDocId\n     */\n    configStoryDocId: string;\n\n    /**\n     * configBlockId\n     */\n    configBlockId: string;\n\n    /**\n     * sourceCodeConfigId\n     */\n    sourceCodeConfigId: string;\n  }): Observable<void> {\n\n    return this.setConfigForCodeExecutionUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation setStitchDetailsForCodeExecutionUsingPost\n   */\n  static readonly SetStitchDetailsForCodeExecutionUsingPostPath = '/api/code/codeexecution/stitch';\n\n  /**\n   * setStitchDetailsForCodeExecution.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `setStitchDetailsForCodeExecutionUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  setStitchDetailsForCodeExecutionUsingPost$Response(params: {\n\n    /**\n     * execStoryDocId\n     */\n    execStoryDocId: string;\n\n    /**\n     * execBlockId\n     */\n    execBlockId: string;\n\n    /**\n     * codeExecutionId\n     */\n    codeExecutionId: string;\n\n    /**\n     * stitchFile\n     */\n    stitchFile: string;\n\n    /**\n     * testClass\n     */\n    testClass: string;\n\n    /**\n     * testMethod\n     */\n    testMethod: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CodeRestControllerService.SetStitchDetailsForCodeExecutionUsingPostPath, 'post');\n    if (params) {\n      rb.query('execStoryDocId', params.execStoryDocId, {\"style\":\"form\"});\n      rb.query('execBlockId', params.execBlockId, {\"style\":\"form\"});\n      rb.query('codeExecutionId', params.codeExecutionId, {\"style\":\"form\"});\n      rb.query('stitchFile', params.stitchFile, {\"style\":\"form\"});\n      rb.query('testClass', params.testClass, {\"style\":\"form\"});\n      rb.query('testMethod', params.testMethod, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * setStitchDetailsForCodeExecution.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `setStitchDetailsForCodeExecutionUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  setStitchDetailsForCodeExecutionUsingPost(params: {\n\n    /**\n     * execStoryDocId\n     */\n    execStoryDocId: string;\n\n    /**\n     * execBlockId\n     */\n    execBlockId: string;\n\n    /**\n     * codeExecutionId\n     */\n    codeExecutionId: string;\n\n    /**\n     * stitchFile\n     */\n    stitchFile: string;\n\n    /**\n     * testClass\n     */\n    testClass: string;\n\n    /**\n     * testMethod\n     */\n    testMethod: string;\n  }): Observable<void> {\n\n    return this.setStitchDetailsForCodeExecutionUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation sourceUsingGet\n   */\n  static readonly SourceUsingGetPath = '/api/code/source';\n\n  /**\n   * source.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `sourceUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  sourceUsingGet$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * sourceCodeConfigId\n     */\n    sourceCodeConfigId: string;\n\n    /**\n     * className\n     */\n    className?: string;\n  }): Observable<StrictHttpResponse<SourceCodeDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CodeRestControllerService.SourceUsingGetPath, 'get');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('sourceCodeConfigId', params.sourceCodeConfigId, {\"style\":\"form\"});\n      rb.query('className', params.className, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SourceCodeDto>;\n      })\n    );\n  }\n\n  /**\n   * source.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `sourceUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  sourceUsingGet(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * sourceCodeConfigId\n     */\n    sourceCodeConfigId: string;\n\n    /**\n     * className\n     */\n    className?: string;\n  }): Observable<SourceCodeDto> {\n\n    return this.sourceUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<SourceCodeDto>) => r.body as SourceCodeDto)\n    );\n  }\n\n  /**\n   * Path part for operation getSourceConfigUsingGet\n   */\n  static readonly GetSourceConfigUsingGetPath = '/api/code/sourcecodeconfig';\n\n  /**\n   * getSourceConfig.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSourceConfigUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSourceConfigUsingGet$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * sourceCodeConfigId\n     */\n    sourceCodeConfigId: string;\n  }): Observable<StrictHttpResponse<SourceCodeConfigDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CodeRestControllerService.GetSourceConfigUsingGetPath, 'get');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('sourceCodeConfigId', params.sourceCodeConfigId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SourceCodeConfigDto>;\n      })\n    );\n  }\n\n  /**\n   * getSourceConfig.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSourceConfigUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSourceConfigUsingGet(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * sourceCodeConfigId\n     */\n    sourceCodeConfigId: string;\n  }): Observable<SourceCodeConfigDto> {\n\n    return this.getSourceConfigUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<SourceCodeConfigDto>) => r.body as SourceCodeConfigDto)\n    );\n  }\n\n  /**\n   * Path part for operation createSourceConfigUsingPost\n   */\n  static readonly CreateSourceConfigUsingPostPath = '/api/code/sourcecodeconfig';\n\n  /**\n   * createSourceConfig.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createSourceConfigUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createSourceConfigUsingPost$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<StrictHttpResponse<SourceCodeConfigCoordinate>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CodeRestControllerService.CreateSourceConfigUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SourceCodeConfigCoordinate>;\n      })\n    );\n  }\n\n  /**\n   * createSourceConfig.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createSourceConfigUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createSourceConfigUsingPost(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<SourceCodeConfigCoordinate> {\n\n    return this.createSourceConfigUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<SourceCodeConfigCoordinate>) => r.body as SourceCodeConfigCoordinate)\n    );\n  }\n\n  /**\n   * Path part for operation setSourcePathUsingPost\n   */\n  static readonly SetSourcePathUsingPostPath = '/api/code/sourcecodeconfig/path';\n\n  /**\n   * setSourcePath.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `setSourcePathUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  setSourcePathUsingPost$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * sourceCodeConfigId\n     */\n    sourceCodeConfigId: string;\n\n    /**\n     * path\n     */\n    path: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CodeRestControllerService.SetSourcePathUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('sourceCodeConfigId', params.sourceCodeConfigId, {\"style\":\"form\"});\n      rb.query('path', params.path, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * setSourcePath.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `setSourcePathUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  setSourcePathUsingPost(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * sourceCodeConfigId\n     */\n    sourceCodeConfigId: string;\n\n    /**\n     * path\n     */\n    path: string;\n  }): Observable<void> {\n\n    return this.setSourcePathUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "CodeService",
            "id": "injectable-CodeService-fa060b1484e9e161c768920850970c07c3e4e44dac5b4cf1f18b739d54d3cd32cfdfb8420503188d49f6b72ec68b0d6abc4a9a748090df6140c47c9dd34cff67",
            "file": "src/app/code/code.service.ts",
            "properties": [
                {
                    "name": "blueprint$",
                    "defaultValue": "this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 147
                },
                {
                    "name": "bluePrintDiagram$",
                    "defaultValue": "this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "bluePrintStore",
                    "defaultValue": "new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 145,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "codeTrace$",
                    "defaultValue": "this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "codeTraceCoord$",
                    "defaultValue": "this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "config$",
                    "defaultValue": "this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "configStore",
                    "defaultValue": "new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 135,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedEvent$",
                    "defaultValue": "this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "sourceCode$",
                    "defaultValue": "this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "sourceCodeStore",
                    "defaultValue": "new BehaviorSubject<SourceCodeStoreState>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "traceStore",
                    "defaultValue": "new BehaviorSubject<TraceStoreState>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "treeNodes$",
                    "defaultValue": "this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "methods": [
                {
                    "name": "addPathToConfig",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getClassName",
                    "args": [
                        {
                            "name": "item",
                            "type": "CodeExecutionEnterEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 363,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CodeExecutionEnterEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLabel",
                    "args": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadConfig",
                    "args": [
                        {
                            "name": "coord",
                            "type": "SourceCodeConfigCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coord",
                            "type": "SourceCodeConfigCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSourceCode",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTrace",
                    "args": [
                        {
                            "name": "coord",
                            "type": "CodeExecutionCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coord",
                            "type": "CodeExecutionCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCodeExecutionConfig",
                    "args": [
                        {
                            "name": "blockCoordinate",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "artifactId",
                            "type": "ArtifactId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "blockCoordinate",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "artifactId",
                            "type": "ArtifactId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStitchDetails",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toStitchEvent",
                    "args": [
                        {
                            "name": "item",
                            "type": "StitchItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StitchEvent",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "StitchItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTreeNodes",
                    "args": [
                        {
                            "name": "items",
                            "type": "StitchItemDto[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TreeNode[]",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "StitchItemDto[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {\n  ArtifactDto,\n  ArtifactId,\n  BlockCoordinate,\n  CodeExecutionCoordinate,\n  CodeTraceDto,\n  SourceCodeConfigCoordinate,\n  SourceCodeConfigDto,\n  SourceCodeDto,\n  StitchItemDto\n} from \"@storydoc/models\";\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {BluePrint} from \"../api/models/blue-print\";\n\nexport interface StitchEvent {\n  modelName: string\n  eventName: string\n}\n\nexport interface CodeExecutionEnterEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionEnterEvent(event: StitchEvent): event is CodeExecutionEnterEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodCalled'\n}\n\nexport interface CodeExecutionReturnEvent extends StitchEvent {\n  className: string,\n  methodName: string\n}\n\nexport function isCodeExecutionReturnEvent(event: StitchEvent): event is CodeExecutionReturnEvent {\n  return event.modelName === 'CodeExecution' && event.eventName === 'MethodReturn'\n}\n\nexport interface TestCaseBDDEvent extends StitchEvent {\n  noun: string\n  text: string\n}\n\nexport function isCodeTestCaseBDDEvent(event: StitchEvent): event is TestCaseBDDEvent {\n  return event.modelName === 'TestScenario' && event.eventName === 'given'\n}\n\n\ninterface TraceStoreState {\n  coord?: CodeExecutionCoordinate,\n  codeTrace?: CodeTraceDto\n  treeNodes?: TreeNode[]\n  selectedEvent?: StitchEvent,\n}\n\ninterface SourceCodeStoreState {\n  className?: string,\n  sourceCode?: SourceCodeDto\n}\n\ninterface SourceCodeConfigStoreState {\n  coord: SourceCodeConfigCoordinate,\n  sourceCodeConfig?: SourceCodeConfigDto\n}\n\ninterface ConfigPanelState {\n  configs: ArtifactDto[]\n}\n\nexport interface TreeNode {\n  name: string,\n  children: TreeNode[]\n}\n\n// blueprint diagram\n\nexport interface DiagramPoint {\n  x: number,\n  y: number\n}\n\nexport interface BluePrintDiagram {\n  name: string,\n  x: number,\n  y: number,\n  children: BluePrintDiagram[]\n}\n\ninterface BlueprintStoreState {\n  bluePrint: BluePrint\n  bluePrintDiagram: BluePrintDiagram\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeService implements OnDestroy {\n\n  constructor(private codeRestControllerService: CodeRestControllerService) {\n    this.init()\n  }\n\n  private traceStore = new BehaviorSubject<TraceStoreState>({})\n\n  codeTraceCoord$ = this.traceStore.pipe(\n    map(state => state.coord),\n    distinctUntilChanged(),\n  )\n\n  codeTrace$ = this.traceStore.pipe(\n    map(state => state.codeTrace),\n    distinctUntilChanged(),\n  )\n\n  treeNodes$ = this.traceStore.pipe(\n    map(state => state.treeNodes),\n    distinctUntilChanged(),\n  )\n\n  selectedEvent$ = this.traceStore.pipe(\n    map(state => state.selectedEvent),\n    distinctUntilChanged(),\n  )\n\n  private sourceCodeStore = new BehaviorSubject<SourceCodeStoreState>({})\n\n  sourceCode$ = this.sourceCodeStore.pipe(\n    map(state => state.sourceCode),\n    distinctUntilChanged(),\n  )\n\n  private configStore = new BehaviorSubject<SourceCodeConfigStoreState>({\n    coord: null,\n    sourceCodeConfig: null\n  })\n\n  config$ = this.configStore.pipe(\n    map(state => state.sourceCodeConfig),\n    distinctUntilChanged(),\n  )\n\n  private bluePrintStore = new BehaviorSubject<BlueprintStoreState>({bluePrint: null, bluePrintDiagram: null})\n\n  blueprint$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrint),\n    distinctUntilChanged(),\n  )\n\n  bluePrintDiagram$ = this.bluePrintStore.pipe(\n    map(state => state.bluePrintDiagram),\n    distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('traceStore::codeTrace$ >>', this.codeTrace$))\n    this.subscriptions.push(logChangesToObservable('traceStore::selectedItem$ >> ', this.selectedEvent$))\n    this.subscriptions.push(logChangesToObservable('traceStore::treeNodes$ >> ', this.treeNodes$))\n    this.subscriptions.push(logChangesToObservable('sourceCodeStore::sourceCode$ >> ', this.sourceCode$))\n    this.subscriptions.push(logChangesToObservable('configStore >> ', this.configStore))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      if (isCodeExecutionEnterEvent(event)) {\n        log('selectedItem$ -> loadSourceCode()')\n        this.loadSourceCode(event.className)\n      }\n    }))\n    this.subscriptions.push(this.selectedEvent$.subscribe(event => {\n      if (!event) return\n      log('selectedItem$ -> createDiagram()')\n      this.createDiagram()\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadTrace(coord: CodeExecutionCoordinate) {\n    log('loadTrace(coord)', coord)\n    this.codeRestControllerService.getCodeExecutionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      codeExecutionId: coord.codeExecutionId.id\n    })\n      .subscribe((codeTrace: CodeTraceDto) => {\n        this.traceStore.next({\n          coord: coord,\n          codeTrace,\n          treeNodes: codeTrace ? this.toTreeNodes(codeTrace.items) : null\n        })\n        this.loadConfig(codeTrace.config)\n        this.selectNode(codeTrace.items[0])\n      })\n    this.codeRestControllerService.getBluePrintUsingGet({}).subscribe(blueprint => {\n      this.bluePrintStore.next({\n        ...this.bluePrintStore.value,\n        bluePrint: blueprint\n      })\n    })\n  }\n\n  selectNode(node) {\n    log('selectNode(node)', node)\n    this.traceStore.next({\n      ...this.traceStore.getValue(),\n      selectedEvent: node.data.event\n    })\n  }\n\n  loadSourceCode(className: string) {\n    log('loadSourceCode(className)', className)\n    if (!className || !this.traceStore.getValue().codeTrace) return\n    let configCoord = this.traceStore.getValue().codeTrace.config\n    this.codeRestControllerService.sourceUsingGet({\n      storyDocId: configCoord.blockCoordinate.storyDocId.id,\n      blockId: configCoord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: configCoord.sourceCodeConfigId.id,\n      className\n    })\n      .subscribe(sourceCode => this.sourceCodeStore.next({className, sourceCode}))\n  }\n\n\n  loadConfig(coord: SourceCodeConfigCoordinate) {\n    log('loadConfig(coord)', coord)\n    this.codeRestControllerService.getSourceConfigUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id\n    }).subscribe(config => this.configStore.next({\n      coord,\n      sourceCodeConfig: config\n    }))\n\n  }\n\n  addPathToConfig(path: string) {\n    log('addPathToConfig(path)', path)\n    let coord = this.configStore.getValue().coord\n    this.codeRestControllerService.setSourcePathUsingPost({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      sourceCodeConfigId: coord.sourceCodeConfigId.id,\n      path\n    }).subscribe(() => {\n      this.loadConfig(coord)\n    })\n\n  }\n\n  setCodeExecutionConfig(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    log('setCodeExecutionConfig(blockCoordinate, artifactId)', blockCoordinate, artifactId)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setConfigForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      configStoryDocId: blockCoordinate.storyDocId.id,\n      configBlockId: blockCoordinate.blockId.id,\n      sourceCodeConfigId: artifactId.id,\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n  setStitchDetails(param: { stitchFile: string; testMethod: string; testClass: string }) {\n    log('setStitchDetails(param)', param)\n    let traceCoord = this.traceStore.getValue().coord\n    this.codeRestControllerService.setStitchDetailsForCodeExecutionUsingPost({\n      execStoryDocId: traceCoord.blockCoordinate.storyDocId.id,\n      execBlockId: traceCoord.blockCoordinate.blockId.id,\n      codeExecutionId: traceCoord.codeExecutionId.id,\n      stitchFile: param.stitchFile,\n      testClass: param.testClass,\n      testMethod: param.testMethod\n    }).subscribe(() => this.loadTrace(traceCoord))\n  }\n\n\n  // stitch dto to tree node conversion\n\n  private toTreeNodes(items: StitchItemDto[]): TreeNode[] {\n    if (!items) return\n    return items.map(item => {\n      let event = this.toStitchEvent(item)\n      return {\n        event,\n        name: this.getLabel(event),\n        children: this.toTreeNodes(item.children)\n      }\n    })\n  }\n\n  private toStitchEvent(item: StitchItemDto): StitchEvent {\n    switch (item.modelName) {\n      case 'CodeExecution': {\n        switch (item.eventName) {\n          case 'MethodCalled': {\n            return <CodeExecutionEnterEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          case 'MethodReturn': {\n            return <CodeExecutionReturnEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              className: item.attributes['typeName'],\n              methodName: item.attributes['functionName']\n            }\n          }\n          default: {\n            console.log('unmapped CodeExecution event, eventName not supported  ', item)\n            return\n          }\n        }\n      }\n      case 'TestScenario': {\n        switch (item.eventName) {\n          case 'given': {\n            return <TestCaseBDDEvent>{\n              modelName: item.modelName,\n              eventName: item.eventName,\n              noun: item.attributes['noun'],\n              text: item.attributes['text']\n            }\n          }\n          default: {\n            console.log('unmapped TestScenario event, eventName not supported ', item)\n            return\n          }\n        }\n      }\n      default: {\n        console.log('unmapped event. model not supported ', item)\n        return\n      }\n    }\n\n  }\n\n  private getLabel(event: StitchEvent): string {\n    if (!event) return \"empty event\"\n    if (isCodeExecutionEnterEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeExecutionReturnEvent(event)) {\n      return this.getClassName(event) + ' :: ' + event.methodName\n    }\n    if (isCodeTestCaseBDDEvent(event)) {\n      return event.noun + ' :: ' + event.text\n    }\n    return ''\n\n  }\n\n  private getClassName(item: CodeExecutionEnterEvent) {\n    return item.className?.split('.').slice(-1)[0]\n  }\n\n  //  blueprint panel section\n\n  createDiagram() {\n    log('createDiagram()')\n    this.bluePrintStore.next({\n      ...this.bluePrintStore.value,\n      bluePrintDiagram: {\n        name: 'Storydoc Backend',\n        x: 0,\n        y: 0,\n        children: [\n          <BluePrintDiagram>{\n            name: 'Code Domain',\n            children: []\n          }\n        ]\n      }\n    })\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "codeRestControllerService",
                        "type": "CodeRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "codeRestControllerService",
                        "type": "CodeRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DBDataService",
            "id": "injectable-DBDataService-916904f5da2d9bee2fee33ab0af944d7c9c2930842cd315b1ce4eaed72cb757785b25efee65b7ba33f0f8d95004646cf26e8becf48f5580e0e258388a2ac03e7",
            "file": "src/app/db/dbdata-page/dbdata.service.ts",
            "properties": [
                {
                    "name": "dataSet$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.dataSet)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "state$",
                    "defaultValue": "this.store.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<State>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTableData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logStateChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {DbDataSetDto, NavigationModelDto} from \"@storydoc/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {SqldbControllerService} from \"@storydoc/services\";\nimport {log} from '@storydoc/common'\n\ninterface State {\n  dataSet?: DbDataSetDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DBDataService implements  OnDestroy{\n\n  constructor(private dbControllerService: SqldbControllerService) { this.init() }\n\n  private store = new BehaviorSubject<State>({})\n  state$ = this.store.asObservable()\n\n  dataSet$ = this.store.asObservable().pipe(\n    map(state => state.dataSet)\n  )\n\n  private get dataset(): DbDataSetDto {\n    return <DbDataSetDto> this.store.getValue().dataSet\n  }\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(this.logStateChanges())\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n\n  load() {\n    this.dbControllerService.getDbDataSetUsingGet({}).subscribe( dataSet => this.store.next({ dataSet }))\n  }\n\n\n\n  addTableData() {\n    this.dataset.tableDataSets.push({})\n    this.store.next({\n      dataSet: {\n        tableDataSets: this.dataset.tableDataSets\n      }\n    })\n  }\n\n  private logStateChanges() {\n    return this.state$.subscribe((state)=> { log('   state$ >> ', state) })\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dbControllerService",
                        "type": "SqldbControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dbControllerService",
                        "type": "SqldbControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "dataset": {
                    "name": "dataset",
                    "getSignature": {
                        "name": "dataset",
                        "type": "",
                        "returnType": "DbDataSetDto",
                        "line": 26
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "DBNavigationService",
            "id": "injectable-DBNavigationService-6eb63d542cd3b040728a83bccb85f1c06b49b8e43b17825e7a4d6bede290549f9846b93a8983e05063305b113e3adb834e6a60175d218359d4808116d1953581",
            "file": "src/app/db/dbnavigation-page/dbnavigation.service.ts",
            "properties": [
                {
                    "name": "navigationModel$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.navigationModel)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<State>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {SqldbControllerService} from \"@storydoc/services\";\nimport {NavigationModelDto} from \"@storydoc/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\ninterface State {\n  navigationModel?: NavigationModelDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DBNavigationService {\n\n  constructor(private sqldbControllerService: SqldbControllerService) { }\n\n  private store = new BehaviorSubject<State>({})\n\n  navigationModel$ = this.store.asObservable().pipe(\n    map(state => state.navigationModel)\n  )\n\n  init() {\n    this.sqldbControllerService.getNavigationModelUsingGet().subscribe((navigationModel)=>\n      this.store.next({...this.store.getValue(), navigationModel})\n    )\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sqldbControllerService",
                        "type": "SqldbControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "sqldbControllerService",
                        "type": "SqldbControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DocumentDataService",
            "id": "injectable-DocumentDataService-b9ef6b3435a6dee3b8baa0317a3ae0064619401810c159aee15f5a37c808152fdc6207042686af91d3b437bf8f72089388a5a367ecf9e61a06c192dbe613f68e",
            "file": "src/app/document/document-page/document-data.service.ts",
            "properties": [
                {
                    "name": "selectedBlock$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.selectedBlock)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<DocumentState>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "storyDoc$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.storyDoc)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "addArtifact",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addBlock",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteArtifact",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBlock",
                    "args": [
                        {
                            "name": "blockId",
                            "type": "BlockId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "blockId",
                            "type": "BlockId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "renameArtifact",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameBlock",
                    "args": [
                        {
                            "name": "blockId",
                            "type": "BlockId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "blockId",
                            "type": "BlockId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectBlock",
                    "args": [
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {ArtifactId, BlockDto, BlockId, StoryDocDto, StoryDocId} from \"@storydoc/models\";\nimport {CodeRestControllerService, ScreenDesignRestControllerService, StoryDocRestControllerService, TimeLineControllerService, UiRestControllerService} from \"@storydoc/services\";\n\ninterface DocumentState {\n  id?: string\n  storyDoc?: StoryDocDto\n  selectedBlock?: BlockDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentDataService {\n\n  private store = new BehaviorSubject<DocumentState>({})\n\n  storyDoc$ = this.store.asObservable().pipe(\n    map(state => state.storyDoc)\n  )\n\n  selectedBlock$ = this.store.asObservable().pipe(\n    map(state => state.selectedBlock)\n  )\n\n  private getId() {\n    return this.store.getValue()?.id;\n  }\n\n  constructor(\n    private storyDocRestControllerService: StoryDocRestControllerService,\n    private uiRestControllerService: UiRestControllerService,\n    private timeLineControllerService: TimeLineControllerService,\n    private codeRestControllerService: CodeRestControllerService,\n    private screenDesignRestControllerService : ScreenDesignRestControllerService,\n  ) {\n  }\n\n  private refresh() {\n    this.storyDocRestControllerService.getDocumentUsingGet({id: this.getId()}).subscribe({\n      next: storyDoc => this.store.next({...this.store.getValue(), storyDoc})\n    })\n  }\n\n  init(id: string) {\n    this.store.next({id, storyDoc: null})\n    this.refresh()\n  }\n\n  addBlock(name: string) {\n    this.storyDocRestControllerService.addBlockUsingPost({id: this.getId(), name}).subscribe({\n      next: value => this.refresh()\n    })\n  }\n\n  selectBlock(block: BlockDto) {\n    this.store.next({...this.store.getValue(), selectedBlock: block})\n  }\n\n  renameBlock(blockId: BlockId, name: string) {\n    this.storyDocRestControllerService.renameBlockUsingPut({\n      storyDocId: this.getId(),\n      blockId: blockId.id,\n      name\n    }).subscribe({\n      next: value => this.refresh()\n    })\n  }\n\n  deleteBlock(blockId: BlockId) {\n    this.storyDocRestControllerService.removeBlockUsingDelete({\n      storyDocId: this.getId(),\n      blockId: blockId.id\n    }).subscribe({\n      next: value => this.refresh()\n    })\n  }\n\n  addArtifact(param: { blockId: string; name: string; artifactType: string }) {\n    switch (param.artifactType) {\n      case 'io.storydoc.server.timeline.domain.TimeLineModel': {\n        this.timeLineControllerService.createTimeLineModelUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: (timeLineModelCoordinate) => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.ui.domain.screendesign.ScreenDesign': {\n        this.screenDesignRestControllerService.createScreenDesignUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: (coordinate) => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.ui.domain.UIScenario': {\n        this.uiRestControllerService.createUiScenarioUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: (uiScenarioCoordinate) => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.ui.domain.ScreenShotCollection': {\n        this.uiRestControllerService.createScreenShotCollectionUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: value => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.code.domain.CodeExecution': {\n        this.codeRestControllerService.createCodeExecutionUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: value => this.refresh()\n        })\n        break\n      }\n      case 'io.storydoc.server.code.domain.SourceCodeConfig': {\n        this.codeRestControllerService.createSourceConfigUsingPost({\n          storyDocId: this.getId(),\n          blockId: param.blockId,\n          name: param.name\n        }).subscribe({\n          next: value => this.refresh()\n        })\n        break\n      }\n    }\n  }\n\n  renameArtifact(params: { blockId: BlockId; name: string; artifactId: ArtifactId; storyDocId: StoryDocId }) {\n    this.storyDocRestControllerService.renameArtifactUsingPut({\n      storyDocId: params.storyDocId.id,\n      blockId: params.blockId.id,\n      artifactId: params.artifactId.id,\n      name: params.name\n    }).subscribe({\n      next: value => this.refresh()\n    })\n  }\n\n  deleteArtifact(params: { blockId: BlockId; artifactId: ArtifactId; storyDocId: StoryDocId }) {\n    this.storyDocRestControllerService.removeArtifactUsingDelete({\n      storyDocId: params.storyDocId.id,\n      blockId: params.blockId.id,\n      artifactId: params.artifactId.id,\n    }).subscribe({\n      next: value => this.refresh()\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storyDocRestControllerService",
                        "type": "StoryDocRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeLineControllerService",
                        "type": "TimeLineControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "codeRestControllerService",
                        "type": "CodeRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "screenDesignRestControllerService",
                        "type": "ScreenDesignRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "storyDocRestControllerService",
                        "type": "StoryDocRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeLineControllerService",
                        "type": "TimeLineControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "codeRestControllerService",
                        "type": "CodeRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "screenDesignRestControllerService",
                        "type": "ScreenDesignRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DocumentManagerService",
            "id": "injectable-DocumentManagerService-dd2feae79dc92ba85fd7d81087b5b6bf7da3c8b3afe784c449c80cbfa02d8f5695273c6e726a9e509ce601ea56c0a268ba51b9defc46ef8991fd513fdcf9a7e5",
            "file": "src/app/document/document-manager-page/document-manager.service.ts",
            "properties": [
                {
                    "name": "state$",
                    "defaultValue": "this.store.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<DocumentManagerState>({summaries: []})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "summaries$",
                    "defaultValue": "this.state$.pipe(\n    map(state => state.summaries)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [
                {
                    "name": "addDocument",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDocument",
                    "args": [
                        {
                            "name": "storyDocId",
                            "type": "StoryDocId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "storyDocId",
                            "type": "StoryDocId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshDocumentList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "renameDocument",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnInit} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {StoryDocId, StoryDocSummaryDto} from \"@storydoc/models\";\nimport {StoryDocRestControllerService} from \"@storydoc/services\";\n\ninterface DocumentManagerState {\n  summaries: StoryDocSummaryDto[]\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentManagerService implements OnInit {\n\n  constructor(private storyDocRestControllerService: StoryDocRestControllerService) {\n    this.refreshDocumentList()\n  }\n\n  private store = new BehaviorSubject<DocumentManagerState>({summaries: []})\n  private state$ = this.store.asObservable()\n\n  summaries$ = this.state$.pipe(\n    map(state => state.summaries)\n  )\n\n  ngOnInit(): void {\n  }\n\n  private refreshDocumentList() {\n    this.storyDocRestControllerService.getDocumentsUsingGet().subscribe({\n      next: summaries => this.store.next({summaries})\n    })\n  }\n\n  public addDocument(name: string) {\n    this.storyDocRestControllerService.createDocumentUsingPost({name}).subscribe({\n      next: value => this.refreshDocumentList()\n    })\n  }\n\n  public renameDocument(data: { storyDocId: StoryDocId, name: string }) {\n    this.storyDocRestControllerService.changeDocumentNameUsingPut({\n      storyDocId: data.storyDocId.id,\n      name: data.name\n    }).subscribe({\n      next: (value) => this.refreshDocumentList()\n    })\n  }\n\n  public deleteDocument(storyDocId: StoryDocId) {\n    this.storyDocRestControllerService.removeDocumentUsingDelete({\n      storyDocId: storyDocId.id,\n    }).subscribe({\n      next: (value) => this.refreshDocumentList()\n    })\n\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storyDocRestControllerService",
                        "type": "StoryDocRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "storyDocRestControllerService",
                        "type": "StoryDocRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LinkService",
            "id": "injectable-LinkService-5a171c0f5cc150291d323ca0fe5cd3c9aa08ea2dc8acd51684b64ae175db45f55e39d0d3193c2fb376b2010d58a24e151195515dcfb4422ebbbeb1d814adf562",
            "file": "src/app/common/link.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getScreenshotUrl",
                    "args": [
                        {
                            "name": "coordinate",
                            "type": "ScreenshotCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coordinate",
                            "type": "ScreenshotCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rootUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toStoryDoc",
                    "args": [
                        {
                            "name": "storyDocSummary",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "storyDocSummary",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {environment} from \"../../environments/environment\";\nimport {Injectable} from '@angular/core';\nimport {ScreenshotCoordinate, StoryDocSummaryDto} from \"@storydoc/models\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LinkService {\n\n  constructor() {\n  }\n\n  public toStoryDoc(storyDocSummary: StoryDocSummaryDto): string[] {\n    return ['/fe/document', storyDocSummary.storyDocId.id]\n  }\n\n  rootUrl() : string {\n    return environment.production ? '' : ('http://localhost:' + environment.port)\n  }\n\n  getScreenshotUrl(coordinate: ScreenshotCoordinate) {\n    return this.rootUrl() +'/api/ui/screenshot'\n      + '/' + coordinate.collectionCoordinate.blockCoordinate.storyDocId.id\n      + '/' + coordinate.collectionCoordinate.blockCoordinate.blockId.id\n      + '/' + coordinate.collectionCoordinate.screenShotCollectionId.id\n      + '/' + coordinate.screenShotId.id\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-c7e2a67208794340bf0d0ce9557a7d3df755014a832dab05990cf4704905fc9cd25b5b1084ed5dd1621bde18459144f43edc59ff415a548130e37518b55cabaf",
            "file": "src/app/common/modal-service.ts",
            "properties": [
                {
                    "name": "modals",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "modal",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modal",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\n// based on https://github.com/cornflourblue/angular-10-custom-modal\n// licence MIT\n\n@Injectable({providedIn: 'root'})\nexport class ModalService {\n  private modals: any[] = [];\n\n  add(modal: any) {\n    // add modal to array of active modals\n    this.modals.push(modal);\n  }\n\n  remove(id: string) {\n    // remove modal from array of active modals\n    this.modals = this.modals.filter(x => x.id !== id);\n  }\n\n  open(id: string) {\n    // open modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n    modal.open();\n  }\n\n  close(id: string) {\n    // close modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n    modal.close();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "RedirectToAngularService",
            "id": "injectable-RedirectToAngularService-a8bb9da481d6bdabe9afb4bcd39d44cc66b2f28688d386b93cbc12c09bafc3b0700bc962e334190de643d86e33fd041fb8bb4f33a917361be72fb44bbb14e171",
            "file": "src/app/api/services/redirect-to-angular.service.ts",
            "properties": [
                {
                    "name": "RedirectUsingDeletePath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingDelete</p>\n",
                    "line": 184,
                    "rawdescription": "\n\nPath part for operation redirectUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingGetPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingGet</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nPath part for operation redirectUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingHeadPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingHead</p>\n",
                    "line": 286,
                    "rawdescription": "\n\nPath part for operation redirectUsingHead\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingOptionsPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingOptions</p>\n",
                    "line": 235,
                    "rawdescription": "\n\nPath part for operation redirectUsingOptions\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingPatchPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingPatch</p>\n",
                    "line": 337,
                    "rawdescription": "\n\nPath part for operation redirectUsingPatch\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingPostPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingPost</p>\n",
                    "line": 133,
                    "rawdescription": "\n\nPath part for operation redirectUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingPutPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingPut</p>\n",
                    "line": 82,
                    "rawdescription": "\n\nPath part for operation redirectUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingTracePath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingTrace</p>\n",
                    "line": 388,
                    "rawdescription": "\n\nPath part for operation redirectUsingTrace\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "redirectUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingHead",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingHead$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingHead$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingHead$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingHead()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingHead()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingOptions",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingOptions$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingOptions$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingOptions$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingOptions()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingOptions()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPatch",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 377,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingPatch$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingPatch$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPatch$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingPatch()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingPatch()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingPut$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingPut$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingPut()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingPut()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingTrace",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 428,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingTrace$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingTrace$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingTrace$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 400,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingTrace()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingTrace()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Redirect To Angular</p>\n",
            "rawdescription": "\n\nRedirect To Angular\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\n\n\n/**\n * Redirect To Angular\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RedirectToAngularService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation redirectUsingGet\n   */\n  static readonly RedirectUsingGetPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingGet(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingPut\n   */\n  static readonly RedirectUsingPutPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingPut()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPut$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingPutPath, 'put');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingPut$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPut(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingPost\n   */\n  static readonly RedirectUsingPostPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPost$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingPostPath, 'post');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPost(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingDelete\n   */\n  static readonly RedirectUsingDeletePath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingDelete$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingDeletePath, 'delete');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingDelete(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingOptions\n   */\n  static readonly RedirectUsingOptionsPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingOptions()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingOptions$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingOptionsPath, 'options');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingOptions$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingOptions(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingOptions$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingHead\n   */\n  static readonly RedirectUsingHeadPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingHead()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingHead$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingHeadPath, 'head');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingHead$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingHead(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingHead$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingPatch\n   */\n  static readonly RedirectUsingPatchPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingPatch()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPatch$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingPatchPath, 'patch');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingPatch$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPatch(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingPatch$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingTrace\n   */\n  static readonly RedirectUsingTracePath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingTrace()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingTrace$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingTracePath, 'trace');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingTrace$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingTrace(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingTrace$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ScreenDesignRestControllerService",
            "id": "injectable-ScreenDesignRestControllerService-7fdf2d8470e2c7d3d3413a816433135c02ed3891aeb1e6130b5488eb8f44dd3c5e67310e69b1e4925000efda47f8cf93a78d39771165876a7c884ffa22dac95d",
            "file": "src/app/api/services/screen-design-rest-controller.service.ts",
            "properties": [
                {
                    "name": "CreateComponentUsingPostPath",
                    "defaultValue": "'/api/ui/screendesign/component'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createComponentUsingPost</p>\n",
                    "line": 203,
                    "rawdescription": "\n\nPath part for operation createComponentUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "CreateScreenDesignUsingPostPath",
                    "defaultValue": "'/api/ui/screendesign/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createScreenDesignUsingPost</p>\n",
                    "line": 119,
                    "rawdescription": "\n\nPath part for operation createScreenDesignUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "DeleteComponentUsingDeletePath",
                    "defaultValue": "'/api/ui/screendesign/component'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation deleteComponentUsingDelete</p>\n",
                    "line": 331,
                    "rawdescription": "\n\nPath part for operation deleteComponentUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetComponentPaletteUsingGetPath",
                    "defaultValue": "'/api/ui/screendesign/palette'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getComponentPaletteUsingGet</p>\n",
                    "line": 649,
                    "rawdescription": "\n\nPath part for operation getComponentPaletteUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetScreenDesignUsingGetPath",
                    "defaultValue": "'/api/ui/screendesign/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getScreenDesignUsingGet</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nPath part for operation getScreenDesignUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "UpdateComponentLocationUsingPutPath",
                    "defaultValue": "'/api/ui/screendesign/component/location'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation updateComponentLocationUsingPut</p>\n",
                    "line": 426,
                    "rawdescription": "\n\nPath part for operation updateComponentLocationUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "UpdateComponentNameUsingPutPath",
                    "defaultValue": "'/api/ui/screendesign/component/name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation updateComponentNameUsingPut</p>\n",
                    "line": 543,
                    "rawdescription": "\n\nPath part for operation updateComponentNameUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createComponentUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SdComponentId>",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateComponent.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createComponentUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createComponent.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createComponentUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createComponentUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SdComponentId>>",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateComponent.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createComponentUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createComponent.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createComponentUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createScreenDesignUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScreenDesignCoordinate>",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateScreenDesign.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createScreenDesignUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createScreenDesign.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createScreenDesignUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createScreenDesignUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ScreenDesignCoordinate>>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateScreenDesign.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createScreenDesignUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createScreenDesign.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createScreenDesignUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteComponentUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 395,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteComponent.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `deleteComponentUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteComponent.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>deleteComponentUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteComponentUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteComponent.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `deleteComponentUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteComponent.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>deleteComponentUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComponentPaletteUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<ComponentDescriptorDto>>",
                    "typeParameters": [],
                    "line": 689,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetComponentPalette.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getComponentPaletteUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getComponentPalette.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getComponentPaletteUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComponentPaletteUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<ComponentDescriptorDto>>>",
                    "typeParameters": [],
                    "line": 661,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetComponentPalette.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getComponentPaletteUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getComponentPalette.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getComponentPaletteUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenDesignUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScreenDesignDto>",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetScreenDesign.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getScreenDesignUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getScreenDesign.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getScreenDesignUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenDesignUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ScreenDesignDto>>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetScreenDesign.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getScreenDesignUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getScreenDesign.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getScreenDesignUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateComponentLocationUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 502,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdateComponentLocation.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `updateComponentLocationUsingPut$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>updateComponentLocation.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>updateComponentLocationUsingPut$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateComponentLocationUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 438,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdateComponentLocation.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `updateComponentLocationUsingPut()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>updateComponentLocation.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>updateComponentLocationUsingPut()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateComponentNameUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 613,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdateComponentName.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `updateComponentNameUsingPut$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>updateComponentName.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>updateComponentNameUsingPut$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateComponentNameUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 555,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdateComponentName.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `updateComponentNameUsingPut()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>updateComponentName.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>updateComponentNameUsingPut()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Screen Design Rest Controller</p>\n",
            "rawdescription": "\n\nScreen Design Rest Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ComponentDescriptorDto } from '../models/component-descriptor-dto';\nimport { SdComponentId } from '../models/sd-component-id';\nimport { ScreenDesignCoordinate } from '../models/screen-design-coordinate';\nimport { ScreenDesignDto } from '../models/screen-design-dto';\n\n\n/**\n * Screen Design Rest Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenDesignRestControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getScreenDesignUsingGet\n   */\n  static readonly GetScreenDesignUsingGetPath = '/api/ui/screendesign/';\n\n  /**\n   * getScreenDesign.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getScreenDesignUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getScreenDesignUsingGet$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n  }): Observable<StrictHttpResponse<ScreenDesignDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ScreenDesignRestControllerService.GetScreenDesignUsingGetPath, 'get');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('screenDesignId', params.screenDesignId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ScreenDesignDto>;\n      })\n    );\n  }\n\n  /**\n   * getScreenDesign.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getScreenDesignUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getScreenDesignUsingGet(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n  }): Observable<ScreenDesignDto> {\n\n    return this.getScreenDesignUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<ScreenDesignDto>) => r.body as ScreenDesignDto)\n    );\n  }\n\n  /**\n   * Path part for operation createScreenDesignUsingPost\n   */\n  static readonly CreateScreenDesignUsingPostPath = '/api/ui/screendesign/';\n\n  /**\n   * createScreenDesign.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createScreenDesignUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createScreenDesignUsingPost$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<StrictHttpResponse<ScreenDesignCoordinate>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ScreenDesignRestControllerService.CreateScreenDesignUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ScreenDesignCoordinate>;\n      })\n    );\n  }\n\n  /**\n   * createScreenDesign.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createScreenDesignUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createScreenDesignUsingPost(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<ScreenDesignCoordinate> {\n\n    return this.createScreenDesignUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<ScreenDesignCoordinate>) => r.body as ScreenDesignCoordinate)\n    );\n  }\n\n  /**\n   * Path part for operation createComponentUsingPost\n   */\n  static readonly CreateComponentUsingPostPath = '/api/ui/screendesign/component';\n\n  /**\n   * createComponent.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createComponentUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createComponentUsingPost$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n\n    /**\n     * containerId\n     */\n    containerId: string;\n\n    /**\n     * type\n     */\n    type: string;\n\n    /**\n     * x\n     */\n    'x': number;\n\n    /**\n     * y\n     */\n    'y': number;\n  }): Observable<StrictHttpResponse<SdComponentId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ScreenDesignRestControllerService.CreateComponentUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('screenDesignId', params.screenDesignId, {\"style\":\"form\"});\n      rb.query('containerId', params.containerId, {\"style\":\"form\"});\n      rb.query('type', params.type, {\"style\":\"form\"});\n      rb.query('x', params['x'], {\"style\":\"form\"});\n      rb.query('y', params['y'], {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SdComponentId>;\n      })\n    );\n  }\n\n  /**\n   * createComponent.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createComponentUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createComponentUsingPost(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n\n    /**\n     * containerId\n     */\n    containerId: string;\n\n    /**\n     * type\n     */\n    type: string;\n\n    /**\n     * x\n     */\n    'x': number;\n\n    /**\n     * y\n     */\n    'y': number;\n  }): Observable<SdComponentId> {\n\n    return this.createComponentUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<SdComponentId>) => r.body as SdComponentId)\n    );\n  }\n\n  /**\n   * Path part for operation deleteComponentUsingDelete\n   */\n  static readonly DeleteComponentUsingDeletePath = '/api/ui/screendesign/component';\n\n  /**\n   * deleteComponent.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteComponentUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteComponentUsingDelete$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n\n    /**\n     * componenId\n     */\n    componenId: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ScreenDesignRestControllerService.DeleteComponentUsingDeletePath, 'delete');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('screenDesignId', params.screenDesignId, {\"style\":\"form\"});\n      rb.query('componenId', params.componenId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * deleteComponent.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteComponentUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteComponentUsingDelete(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n\n    /**\n     * componenId\n     */\n    componenId: string;\n  }): Observable<void> {\n\n    return this.deleteComponentUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation updateComponentLocationUsingPut\n   */\n  static readonly UpdateComponentLocationUsingPutPath = '/api/ui/screendesign/component/location';\n\n  /**\n   * updateComponentLocation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateComponentLocationUsingPut()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  updateComponentLocationUsingPut$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n\n    /**\n     * componenId\n     */\n    componenId: string;\n\n    /**\n     * x\n     */\n    'x': number;\n\n    /**\n     * y\n     */\n    'y': number;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ScreenDesignRestControllerService.UpdateComponentLocationUsingPutPath, 'put');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('screenDesignId', params.screenDesignId, {\"style\":\"form\"});\n      rb.query('componenId', params.componenId, {\"style\":\"form\"});\n      rb.query('x', params['x'], {\"style\":\"form\"});\n      rb.query('y', params['y'], {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * updateComponentLocation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `updateComponentLocationUsingPut$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  updateComponentLocationUsingPut(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n\n    /**\n     * componenId\n     */\n    componenId: string;\n\n    /**\n     * x\n     */\n    'x': number;\n\n    /**\n     * y\n     */\n    'y': number;\n  }): Observable<void> {\n\n    return this.updateComponentLocationUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation updateComponentNameUsingPut\n   */\n  static readonly UpdateComponentNameUsingPutPath = '/api/ui/screendesign/component/name';\n\n  /**\n   * updateComponentName.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateComponentNameUsingPut()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  updateComponentNameUsingPut$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n\n    /**\n     * componenId\n     */\n    componenId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ScreenDesignRestControllerService.UpdateComponentNameUsingPutPath, 'put');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('screenDesignId', params.screenDesignId, {\"style\":\"form\"});\n      rb.query('componenId', params.componenId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * updateComponentName.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `updateComponentNameUsingPut$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  updateComponentNameUsingPut(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenDesignId\n     */\n    screenDesignId: string;\n\n    /**\n     * componenId\n     */\n    componenId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<void> {\n\n    return this.updateComponentNameUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getComponentPaletteUsingGet\n   */\n  static readonly GetComponentPaletteUsingGetPath = '/api/ui/screendesign/palette';\n\n  /**\n   * getComponentPalette.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getComponentPaletteUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getComponentPaletteUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<Array<ComponentDescriptorDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ScreenDesignRestControllerService.GetComponentPaletteUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ComponentDescriptorDto>>;\n      })\n    );\n  }\n\n  /**\n   * getComponentPalette.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getComponentPaletteUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getComponentPaletteUsingGet(params?: {\n  }): Observable<Array<ComponentDescriptorDto>> {\n\n    return this.getComponentPaletteUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ComponentDescriptorDto>>) => r.body as Array<ComponentDescriptorDto>)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ScreenDesignService",
            "id": "injectable-ScreenDesignService-f854a9ede475a2a61819b4c9d6fa004f12394e016a845dcd237e11852689dec6c3c9085c14c9a27095aaf0d69364da23ae27d63cb58b9f8cc544bb4c71be6e29",
            "file": "src/app/ui/screen-design-page/screen-design.service.ts",
            "properties": [
                {
                    "name": "palette$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.palette)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "screenDesign$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.screenDesign)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectedContainer$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.selectedContainer)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selection$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.selection)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<State>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addComponent",
                    "args": [
                        {
                            "name": "componentDescriptor",
                            "type": "ComponentDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentDescriptor",
                            "type": "ComponentDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "moveComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "coord",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "coord",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "renameComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameSelectedComponent",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAttribute",
                    "args": [
                        {
                            "name": "component",
                            "type": "SdComponentDto | \"NONE\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "attribute",
                            "type": "ComponentAttributeDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "SdComponentDto | \"NONE\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attribute",
                            "type": "ComponentAttributeDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setScreenDesign",
                    "args": [
                        {
                            "name": "coord",
                            "type": "ScreenDesignCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "coord",
                            "type": "ScreenDesignCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {ComponentDescriptorDto} from \"../../api/models/component-descriptor-dto\";\nimport {ScreenDesignRestControllerService} from \"../../api/services/screen-design-rest-controller.service\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport {ComponentAttributeDescriptorDto, ComponentAttributeDto, ScreenDesignCoordinate, ScreenDesignDto, SdComponentDto, SdContainerDto} from \"@storydoc/models\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\n\ninterface State {\n  palette?: ComponentDescriptorDto[]\n  coord?: ScreenDesignCoordinate\n  screenDesign? : ScreenDesignDto\n  selection? : SdComponentDto | 'NONE'\n  selectedContainer? : SdContainerDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScreenDesignService implements  OnDestroy{\n\n  constructor(private screenDesignRestControllerService: ScreenDesignRestControllerService) { this.init() }\n\n  private store = new BehaviorSubject<State>({})\n\n  palette$ = this.store.asObservable().pipe(\n    map(state => state.palette)\n  )\n\n  screenDesign$ = this.store.asObservable().pipe(\n    map(state => state.screenDesign)\n  )\n\n  selectedContainer$ = this.store.asObservable().pipe(\n    map(state => state.selectedContainer)\n  )\n\n  selection$ = this.store.asObservable().pipe(\n    map(state => state.selection)\n  )\n\n  get selectedContainer():SdContainerDto {\n    return this.store.getValue().selectedContainer\n  }\n\n  get selectedComponent():SdComponentDto | 'NONE' {\n    return this.store.getValue().selection\n  }\n\n  get coord():ScreenDesignCoordinate {\n    return this.store.getValue().coord\n  }\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    log('init()')\n    this.loadPalette()\n    this.subscriptions.push(logChangesToObservable('store$ >>', this.store))\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public setScreenDesign(coord: ScreenDesignCoordinate) {\n    this.store.next({\n      ... this.store.getValue(),\n      coord,\n      screenDesign: null,\n      selectedContainer: null,\n      selection: 'NONE'\n    })\n    this.reload();\n  }\n\n  private reload() {\n    if (!this.coord) return\n    this.screenDesignRestControllerService.getScreenDesignUsingGet({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id\n    }).subscribe(screenDesign => this.store.next({\n      ...this.store.getValue(),\n      screenDesign,\n      selectedContainer: screenDesign.rootContainer\n    }))\n  }\n\n  private loadPalette() {\n    this.screenDesignRestControllerService.getComponentPaletteUsingGet({}).subscribe(palette => this.store.next({\n      ... this.store.getValue(),\n      palette\n    }))\n  }\n\n  addComponent(componentDescriptor: ComponentDescriptorDto, { x, y} ) {\n    this.screenDesignRestControllerService.createComponentUsingPost({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id,\n      containerId: this.selectedContainer.id.id,\n      type: componentDescriptor.type,\n      x: Math.round(x),\n      y: Math.round(y)\n    }).subscribe(()=> this.reload())\n  }\n\n  moveComponent(component: SdComponentDto, coord: { x: number; y: number }) {\n    this.screenDesignRestControllerService.updateComponentLocationUsingPut({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id,\n      componenId: component.id.id,\n      x: coord.x,\n      y: coord.y\n    }).subscribe(()=> this.reload())\n  }\n\n  renameComponent(component: SdComponentDto, name: string) {\n    this.screenDesignRestControllerService.updateComponentNameUsingPut({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id,\n      componenId: component.id.id,\n      name\n    }).subscribe(()=> this.reload())\n  }\n\n  deleteComponent(component: SdComponentDto) {\n    this.screenDesignRestControllerService.deleteComponentUsingDelete({\n      storyDocId: this.coord.blockCoordinate.storyDocId.id,\n      blockId: this.coord.blockCoordinate.blockId.id,\n      screenDesignId: this.coord.screenDesignId.id,\n      componenId: component.id.id,\n    }).subscribe(()=> this.reload())\n  }\n\n  selectComponent(component: SdComponentDto) {\n    this.store.next({\n      ... this.store.getValue(),\n      selection: component\n    })\n\n  }\n\n  setAttribute(component: SdComponentDto | \"NONE\", attribute: ComponentAttributeDescriptorDto, value: any) {\n    if (component==\"NONE\") return\n    let componentAttribute = component.attributes.find(att => att.name===attribute.name)\n    if (!componentAttribute) {\n      componentAttribute = <ComponentAttributeDto>{\n        name: attribute.name,\n        value: null\n      }\n      component.attributes.push(componentAttribute)\n    }\n    componentAttribute.value = value\n    this.store.next({\n      ... this.store.getValue(),\n      screenDesign: {\n        ... this.store.getValue().screenDesign\n      }\n    })\n  }\n\n  deleteSelection() {\n    if (this.selectedComponent != 'NONE' ) {\n      this.deleteComponent(this.selectedComponent)\n    }\n  }\n\n  renameSelectedComponent(name: string) {\n    if (this.selectedComponent != 'NONE'){\n      this.renameComponent(this.selectedComponent, name);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenDesignRestControllerService",
                        "type": "ScreenDesignRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "screenDesignRestControllerService",
                        "type": "ScreenDesignRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "selectedContainer": {
                    "name": "selectedContainer",
                    "getSignature": {
                        "name": "selectedContainer",
                        "type": "",
                        "returnType": "SdContainerDto",
                        "line": 42
                    }
                },
                "selectedComponent": {
                    "name": "selectedComponent",
                    "getSignature": {
                        "name": "selectedComponent",
                        "type": "",
                        "returnType": "SdComponentDto | \"NONE\"",
                        "line": 46
                    }
                },
                "coord": {
                    "name": "coord",
                    "getSignature": {
                        "name": "coord",
                        "type": "",
                        "returnType": "ScreenDesignCoordinate",
                        "line": 50
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ScreenshotCollectionService",
            "id": "injectable-ScreenshotCollectionService-a1c921c428e87456ca64461ecc8d6860ee4957dd740bc949b194377b02a6547bd0eda3720adcff7505e9baf7a7df306fb8df94e643e35089db01555338c64d4a",
            "file": "src/app/ui/screenshot-collection-page/screenshot-collection.service.ts",
            "properties": [
                {
                    "name": "screenshotCollection$",
                    "defaultValue": "this.store.asObservable().pipe(\n    map(state => state.screenShotCollection)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<State>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "AddScreenshot",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "msg",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "msg",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScreenshot",
                    "args": [
                        {
                            "name": "screenShotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "screenShotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initId",
                    "args": [
                        {
                            "name": "coord",
                            "type": "ScreenshotCollectionCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "coord",
                            "type": "ScreenshotCollectionCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "renameScreenShot",
                    "args": [
                        {
                            "name": "screenShotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "screenShotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rootUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { environment } from './../../../environments/environment'\nimport {Injectable} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {map, tap} from \"rxjs/operators\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {ScreenshotCollectionCoordinate, ScreenShotCollectionDto, ScreenShotId} from \"@storydoc/models\";\nimport {UiRestControllerService} from \"@storydoc/services\";\n\ninterface State {\n  coord?: ScreenshotCollectionCoordinate\n  screenShotCollection?: ScreenShotCollectionDto\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScreenshotCollectionService {\n\n  constructor(\n    private http: HttpClient,\n    private uiRestControllerService: UiRestControllerService) {\n  }\n\n  private store = new BehaviorSubject<State>({})\n\n  screenshotCollection$ = this.store.asObservable().pipe(\n    map(state => state.screenShotCollection)\n  )\n\n  public initId(coord: ScreenshotCollectionCoordinate) {\n    this.store.next({coord})\n    this.load()\n  }\n\n  rootUrl() : string {\n    return environment.production ? '' : ('http://localhost:' + environment.port)\n  }\n\n  public AddScreenshot(params: { fileSource: any, name: string }, callback: (msg: any ) => void) {\n    const formData = new FormData();\n    formData.append('file', params.fileSource);\n    formData.set('storyDocId', this.collectionCoord.blockCoordinate.storyDocId.id)\n    formData.set('blockId', this.collectionCoord.blockCoordinate.blockId.id)\n    formData.set('screenshotCollectionId', this.collectionCoord.screenShotCollectionId.id)\n    formData.set('name', params.name)\n    this.http.post(this.rootUrl() +'/api/ui/screenshot' , formData).subscribe({\n      next: value => this.load(),\n//      error: err => callback.apply(this, ['file size limit exceeded'])\n    })\n  }\n\n  public get collectionCoord() {\n    return this.store.getValue().coord;\n  }\n\n  private load() {\n    this.uiRestControllerService.getScreenShotCollectionUsingGet({\n      storyDocId: this.collectionCoord.blockCoordinate.storyDocId.id,\n      blockId: this.collectionCoord.blockCoordinate.blockId.id,\n      id: this.collectionCoord.screenShotCollectionId.id\n    }).subscribe({\n      next:\n        dto => {\n          this.store.next({\n            ...this.store.getValue(),\n            screenShotCollection: dto,\n          })\n        }\n    })\n\n  }\n\n  deleteScreenshot(screenShotId: ScreenShotId) {\n    this.uiRestControllerService.removeScreenshotFromCollectionUsingDelete({\n      storyDocId: this.collectionCoord.blockCoordinate.storyDocId.id,\n      blockId: this.collectionCoord.blockCoordinate.blockId.id,\n      screenshotCollectionId: this.collectionCoord.screenShotCollectionId.id,\n      screenshotId: screenShotId.id\n    }).subscribe( next => this.load())\n  }\n\n  renameScreenShot(screenShotId: ScreenShotId, name: string) {\n    this.uiRestControllerService.renameScreenshotInCollectionUsingPut({\n      storyDocId: this.collectionCoord.blockCoordinate.storyDocId.id,\n      blockId: this.collectionCoord.blockCoordinate.blockId.id,\n      screenshotCollectionId: this.collectionCoord.screenShotCollectionId.id,\n      screenshotId: screenShotId.id,\n      name: name\n    }).subscribe( next => this.load())\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "collectionCoord": {
                    "name": "collectionCoord",
                    "getSignature": {
                        "name": "collectionCoord",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SqldbControllerService",
            "id": "injectable-SqldbControllerService-50a7bd04ce69e9eb75d4b0ee22201f0191dfe3c78bfd859431ceae0682e2d41386a3a569ba0143f24d21da6d4af683d5254fcddf4d9495fec70e5fc95e73fd4c",
            "file": "src/app/api/services/sqldb-controller.service.ts",
            "properties": [
                {
                    "name": "GetDbDataSetUsingGetPath",
                    "defaultValue": "'/api/sqldb/dataset'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getDbDataSetUsingGet</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nPath part for operation getDbDataSetUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetNavigationModelUsingGetPath",
                    "defaultValue": "'/api/sqldb/navigationmodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getNavigationModelUsingGet</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nPath part for operation getNavigationModelUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getDbDataSetUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DbDataSetDto>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDBDataSet.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getDbDataSetUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDBDataSet.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getDbDataSetUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDbDataSetUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<DbDataSetDto>>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDBDataSet.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getDbDataSetUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDBDataSet.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getDbDataSetUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNavigationModelUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<NavigationModelDto>",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetNavigationModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getNavigationModelUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getNavigationModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getNavigationModelUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNavigationModelUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<NavigationModelDto>>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetNavigationModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getNavigationModelUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getNavigationModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getNavigationModelUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>SQLDB Controller</p>\n",
            "rawdescription": "\n\nSQLDB Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { DbDataSetDto } from '../models/db-data-set-dto';\nimport { NavigationModelDto } from '../models/navigation-model-dto';\n\n\n/**\n * SQLDB Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SqldbControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getDbDataSetUsingGet\n   */\n  static readonly GetDbDataSetUsingGetPath = '/api/sqldb/dataset';\n\n  /**\n   * getDBDataSet.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getDbDataSetUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDbDataSetUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<DbDataSetDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SqldbControllerService.GetDbDataSetUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<DbDataSetDto>;\n      })\n    );\n  }\n\n  /**\n   * getDBDataSet.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getDbDataSetUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDbDataSetUsingGet(params?: {\n  }): Observable<DbDataSetDto> {\n\n    return this.getDbDataSetUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<DbDataSetDto>) => r.body as DbDataSetDto)\n    );\n  }\n\n  /**\n   * Path part for operation getNavigationModelUsingGet\n   */\n  static readonly GetNavigationModelUsingGetPath = '/api/sqldb/navigationmodel';\n\n  /**\n   * getNavigationModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getNavigationModelUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getNavigationModelUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<NavigationModelDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SqldbControllerService.GetNavigationModelUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<NavigationModelDto>;\n      })\n    );\n  }\n\n  /**\n   * getNavigationModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getNavigationModelUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getNavigationModelUsingGet(params?: {\n  }): Observable<NavigationModelDto> {\n\n    return this.getNavigationModelUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<NavigationModelDto>) => r.body as NavigationModelDto)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "StoryDocRestControllerService",
            "id": "injectable-StoryDocRestControllerService-67747e707d9bcf01de88459a189208cc2c6593b690e150919a3a712ac40f918c0133e01dda1938767a4f866fd72aff6faf783851a997e1194a61038bed6f28bd",
            "file": "src/app/api/services/story-doc-rest-controller.service.ts",
            "properties": [
                {
                    "name": "AddBlockUsingPostPath",
                    "defaultValue": "'/api/storydoc/addblock'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation addBlockUsingPost</p>\n",
                    "line": 286,
                    "rawdescription": "\n\nPath part for operation addBlockUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "AddTagUsingPostPath",
                    "defaultValue": "'/api/storydoc/tag'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation addTagUsingPost</p>\n",
                    "line": 738,
                    "rawdescription": "\n\nPath part for operation addTagUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "ChangeDocumentNameUsingPutPath",
                    "defaultValue": "'/api/storydoc/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation changeDocumentNameUsingPut</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nPath part for operation changeDocumentNameUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "CreateDocumentUsingPostPath",
                    "defaultValue": "'/api/storydoc/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createDocumentUsingPost</p>\n",
                    "line": 162,
                    "rawdescription": "\n\nPath part for operation createDocumentUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetDocumentsUsingGetPath",
                    "defaultValue": "'/api/storydoc/storydocs'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getDocumentsUsingGet</p>\n",
                    "line": 687,
                    "rawdescription": "\n\nPath part for operation getDocumentsUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetDocumentUsingGetPath",
                    "defaultValue": "'/api/storydoc/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getDocumentUsingGet</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nPath part for operation getDocumentUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RemoveArtifactUsingDeletePath",
                    "defaultValue": "'/api/storydoc/removeartifact'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation removeArtifactUsingDelete</p>\n",
                    "line": 351,
                    "rawdescription": "\n\nPath part for operation removeArtifactUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RemoveBlockUsingDeletePath",
                    "defaultValue": "'/api/storydoc/removeblock'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation removeBlockUsingDelete</p>\n",
                    "line": 435,
                    "rawdescription": "\n\nPath part for operation removeBlockUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RemoveDocumentUsingDeletePath",
                    "defaultValue": "'/api/storydoc/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation removeDocumentUsingDelete</p>\n",
                    "line": 224,
                    "rawdescription": "\n\nPath part for operation removeDocumentUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RenameArtifactUsingPutPath",
                    "defaultValue": "'/api/storydoc/renameartifact'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation renameArtifactUsingPut</p>\n",
                    "line": 508,
                    "rawdescription": "\n\nPath part for operation renameArtifactUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RenameBlockUsingPutPath",
                    "defaultValue": "'/api/storydoc/renameblock'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation renameBlockUsingPut</p>\n",
                    "line": 603,
                    "rawdescription": "\n\nPath part for operation renameBlockUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addBlockUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BlockId>",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddBlock.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `addBlockUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>addBlock.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>addBlockUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addBlockUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<BlockId>>",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddBlock.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `addBlockUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>addBlock.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>addBlockUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTagUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 786,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddTag.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `addTagUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>addTag.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>addTagUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTagUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 750,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddTag.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `addTagUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>addTag.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>addTagUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeDocumentNameUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchangeDocumentName.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `changeDocumentNameUsingPut$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>changeDocumentName.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>changeDocumentNameUsingPut$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeDocumentNameUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchangeDocumentName.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `changeDocumentNameUsingPut()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>changeDocumentName.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>changeDocumentNameUsingPut()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDocumentUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StoryDocId>",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateDocument.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createDocumentUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createDocument.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createDocumentUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDocumentUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<StoryDocId>>",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateDocument.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createDocumentUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createDocument.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createDocumentUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDocumentsUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<StoryDocSummaryDto>>",
                    "typeParameters": [],
                    "line": 727,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDocuments.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getDocumentsUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDocuments.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getDocumentsUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDocumentsUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<StoryDocSummaryDto>>>",
                    "typeParameters": [],
                    "line": 699,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDocuments.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getDocumentsUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDocuments.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getDocumentsUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDocumentUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StoryDocDto>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDocument.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getDocumentUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDocument.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getDocumentUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDocumentUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<StoryDocDto>>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDocument.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getDocumentUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDocument.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getDocumentUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeArtifactUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoveArtifact.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `removeArtifactUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>removeArtifact.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>removeArtifactUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeArtifactUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 363,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoveArtifact.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `removeArtifactUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>removeArtifact.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>removeArtifactUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeBlockUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 487,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoveBlock.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `removeBlockUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>removeBlock.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>removeBlockUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeBlockUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 447,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoveBlock.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `removeBlockUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>removeBlock.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>removeBlockUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDocumentUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoveDocument.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `removeDocumentUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>removeDocument.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>removeDocumentUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDocumentUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoveDocument.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `removeDocumentUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>removeDocument.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>removeDocumentUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameArtifactUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 572,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrenameArtifact.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `renameArtifactUsingPut$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>renameArtifact.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>renameArtifactUsingPut$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameArtifactUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 520,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrenameArtifact.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `renameArtifactUsingPut()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>renameArtifact.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>renameArtifactUsingPut()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameBlockUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 661,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrenameBlock.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `renameBlockUsingPut$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>renameBlock.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>renameBlockUsingPut$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameBlockUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 615,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrenameBlock.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `renameBlockUsingPut()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>renameBlock.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>renameBlockUsingPut()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Story Doc Rest Controller</p>\n",
            "rawdescription": "\n\nStory Doc Rest Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { BlockId } from '../models/block-id';\nimport { StoryDocDto } from '../models/story-doc-dto';\nimport { StoryDocId } from '../models/story-doc-id';\nimport { StoryDocSummaryDto } from '../models/story-doc-summary-dto';\n\n\n/**\n * Story Doc Rest Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoryDocRestControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getDocumentUsingGet\n   */\n  static readonly GetDocumentUsingGetPath = '/api/storydoc/';\n\n  /**\n   * getDocument.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getDocumentUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDocumentUsingGet$Response(params?: {\n    id?: string;\n  }): Observable<StrictHttpResponse<StoryDocDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.GetDocumentUsingGetPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<StoryDocDto>;\n      })\n    );\n  }\n\n  /**\n   * getDocument.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getDocumentUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDocumentUsingGet(params?: {\n    id?: string;\n  }): Observable<StoryDocDto> {\n\n    return this.getDocumentUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<StoryDocDto>) => r.body as StoryDocDto)\n    );\n  }\n\n  /**\n   * Path part for operation changeDocumentNameUsingPut\n   */\n  static readonly ChangeDocumentNameUsingPutPath = '/api/storydoc/';\n\n  /**\n   * changeDocumentName.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `changeDocumentNameUsingPut()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  changeDocumentNameUsingPut$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.ChangeDocumentNameUsingPutPath, 'put');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * changeDocumentName.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `changeDocumentNameUsingPut$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  changeDocumentNameUsingPut(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<void> {\n\n    return this.changeDocumentNameUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation createDocumentUsingPost\n   */\n  static readonly CreateDocumentUsingPostPath = '/api/storydoc/';\n\n  /**\n   * createDocument.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createDocumentUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createDocumentUsingPost$Response(params?: {\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<StrictHttpResponse<StoryDocId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.CreateDocumentUsingPostPath, 'post');\n    if (params) {\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<StoryDocId>;\n      })\n    );\n  }\n\n  /**\n   * createDocument.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createDocumentUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createDocumentUsingPost(params?: {\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<StoryDocId> {\n\n    return this.createDocumentUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<StoryDocId>) => r.body as StoryDocId)\n    );\n  }\n\n  /**\n   * Path part for operation removeDocumentUsingDelete\n   */\n  static readonly RemoveDocumentUsingDeletePath = '/api/storydoc/';\n\n  /**\n   * removeDocument.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `removeDocumentUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeDocumentUsingDelete$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.RemoveDocumentUsingDeletePath, 'delete');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * removeDocument.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `removeDocumentUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeDocumentUsingDelete(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n  }): Observable<void> {\n\n    return this.removeDocumentUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation addBlockUsingPost\n   */\n  static readonly AddBlockUsingPostPath = '/api/storydoc/addblock';\n\n  /**\n   * addBlock.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addBlockUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addBlockUsingPost$Response(params?: {\n    id?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<StrictHttpResponse<BlockId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.AddBlockUsingPostPath, 'post');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<BlockId>;\n      })\n    );\n  }\n\n  /**\n   * addBlock.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `addBlockUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addBlockUsingPost(params?: {\n    id?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<BlockId> {\n\n    return this.addBlockUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<BlockId>) => r.body as BlockId)\n    );\n  }\n\n  /**\n   * Path part for operation removeArtifactUsingDelete\n   */\n  static readonly RemoveArtifactUsingDeletePath = '/api/storydoc/removeartifact';\n\n  /**\n   * removeArtifact.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `removeArtifactUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeArtifactUsingDelete$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * artifactId\n     */\n    artifactId: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.RemoveArtifactUsingDeletePath, 'delete');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('artifactId', params.artifactId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * removeArtifact.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `removeArtifactUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeArtifactUsingDelete(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * artifactId\n     */\n    artifactId: string;\n  }): Observable<void> {\n\n    return this.removeArtifactUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation removeBlockUsingDelete\n   */\n  static readonly RemoveBlockUsingDeletePath = '/api/storydoc/removeblock';\n\n  /**\n   * removeBlock.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `removeBlockUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeBlockUsingDelete$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.RemoveBlockUsingDeletePath, 'delete');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * removeBlock.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `removeBlockUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeBlockUsingDelete(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n  }): Observable<void> {\n\n    return this.removeBlockUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation renameArtifactUsingPut\n   */\n  static readonly RenameArtifactUsingPutPath = '/api/storydoc/renameartifact';\n\n  /**\n   * renameArtifact.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `renameArtifactUsingPut()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  renameArtifactUsingPut$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * artifactId\n     */\n    artifactId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.RenameArtifactUsingPutPath, 'put');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('artifactId', params.artifactId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * renameArtifact.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `renameArtifactUsingPut$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  renameArtifactUsingPut(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * artifactId\n     */\n    artifactId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<void> {\n\n    return this.renameArtifactUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation renameBlockUsingPut\n   */\n  static readonly RenameBlockUsingPutPath = '/api/storydoc/renameblock';\n\n  /**\n   * renameBlock.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `renameBlockUsingPut()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  renameBlockUsingPut$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.RenameBlockUsingPutPath, 'put');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * renameBlock.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `renameBlockUsingPut$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  renameBlockUsingPut(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<void> {\n\n    return this.renameBlockUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getDocumentsUsingGet\n   */\n  static readonly GetDocumentsUsingGetPath = '/api/storydoc/storydocs';\n\n  /**\n   * getDocuments.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getDocumentsUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDocumentsUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<Array<StoryDocSummaryDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.GetDocumentsUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<StoryDocSummaryDto>>;\n      })\n    );\n  }\n\n  /**\n   * getDocuments.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getDocumentsUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDocumentsUsingGet(params?: {\n  }): Observable<Array<StoryDocSummaryDto>> {\n\n    return this.getDocumentsUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<StoryDocSummaryDto>>) => r.body as Array<StoryDocSummaryDto>)\n    );\n  }\n\n  /**\n   * Path part for operation addTagUsingPost\n   */\n  static readonly AddTagUsingPostPath = '/api/storydoc/tag';\n\n  /**\n   * addTag.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addTagUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addTagUsingPost$Response(params?: {\n    id?: string;\n\n    /**\n     * tag\n     */\n    tag?: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StoryDocRestControllerService.AddTagUsingPostPath, 'post');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n      rb.query('tag', params.tag, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * addTag.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `addTagUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addTagUsingPost(params?: {\n    id?: string;\n\n    /**\n     * tag\n     */\n    tag?: string;\n  }): Observable<void> {\n\n    return this.addTagUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "TimeLineControllerService",
            "id": "injectable-TimeLineControllerService-c858b3504af267a41219677838a376267d6d196d1774efe8cd7530bf7c6bb882ae4acf31140f287db543730757f8f2587e238bdcea3fed264dc78c6e9ceea3ff",
            "file": "src/app/api/services/time-line-controller.service.ts",
            "properties": [
                {
                    "name": "CreateTimeLineItemUsingPostPath",
                    "defaultValue": "'/api/timeline/timelineitem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createTimeLineItemUsingPost</p>\n",
                    "line": 152,
                    "rawdescription": "\n\nPath part for operation createTimeLineItemUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "CreateTimeLineModelUsingPostPath",
                    "defaultValue": "'/api/timeline/timelinemodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createTimeLineModelUsingPost</p>\n",
                    "line": 437,
                    "rawdescription": "\n\nPath part for operation createTimeLineModelUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "DeleteTimeLineItemUsingDeletePath",
                    "defaultValue": "'/api/timeline/timelineitem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation deleteTimeLineItemUsingDelete</p>\n",
                    "line": 247,
                    "rawdescription": "\n\nPath part for operation deleteTimeLineItemUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetTimeLineModelSummariesUsingGetPath",
                    "defaultValue": "'/api/timeline/timelinemodelsummaries'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getTimeLineModelSummariesUsingGet</p>\n",
                    "line": 521,
                    "rawdescription": "\n\nPath part for operation getTimeLineModelSummariesUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetTimeLineModelUsingGetPath",
                    "defaultValue": "'/api/timeline/timelinemodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getTimeLineModelUsingGet</p>\n",
                    "line": 353,
                    "rawdescription": "\n\nPath part for operation getTimeLineModelUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RenameTimeLineItemUsingPutPath",
                    "defaultValue": "'/api/timeline/timelineitem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation renameTimeLineItemUsingPut</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nPath part for operation renameTimeLineItemUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createTimeLineItemUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TimeLineItemId>",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateTimeLineItem.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createTimeLineItemUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createTimeLineItem.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createTimeLineItemUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTimeLineItemUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<TimeLineItemId>>",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateTimeLineItem.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createTimeLineItemUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createTimeLineItem.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createTimeLineItemUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTimeLineModelUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TimeLineModelCoordinate>",
                    "typeParameters": [],
                    "line": 495,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateTimeLineModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createTimeLineModelUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createTimeLineModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createTimeLineModelUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTimeLineModelUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<TimeLineModelCoordinate>>",
                    "typeParameters": [],
                    "line": 449,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateTimeLineModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createTimeLineModelUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createTimeLineModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createTimeLineModelUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTimeLineItemUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteTimeLineItem.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `deleteTimeLineItemUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteTimeLineItem.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>deleteTimeLineItemUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTimeLineItemUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteTimeLineItem.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `deleteTimeLineItemUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteTimeLineItem.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>deleteTimeLineItemUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimeLineModelSummariesUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<TimeLineModelSummaryDto>>",
                    "typeParameters": [],
                    "line": 573,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetTimeLineModelSummaries.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getTimeLineModelSummariesUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getTimeLineModelSummaries.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getTimeLineModelSummariesUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimeLineModelSummariesUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<TimeLineModelSummaryDto>>>",
                    "typeParameters": [],
                    "line": 533,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetTimeLineModelSummaries.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getTimeLineModelSummariesUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getTimeLineModelSummaries.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getTimeLineModelSummariesUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimeLineModelUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TimeLineModelDto>",
                    "typeParameters": [],
                    "line": 411,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetTimeLineModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getTimeLineModelUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getTimeLineModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getTimeLineModelUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimeLineModelUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<TimeLineModelDto>>",
                    "typeParameters": [],
                    "line": 365,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetTimeLineModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getTimeLineModelUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getTimeLineModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getTimeLineModelUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameTimeLineItemUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrenameTimeLineItem.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `renameTimeLineItemUsingPut$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>renameTimeLineItem.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>renameTimeLineItemUsingPut$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameTimeLineItemUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrenameTimeLineItem.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `renameTimeLineItemUsingPut()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>renameTimeLineItem.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>renameTimeLineItemUsingPut()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Time Line Controller</p>\n",
            "rawdescription": "\n\nTime Line Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { TimeLineItemId } from '../models/time-line-item-id';\nimport { TimeLineModelCoordinate } from '../models/time-line-model-coordinate';\nimport { TimeLineModelDto } from '../models/time-line-model-dto';\nimport { TimeLineModelSummaryDto } from '../models/time-line-model-summary-dto';\n\n\n/**\n * Time Line Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TimeLineControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation renameTimeLineItemUsingPut\n   */\n  static readonly RenameTimeLineItemUsingPutPath = '/api/timeline/timelineitem';\n\n  /**\n   * renameTimeLineItem.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `renameTimeLineItemUsingPut()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  renameTimeLineItemUsingPut$Response(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId?: string;\n\n    /**\n     * timeLineId\n     */\n    timeLineId?: string;\n\n    /**\n     * timeLineItemId\n     */\n    timeLineItemId?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TimeLineControllerService.RenameTimeLineItemUsingPutPath, 'put');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('timeLineModelId', params.timeLineModelId, {\"style\":\"form\"});\n      rb.query('timeLineId', params.timeLineId, {\"style\":\"form\"});\n      rb.query('timeLineItemId', params.timeLineItemId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * renameTimeLineItem.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `renameTimeLineItemUsingPut$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  renameTimeLineItemUsingPut(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId?: string;\n\n    /**\n     * timeLineId\n     */\n    timeLineId?: string;\n\n    /**\n     * timeLineItemId\n     */\n    timeLineItemId?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<void> {\n\n    return this.renameTimeLineItemUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation createTimeLineItemUsingPost\n   */\n  static readonly CreateTimeLineItemUsingPostPath = '/api/timeline/timelineitem';\n\n  /**\n   * createTimeLineItem.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createTimeLineItemUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createTimeLineItemUsingPost$Response(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<StrictHttpResponse<TimeLineItemId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TimeLineControllerService.CreateTimeLineItemUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('timeLineModelId', params.timeLineModelId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<TimeLineItemId>;\n      })\n    );\n  }\n\n  /**\n   * createTimeLineItem.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createTimeLineItemUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createTimeLineItemUsingPost(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<TimeLineItemId> {\n\n    return this.createTimeLineItemUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<TimeLineItemId>) => r.body as TimeLineItemId)\n    );\n  }\n\n  /**\n   * Path part for operation deleteTimeLineItemUsingDelete\n   */\n  static readonly DeleteTimeLineItemUsingDeletePath = '/api/timeline/timelineitem';\n\n  /**\n   * deleteTimeLineItem.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteTimeLineItemUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteTimeLineItemUsingDelete$Response(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId?: string;\n\n    /**\n     * timeLineId\n     */\n    timeLineId?: string;\n\n    /**\n     * timeLineItemId\n     */\n    timeLineItemId?: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TimeLineControllerService.DeleteTimeLineItemUsingDeletePath, 'delete');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('timeLineModelId', params.timeLineModelId, {\"style\":\"form\"});\n      rb.query('timeLineId', params.timeLineId, {\"style\":\"form\"});\n      rb.query('timeLineItemId', params.timeLineItemId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * deleteTimeLineItem.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteTimeLineItemUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteTimeLineItemUsingDelete(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId?: string;\n\n    /**\n     * timeLineId\n     */\n    timeLineId?: string;\n\n    /**\n     * timeLineItemId\n     */\n    timeLineItemId?: string;\n  }): Observable<void> {\n\n    return this.deleteTimeLineItemUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getTimeLineModelUsingGet\n   */\n  static readonly GetTimeLineModelUsingGetPath = '/api/timeline/timelinemodel';\n\n  /**\n   * getTimeLineModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTimeLineModelUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTimeLineModelUsingGet$Response(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId?: string;\n  }): Observable<StrictHttpResponse<TimeLineModelDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TimeLineControllerService.GetTimeLineModelUsingGetPath, 'get');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('timeLineModelId', params.timeLineModelId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<TimeLineModelDto>;\n      })\n    );\n  }\n\n  /**\n   * getTimeLineModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getTimeLineModelUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTimeLineModelUsingGet(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId?: string;\n  }): Observable<TimeLineModelDto> {\n\n    return this.getTimeLineModelUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<TimeLineModelDto>) => r.body as TimeLineModelDto)\n    );\n  }\n\n  /**\n   * Path part for operation createTimeLineModelUsingPost\n   */\n  static readonly CreateTimeLineModelUsingPostPath = '/api/timeline/timelinemodel';\n\n  /**\n   * createTimeLineModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createTimeLineModelUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createTimeLineModelUsingPost$Response(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<StrictHttpResponse<TimeLineModelCoordinate>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TimeLineControllerService.CreateTimeLineModelUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<TimeLineModelCoordinate>;\n      })\n    );\n  }\n\n  /**\n   * createTimeLineModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createTimeLineModelUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createTimeLineModelUsingPost(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<TimeLineModelCoordinate> {\n\n    return this.createTimeLineModelUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<TimeLineModelCoordinate>) => r.body as TimeLineModelCoordinate)\n    );\n  }\n\n  /**\n   * Path part for operation getTimeLineModelSummariesUsingGet\n   */\n  static readonly GetTimeLineModelSummariesUsingGetPath = '/api/timeline/timelinemodelsummaries';\n\n  /**\n   * getTimeLineModelSummaries.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTimeLineModelSummariesUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTimeLineModelSummariesUsingGet$Response(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n  }): Observable<StrictHttpResponse<Array<TimeLineModelSummaryDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TimeLineControllerService.GetTimeLineModelSummariesUsingGetPath, 'get');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<TimeLineModelSummaryDto>>;\n      })\n    );\n  }\n\n  /**\n   * getTimeLineModelSummaries.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getTimeLineModelSummariesUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTimeLineModelSummariesUsingGet(params?: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId?: string;\n\n    /**\n     * blockId\n     */\n    blockId?: string;\n  }): Observable<Array<TimeLineModelSummaryDto>> {\n\n    return this.getTimeLineModelSummariesUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<TimeLineModelSummaryDto>>) => r.body as Array<TimeLineModelSummaryDto>)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "UiRestControllerService",
            "id": "injectable-UiRestControllerService-f195a5990e6ae102afb1703bc427b44a3da597684f3d7131e0470ab275a056e3f7d90ffce4f98d8c5e631aef93597fb670deaf2911d93831d03b2c02c8616882",
            "file": "src/app/api/services/ui-rest-controller.service.ts",
            "properties": [
                {
                    "name": "AddScreenshotToCollectionUsingPostPath",
                    "defaultValue": "'/api/ui/screenshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation addScreenshotToCollectionUsingPost</p>\n",
                    "line": 142,
                    "rawdescription": "\n\nPath part for operation addScreenshotToCollectionUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "AddScreenshotToUiScenarioUsingPostPath",
                    "defaultValue": "'/api/ui/uiscenarioscreenshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation addScreenshotToUiScenarioUsingPost</p>\n",
                    "line": 722,
                    "rawdescription": "\n\nPath part for operation addScreenshotToUiScenarioUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "CreateScreenShotCollectionUsingPostPath",
                    "defaultValue": "'/api/ui/screenshotcollection'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createScreenShotCollectionUsingPost</p>\n",
                    "line": 470,
                    "rawdescription": "\n\nPath part for operation createScreenShotCollectionUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "CreateUiScenarioUsingPostPath",
                    "defaultValue": "'/api/ui/uiscenario'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createUiScenarioUsingPost</p>\n",
                    "line": 638,
                    "rawdescription": "\n\nPath part for operation createUiScenarioUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "DownloadScreenshotUsingGetPath",
                    "defaultValue": "'/api/ui/screenshot/{storyDocId}/{blockId}/{screenshotCollectionId}/{screenshotId}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation downloadScreenshotUsingGet</p>\n",
                    "line": 291,
                    "rawdescription": "\n\nPath part for operation downloadScreenshotUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetScreenShotCollectionUsingGetPath",
                    "defaultValue": "'/api/ui/screenshotcollection'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getScreenShotCollectionUsingGet</p>\n",
                    "line": 386,
                    "rawdescription": "\n\nPath part for operation getScreenShotCollectionUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetUiScenarioUsingGetPath",
                    "defaultValue": "'/api/ui/uiscenario'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getUiScenarioUsingGet</p>\n",
                    "line": 554,
                    "rawdescription": "\n\nPath part for operation getUiScenarioUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RemoveScreenshotFromCollectionUsingDeletePath",
                    "defaultValue": "'/api/ui/screenshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation removeScreenshotFromCollectionUsingDelete</p>\n",
                    "line": 196,
                    "rawdescription": "\n\nPath part for operation removeScreenshotFromCollectionUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RenameScreenshotInCollectionUsingPutPath",
                    "defaultValue": "'/api/ui/screenshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation renameScreenshotInCollectionUsingPut</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nPath part for operation renameScreenshotInCollectionUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "SetUiScenarioTimeLineModelUsingPostPath",
                    "defaultValue": "'/api/ui/uiscenariotimelinemodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation setUiScenarioTimeLineModelUsingPost</p>\n",
                    "line": 861,
                    "rawdescription": "\n\nPath part for operation setUiScenarioTimeLineModelUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addScreenshotToCollectionUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScreenShotId>",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddScreenshotToCollection.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `addScreenshotToCollectionUsingPost$Response()` instead.\n\nThis method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n",
                    "description": "<p>addScreenshotToCollection.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>addScreenshotToCollectionUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>multipart/form-data</code> and handles request body of type <code>multipart/form-data</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addScreenshotToCollectionUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ScreenShotId>>",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddScreenshotToCollection.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `addScreenshotToCollectionUsingPost()` instead.\n\nThis method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n",
                    "description": "<p>addScreenshotToCollection.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>addScreenshotToCollectionUsingPost()</code> instead.</p>\n<p>This method sends <code>multipart/form-data</code> and handles request body of type <code>multipart/form-data</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addScreenshotToUiScenarioUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 810,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddScreenshotToUIScenario.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `addScreenshotToUiScenarioUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>addScreenshotToUIScenario.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>addScreenshotToUiScenarioUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addScreenshotToUiScenarioUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 734,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddScreenshotToUIScenario.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `addScreenshotToUiScenarioUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>addScreenshotToUIScenario.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>addScreenshotToUiScenarioUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createScreenShotCollectionUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScreenShotCollectionId>",
                    "typeParameters": [],
                    "line": 528,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateScreenShotCollection.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createScreenShotCollectionUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createScreenShotCollection.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createScreenShotCollectionUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createScreenShotCollectionUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ScreenShotCollectionId>>",
                    "typeParameters": [],
                    "line": 482,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateScreenShotCollection.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createScreenShotCollectionUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createScreenShotCollection.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createScreenShotCollectionUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUiScenarioUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UiScenarioCoordinate>",
                    "typeParameters": [],
                    "line": 696,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateUIScenario.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createUiScenarioUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createUIScenario.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createUiScenarioUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUiScenarioUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<UiScenarioCoordinate>>",
                    "typeParameters": [],
                    "line": 650,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateUIScenario.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createUiScenarioUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createUIScenario.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createUiScenarioUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadScreenshotUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 355,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndownloadScreenshot.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `downloadScreenshotUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>downloadScreenshot.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>downloadScreenshotUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadScreenshotUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndownloadScreenshot.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `downloadScreenshotUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>downloadScreenshot.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>downloadScreenshotUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenShotCollectionUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScreenShotCollectionDto>",
                    "typeParameters": [],
                    "line": 444,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetScreenShotCollection.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getScreenShotCollectionUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getScreenShotCollection.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getScreenShotCollectionUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenShotCollectionUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ScreenShotCollectionDto>>",
                    "typeParameters": [],
                    "line": 398,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetScreenShotCollection.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getScreenShotCollectionUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getScreenShotCollection.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getScreenShotCollectionUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUiScenarioUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UiScenarioDto>",
                    "typeParameters": [],
                    "line": 612,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetUIScenario.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getUiScenarioUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getUIScenario.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getUiScenarioUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUiScenarioUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<UiScenarioDto>>",
                    "typeParameters": [],
                    "line": 566,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetUIScenario.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getUiScenarioUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getUIScenario.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getUiScenarioUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeScreenshotFromCollectionUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoveScreenshotFromCollection.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `removeScreenshotFromCollectionUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>removeScreenshotFromCollection.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>removeScreenshotFromCollectionUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeScreenshotFromCollectionUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoveScreenshotFromCollection.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `removeScreenshotFromCollectionUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>removeScreenshotFromCollection.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>removeScreenshotFromCollectionUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameScreenshotInCollectionUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrenameScreenshotInCollection.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `renameScreenshotInCollectionUsingPut$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>renameScreenshotInCollection.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>renameScreenshotInCollectionUsingPut$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameScreenshotInCollectionUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrenameScreenshotInCollection.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `renameScreenshotInCollectionUsingPut()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>renameScreenshotInCollection.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>renameScreenshotInCollectionUsingPut()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUiScenarioTimeLineModelUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 937,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetUIScenarioTimeLineModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `setUiScenarioTimeLineModelUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>setUIScenarioTimeLineModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>setUiScenarioTimeLineModelUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUiScenarioTimeLineModelUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 873,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetUIScenarioTimeLineModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `setUiScenarioTimeLineModelUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>setUIScenarioTimeLineModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>setUiScenarioTimeLineModelUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>UI Rest Controller</p>\n",
            "rawdescription": "\n\nUI Rest Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ScreenShotCollectionDto } from '../models/screen-shot-collection-dto';\nimport { ScreenShotCollectionId } from '../models/screen-shot-collection-id';\nimport { ScreenShotId } from '../models/screen-shot-id';\nimport { UiScenarioCoordinate } from '../models/ui-scenario-coordinate';\nimport { UiScenarioDto } from '../models/ui-scenario-dto';\n\n\n/**\n * UI Rest Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UiRestControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation renameScreenshotInCollectionUsingPut\n   */\n  static readonly RenameScreenshotInCollectionUsingPutPath = '/api/ui/screenshot';\n\n  /**\n   * renameScreenshotInCollection.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `renameScreenshotInCollectionUsingPut()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  renameScreenshotInCollectionUsingPut$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenshotCollectionId\n     */\n    screenshotCollectionId: string;\n\n    /**\n     * screenshotId\n     */\n    screenshotId: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.RenameScreenshotInCollectionUsingPutPath, 'put');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('screenshotCollectionId', params.screenshotCollectionId, {\"style\":\"form\"});\n      rb.query('screenshotId', params.screenshotId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * renameScreenshotInCollection.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `renameScreenshotInCollectionUsingPut$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  renameScreenshotInCollectionUsingPut(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenshotCollectionId\n     */\n    screenshotCollectionId: string;\n\n    /**\n     * screenshotId\n     */\n    screenshotId: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<void> {\n\n    return this.renameScreenshotInCollectionUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation addScreenshotToCollectionUsingPost\n   */\n  static readonly AddScreenshotToCollectionUsingPostPath = '/api/ui/screenshot';\n\n  /**\n   * addScreenshotToCollection.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addScreenshotToCollectionUsingPost()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  addScreenshotToCollectionUsingPost$Response(params?: {\n    body?: { 'blockId': string, 'name'?: string, 'screenshotCollectionId': string, 'storyDocId': string }\n  }): Observable<StrictHttpResponse<ScreenShotId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.AddScreenshotToCollectionUsingPostPath, 'post');\n    if (params) {\n      rb.body(params.body, 'multipart/form-data');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ScreenShotId>;\n      })\n    );\n  }\n\n  /**\n   * addScreenshotToCollection.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `addScreenshotToCollectionUsingPost$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  addScreenshotToCollectionUsingPost(params?: {\n    body?: { 'blockId': string, 'name'?: string, 'screenshotCollectionId': string, 'storyDocId': string }\n  }): Observable<ScreenShotId> {\n\n    return this.addScreenshotToCollectionUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<ScreenShotId>) => r.body as ScreenShotId)\n    );\n  }\n\n  /**\n   * Path part for operation removeScreenshotFromCollectionUsingDelete\n   */\n  static readonly RemoveScreenshotFromCollectionUsingDeletePath = '/api/ui/screenshot';\n\n  /**\n   * removeScreenshotFromCollection.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `removeScreenshotFromCollectionUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeScreenshotFromCollectionUsingDelete$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenshotCollectionId\n     */\n    screenshotCollectionId: string;\n\n    /**\n     * screenshotId\n     */\n    screenshotId: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.RemoveScreenshotFromCollectionUsingDeletePath, 'delete');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('screenshotCollectionId', params.screenshotCollectionId, {\"style\":\"form\"});\n      rb.query('screenshotId', params.screenshotId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * removeScreenshotFromCollection.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `removeScreenshotFromCollectionUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeScreenshotFromCollectionUsingDelete(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenshotCollectionId\n     */\n    screenshotCollectionId: string;\n\n    /**\n     * screenshotId\n     */\n    screenshotId: string;\n  }): Observable<void> {\n\n    return this.removeScreenshotFromCollectionUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation downloadScreenshotUsingGet\n   */\n  static readonly DownloadScreenshotUsingGetPath = '/api/ui/screenshot/{storyDocId}/{blockId}/{screenshotCollectionId}/{screenshotId}';\n\n  /**\n   * downloadScreenshot.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `downloadScreenshotUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  downloadScreenshotUsingGet$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenshotCollectionId\n     */\n    screenshotCollectionId: string;\n\n    /**\n     * screenshotId\n     */\n    screenshotId: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.DownloadScreenshotUsingGetPath, 'get');\n    if (params) {\n      rb.path('storyDocId', params.storyDocId, {\"style\":\"simple\"});\n      rb.path('blockId', params.blockId, {\"style\":\"simple\"});\n      rb.path('screenshotCollectionId', params.screenshotCollectionId, {\"style\":\"simple\"});\n      rb.path('screenshotId', params.screenshotId, {\"style\":\"simple\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * downloadScreenshot.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `downloadScreenshotUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  downloadScreenshotUsingGet(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * screenshotCollectionId\n     */\n    screenshotCollectionId: string;\n\n    /**\n     * screenshotId\n     */\n    screenshotId: string;\n  }): Observable<void> {\n\n    return this.downloadScreenshotUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getScreenShotCollectionUsingGet\n   */\n  static readonly GetScreenShotCollectionUsingGetPath = '/api/ui/screenshotcollection';\n\n  /**\n   * getScreenShotCollection.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getScreenShotCollectionUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getScreenShotCollectionUsingGet$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * id\n     */\n    id: string;\n  }): Observable<StrictHttpResponse<ScreenShotCollectionDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.GetScreenShotCollectionUsingGetPath, 'get');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ScreenShotCollectionDto>;\n      })\n    );\n  }\n\n  /**\n   * getScreenShotCollection.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getScreenShotCollectionUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getScreenShotCollectionUsingGet(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * id\n     */\n    id: string;\n  }): Observable<ScreenShotCollectionDto> {\n\n    return this.getScreenShotCollectionUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<ScreenShotCollectionDto>) => r.body as ScreenShotCollectionDto)\n    );\n  }\n\n  /**\n   * Path part for operation createScreenShotCollectionUsingPost\n   */\n  static readonly CreateScreenShotCollectionUsingPostPath = '/api/ui/screenshotcollection';\n\n  /**\n   * createScreenShotCollection.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createScreenShotCollectionUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createScreenShotCollectionUsingPost$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<StrictHttpResponse<ScreenShotCollectionId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.CreateScreenShotCollectionUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ScreenShotCollectionId>;\n      })\n    );\n  }\n\n  /**\n   * createScreenShotCollection.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createScreenShotCollectionUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createScreenShotCollectionUsingPost(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<ScreenShotCollectionId> {\n\n    return this.createScreenShotCollectionUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<ScreenShotCollectionId>) => r.body as ScreenShotCollectionId)\n    );\n  }\n\n  /**\n   * Path part for operation getUiScenarioUsingGet\n   */\n  static readonly GetUiScenarioUsingGetPath = '/api/ui/uiscenario';\n\n  /**\n   * getUIScenario.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getUiScenarioUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUiScenarioUsingGet$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * id\n     */\n    id: string;\n  }): Observable<StrictHttpResponse<UiScenarioDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.GetUiScenarioUsingGetPath, 'get');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UiScenarioDto>;\n      })\n    );\n  }\n\n  /**\n   * getUIScenario.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getUiScenarioUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUiScenarioUsingGet(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * id\n     */\n    id: string;\n  }): Observable<UiScenarioDto> {\n\n    return this.getUiScenarioUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<UiScenarioDto>) => r.body as UiScenarioDto)\n    );\n  }\n\n  /**\n   * Path part for operation createUiScenarioUsingPost\n   */\n  static readonly CreateUiScenarioUsingPostPath = '/api/ui/uiscenario';\n\n  /**\n   * createUIScenario.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createUiScenarioUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createUiScenarioUsingPost$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<StrictHttpResponse<UiScenarioCoordinate>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.CreateUiScenarioUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UiScenarioCoordinate>;\n      })\n    );\n  }\n\n  /**\n   * createUIScenario.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createUiScenarioUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createUiScenarioUsingPost(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * name\n     */\n    name: string;\n  }): Observable<UiScenarioCoordinate> {\n\n    return this.createUiScenarioUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<UiScenarioCoordinate>) => r.body as UiScenarioCoordinate)\n    );\n  }\n\n  /**\n   * Path part for operation addScreenshotToUiScenarioUsingPost\n   */\n  static readonly AddScreenshotToUiScenarioUsingPostPath = '/api/ui/uiscenarioscreenshot';\n\n  /**\n   * addScreenshotToUIScenario.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addScreenshotToUiScenarioUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addScreenshotToUiScenarioUsingPost$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * uiScenarioId\n     */\n    uiScenarioId: string;\n\n    /**\n     * screenshotStoryDocId\n     */\n    screenshotStoryDocId: string;\n\n    /**\n     * screenshotBlockId\n     */\n    screenshotBlockId: string;\n\n    /**\n     * screenshotCollectionId\n     */\n    screenshotCollectionId: string;\n\n    /**\n     * screenshotId\n     */\n    screenshotId: string;\n\n    /**\n     * timeLineItemId\n     */\n    timeLineItemId: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.AddScreenshotToUiScenarioUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('uiScenarioId', params.uiScenarioId, {\"style\":\"form\"});\n      rb.query('screenshotStoryDocId', params.screenshotStoryDocId, {\"style\":\"form\"});\n      rb.query('screenshotBlockId', params.screenshotBlockId, {\"style\":\"form\"});\n      rb.query('screenshotCollectionId', params.screenshotCollectionId, {\"style\":\"form\"});\n      rb.query('screenshotId', params.screenshotId, {\"style\":\"form\"});\n      rb.query('timeLineItemId', params.timeLineItemId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * addScreenshotToUIScenario.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `addScreenshotToUiScenarioUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addScreenshotToUiScenarioUsingPost(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * uiScenarioId\n     */\n    uiScenarioId: string;\n\n    /**\n     * screenshotStoryDocId\n     */\n    screenshotStoryDocId: string;\n\n    /**\n     * screenshotBlockId\n     */\n    screenshotBlockId: string;\n\n    /**\n     * screenshotCollectionId\n     */\n    screenshotCollectionId: string;\n\n    /**\n     * screenshotId\n     */\n    screenshotId: string;\n\n    /**\n     * timeLineItemId\n     */\n    timeLineItemId: string;\n  }): Observable<void> {\n\n    return this.addScreenshotToUiScenarioUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation setUiScenarioTimeLineModelUsingPost\n   */\n  static readonly SetUiScenarioTimeLineModelUsingPostPath = '/api/ui/uiscenariotimelinemodel';\n\n  /**\n   * setUIScenarioTimeLineModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `setUiScenarioTimeLineModelUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  setUiScenarioTimeLineModelUsingPost$Response(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * uiScenarioId\n     */\n    uiScenarioId: string;\n\n    /**\n     * timeLineModelStoryDocId\n     */\n    timeLineModelStoryDocId: string;\n\n    /**\n     * timeLineModelBlockId\n     */\n    timeLineModelBlockId: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UiRestControllerService.SetUiScenarioTimeLineModelUsingPostPath, 'post');\n    if (params) {\n      rb.query('storyDocId', params.storyDocId, {\"style\":\"form\"});\n      rb.query('blockId', params.blockId, {\"style\":\"form\"});\n      rb.query('uiScenarioId', params.uiScenarioId, {\"style\":\"form\"});\n      rb.query('timeLineModelStoryDocId', params.timeLineModelStoryDocId, {\"style\":\"form\"});\n      rb.query('timeLineModelBlockId', params.timeLineModelBlockId, {\"style\":\"form\"});\n      rb.query('timeLineModelId', params.timeLineModelId, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * setUIScenarioTimeLineModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `setUiScenarioTimeLineModelUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  setUiScenarioTimeLineModelUsingPost(params: {\n\n    /**\n     * storyDocId\n     */\n    storyDocId: string;\n\n    /**\n     * blockId\n     */\n    blockId: string;\n\n    /**\n     * uiScenarioId\n     */\n    uiScenarioId: string;\n\n    /**\n     * timeLineModelStoryDocId\n     */\n    timeLineModelStoryDocId: string;\n\n    /**\n     * timeLineModelBlockId\n     */\n    timeLineModelBlockId: string;\n\n    /**\n     * timeLineModelId\n     */\n    timeLineModelId: string;\n  }): Observable<void> {\n\n    return this.setUiScenarioTimeLineModelUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "UIScenarioService",
            "id": "injectable-UIScenarioService-5e0dbeedcf3ed534fb0cfdd1abbaccb241c56c80f41d13c05168b1b1c80a64a84862fbfe4a5e251b6a7c990a01e9694f97b39f674e02d14015cdb66b1282de8f",
            "file": "src/app/ui/uiscenario-page/uiscenario.service.ts",
            "properties": [
                {
                    "name": "configStore",
                    "defaultValue": "new BehaviorSubject<ConfigPanelState>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "presentationMode$",
                    "defaultValue": "this.presentationStore.pipe(\n    map(store => store.presentationMode),\n    distinctUntilChanged()\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "presentationStore",
                    "defaultValue": "new BehaviorSubject<PresentationState>({presentationMode: false})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scenarioStore",
                    "defaultValue": "new BehaviorSubject<ScenarioPanelState>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "screenshotCollection$",
                    "defaultValue": "this.screenshotStore.pipe(\n    map(state => state.screenshotCollection),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "screenshotCollectionCoord$",
                    "defaultValue": "this.screenshotStore.pipe(\n    map(state => state.screenshotCollectionCoord),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "screenshotCollections$",
                    "defaultValue": "this.screenshotStore.pipe(\n    map(state => state.screenshotCollections),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "screenshotStore",
                    "defaultValue": "new BehaviorSubject<ScreenshotSelectionPanelState>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "state$",
                    "defaultValue": "this.scenarioStore.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "timeLine$",
                    "defaultValue": "this.state$.pipe(\n    map(state => state.timeLine),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "timeLineId$",
                    "defaultValue": "this.state$.pipe(\n    map(state => state.timeLineId),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "timeLineModel$",
                    "defaultValue": "this.state$.pipe(\n    map(state => state.timeLineModel),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "timeLineModels$",
                    "defaultValue": "this.configStore.pipe(\n    map(store => store.timeLineModels),\n    distinctUntilChanged()\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "uiScenario$",
                    "defaultValue": "this.state$.pipe(\n    map(state => state.uiScenarioDto),\n    distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methods": [
                {
                    "name": "addScreenshotToScenario",
                    "args": [
                        {
                            "name": "screenshotCoordinate",
                            "type": "ScreenshotCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "timeLineItemId",
                            "type": "TimeLineItemId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "screenshotCoordinate",
                            "type": "ScreenshotCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeLineItemId",
                            "type": "TimeLineItemId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "asArray",
                    "args": [
                        {
                            "name": "timeLines",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TimeLineDto[]",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeLines",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "defaultTimeline",
                    "args": [
                        {
                            "name": "dto",
                            "type": "TimeLineModelDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "TimeLineModelDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equalBlockCoordinate",
                    "args": [
                        {
                            "name": "coord1",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "coord2",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "coord1",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "coord2",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equalTimeLineCoord",
                    "args": [
                        {
                            "name": "tlmCoord1",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tlId1",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tlmCoord2",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tlId2",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tlmCoord1",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tlId1",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tlmCoord2",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tlId2",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equalTimeLineId",
                    "args": [
                        {
                            "name": "id1",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id2",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id1",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id2",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equalTimeLineModelCoord",
                    "args": [
                        {
                            "name": "coord1",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "coord2",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "coord1",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "coord2",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equalTimeLineModelId",
                    "args": [
                        {
                            "name": "id1",
                            "type": "TimeLineModelId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id2",
                            "type": "TimeLineModelId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id1",
                            "type": "TimeLineModelId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id2",
                            "type": "TimeLineModelId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAssociatedTimeLineModels",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadTimeLineModel",
                    "args": [
                        {
                            "name": "coord",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "coord",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTimeLineModelFromUIScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadUIScenario",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectFirst",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectLast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 329,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectPrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectScreenshotCollection",
                    "args": [
                        {
                            "name": "coord",
                            "type": "ScreenshotCollectionCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "coord",
                            "type": "ScreenshotCollectionCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTimeLineModel",
                    "args": [
                        {
                            "name": "timeLineModelCoordinate",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeLineModelCoordinate",
                            "type": "TimeLineModelCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setScenarioTimeLine",
                    "args": [
                        {
                            "name": "timeLineId",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeLineId",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "timeLineById",
                    "args": [
                        {
                            "name": "timeLineModel",
                            "type": "TimeLineModelDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "timeLineId",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TimeLineDto",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeLineModel",
                            "type": "TimeLineModelDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeLineId",
                            "type": "TimeLineId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "timelinesAsArray",
                    "args": [
                        {
                            "name": "timeLines",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TimeLineDto[]",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeLines",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePresentationMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Observable, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {\n  BlockCoordinate,\n  BlockId, ScreenshotCollectionCoordinate, ScreenShotCollectionDto, ScreenshotCollectionSummaryDto,\n  ScreenshotCoordinate,\n  StoryDocId, TimeLineDto,\n  TimeLineId,\n  TimeLineItemId,\n  TimeLineModelCoordinate,\n  TimeLineModelDto,\n  TimeLineModelId,\n  TimeLineModelSummaryDto,\n  UiScenarioCoordinate,\n  UiScenarioDto\n} from \"@storydoc/models\";\nimport {log, logChangesToObservable} from \"@storydoc/common\";\nimport {TimeLineControllerService, UiRestControllerService} from \"@storydoc/services\";\n\ninterface PresentationState {\n  presentationMode: boolean\n}\n\ninterface ScenarioPanelState {\n  uiScenarioCoord?: UiScenarioCoordinate,\n  uiScenarioDto?: UiScenarioDto,\n  timeLineModel?: TimeLineModelDto\n  timeLineId?: TimeLineId,\n  timeLine? : TimeLineDto\n}\n\ninterface ScreenshotSelectionPanelState {\n  screenshotCollections?: ScreenshotCollectionSummaryDto[]\n  screenshotCollectionCoord?: ScreenshotCollectionCoordinate\n  screenshotCollection?: ScreenShotCollectionDto\n}\n\ninterface ConfigPanelState {\n  timeLineModels?: TimeLineModelSummaryDto[]\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UIScenarioService implements OnDestroy {\n\n  constructor(\n    private uiRestControllerService: UiRestControllerService,\n    private timeLineControllerService: TimeLineControllerService\n  ) {\n    this.init()\n  }\n\n  // UIScenario, Timeline selection\n\n  private scenarioStore = new BehaviorSubject<ScenarioPanelState>({})\n  state$ = this.scenarioStore.asObservable()\n\n  uiScenario$ = this.state$.pipe(\n    map(state => state.uiScenarioDto),\n    distinctUntilChanged(),\n  )\n\n  timeLineModel$ = this.state$.pipe(\n    map(state => state.timeLineModel),\n    distinctUntilChanged(),\n  )\n\n  timeLineId$ = this.state$.pipe(\n    map(state => state.timeLineId),\n    distinctUntilChanged(),\n  )\n\n  timeLine$ = this.state$.pipe(\n    map(state => state.timeLine),\n    distinctUntilChanged(),\n  )\n\n  // ScreenshotSelection\n\n  screenshotStore = new BehaviorSubject<ScreenshotSelectionPanelState>({})\n\n  screenshotCollections$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollections),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollectionCoord$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollectionCoord),\n    distinctUntilChanged(),\n  )\n\n  screenshotCollection$ = this.screenshotStore.pipe(\n    map(state => state.screenshotCollection),\n    distinctUntilChanged(),\n  )\n\n  // Config panel\n\n  private configStore = new BehaviorSubject<ConfigPanelState>({})\n  timeLineModels$ = this.configStore.pipe(\n    map(store => store.timeLineModels),\n    distinctUntilChanged()\n  )\n\n  private get uiScenario(): UiScenarioDto {\n    return this.scenarioStore.getValue()?.uiScenarioDto\n  }\n\n  private get uiScenarioCoord(): UiScenarioCoordinate {\n    return this.scenarioStore.getValue()?.uiScenarioCoord\n  }\n\n  private get timeLineModel(): TimeLineModelDto {\n    return this.scenarioStore.getValue()?.timeLineModel\n  }\n\n  // Presentation state\n\n  private presentationStore = new BehaviorSubject<PresentationState>({presentationMode: false})\n\n  presentationMode$ = this.presentationStore.pipe(\n    map(store => store.presentationMode),\n    distinctUntilChanged()\n  )\n\n  private subscriptions: Subscription[] = []\n\n  init(): void {\n    log('init()')\n    this.subscriptions.push(logChangesToObservable('ScenarioStore$ >>', this.scenarioStore))\n    this.subscriptions.push(logChangesToObservable('ConfigStore$ >> ', this.configStore))\n    this.subscriptions.push(logChangesToObservable('TimeLineId$ >>', this.timeLineId$))\n    this.subscriptions.push(logChangesToObservable('timeLine$ >> ', this.timeLine$))\n    this.subscriptions.push(this.loadTimeLineModelFromUIScenario())\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  loadUIScenario(params: { storyDocId: StoryDocId, blockId: BlockId, uiScenarioId: string }) {\n    log(\"loadUIScenario(params)\", params)\n    this.screenshotStore.next({})\n    this.configStore.next({})\n    this.scenarioStore.next({\n      uiScenarioCoord: {\n        blockCoordinate: {\n          storyDocId: params.storyDocId,\n          blockId: params.blockId\n        },\n        uiScenarioId: {id: params.uiScenarioId}\n      }\n    })\n    this.reloadScenario()\n  }\n\n  public selectTimeLineModel(timeLineModelCoordinate: TimeLineModelCoordinate) {\n    log(\"selectTimeLineModel(coord)\", timeLineModelCoordinate)\n    this.uiRestControllerService.setUiScenarioTimeLineModelUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      timeLineModelStoryDocId: timeLineModelCoordinate.blockCoordinate.storyDocId.id,\n      timeLineModelBlockId: timeLineModelCoordinate.blockCoordinate.blockId.id,\n      timeLineModelId: timeLineModelCoordinate.timeLineModelId.id,\n    }).subscribe({\n      next: value => {\n        this.reloadScenario()\n      }\n    })\n  }\n\n  public setScenarioTimeLine(timeLineId: TimeLineId) {\n    log('setScenarioTimeLine(timeLineId)', timeLineId)\n    this.scenarioStore.next({\n      ... this.scenarioStore.value,\n      timeLineId,\n      timeLine: this.timeLineById(this.timeLineModel, timeLineId)\n    })\n  }\n\n  private timeLineById(timeLineModel: TimeLineModelDto, timeLineId: TimeLineId): TimeLineDto {\n    return this.timelinesAsArray(timeLineModel.timeLines).find(timeLine => timeLine.timeLineId.id === timeLineId.id)\n  }\n\n  private timelinesAsArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  public selectScreenshotCollection(coord: ScreenshotCollectionCoordinate) {\n    log('selectScreenshotCollection(coord)', coord)\n    this.uiRestControllerService.getScreenShotCollectionUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      id: coord.screenShotCollectionId.id\n    }).subscribe(collectionDto => {\n      this.screenshotStore.next({\n        ... this.screenshotStore.getValue(),\n        screenshotCollectionCoord: coord,\n        screenshotCollection: collectionDto\n      })\n    })\n  }\n\n  public addScreenshotToScenario(screenshotCoordinate: ScreenshotCoordinate, timeLineItemId: TimeLineItemId) {\n    log('addScreenshotToScenario(screenshotCoordinate, timeLineItemId)', screenshotCoordinate, timeLineItemId)\n    this.uiRestControllerService.addScreenshotToUiScenarioUsingPost({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      uiScenarioId: this.uiScenarioCoord.uiScenarioId.id,\n      screenshotStoryDocId: screenshotCoordinate.collectionCoordinate.blockCoordinate.storyDocId.id,\n      screenshotBlockId: screenshotCoordinate.collectionCoordinate.blockCoordinate.blockId.id,\n      screenshotCollectionId: screenshotCoordinate.collectionCoordinate.screenShotCollectionId.id,\n      screenshotId: screenshotCoordinate.screenShotId.id,\n      timeLineItemId: timeLineItemId.id\n    }).subscribe({\n      next: (value => this.reloadScenario())\n    })\n  }\n\n  private reloadScenario() {\n    log('reloadScenario()')\n    this.uiRestControllerService.getUiScenarioUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id,\n      id: this.uiScenarioCoord.uiScenarioId.id\n    }).subscribe({\n      next: uiScenarioDto => {\n        this.scenarioStore.next({\n          ...this.scenarioStore.getValue(),\n          uiScenarioDto: uiScenarioDto,\n        })\n        this.screenshotStore.next({\n          ... this.screenshotStore.getValue(),\n          screenshotCollections: uiScenarioDto.associatedCollections\n        })\n      }\n    })\n  }\n\n  private loadTimeLineModelFromUIScenario(): Subscription {\n    return this.uiScenario$.subscribe({\n      next: uiScenario => {\n        log('uiScenario$-->refreshTimeLineModelWhenScenarioUpdates()')\n        if (!this.equalTimeLineModelCoord(this.timeLineModel?.timeLineModelCoordinate, uiScenario?.timeLineModelCoordinate)) {\n          this.loadTimeLineModel(uiScenario.timeLineModelCoordinate)\n        }\n      }\n    })\n  }\n\n  private loadTimeLineModel(coord: TimeLineModelCoordinate) {\n    log('reloadTimeLineModel(coord)', coord)\n    this.timeLineControllerService.getTimeLineModelUsingGet({\n      storyDocId: coord.blockCoordinate.storyDocId.id,\n      blockId: coord.blockCoordinate.blockId.id,\n      timeLineModelId: coord.timeLineModelId.id\n    }).subscribe({\n      next: (dto) => {\n        let nextValue = <ScenarioPanelState>{\n          ...this.scenarioStore.getValue(),\n          timeLineModel: dto,\n        }\n        this.scenarioStore.next(nextValue)\n        let defaultId = this.defaultTimeline(dto)?.timeLineId\n        if (!nextValue.timeLineId && (defaultId)) {\n          this.setScenarioTimeLine(defaultId)\n        }\n      }\n    })\n  }\n\n  private equalTimeLineCoord(tlmCoord1: TimeLineModelCoordinate, tlId1: TimeLineId, tlmCoord2: TimeLineModelCoordinate, tlId2: TimeLineId) {\n    return this.equalTimeLineModelCoord(tlmCoord1, tlmCoord2) && this.equalTimeLineId(tlId1, tlId2)\n  }\n\n  private equalTimeLineModelCoord(coord1: TimeLineModelCoordinate, coord2: TimeLineModelCoordinate): boolean {\n    return this.equalTimeLineModelId(coord1?.timeLineModelId, coord2?.timeLineModelId) && this.equalBlockCoordinate(coord1?.blockCoordinate, coord2?.blockCoordinate)\n  }\n\n  private equalTimeLineId(id1: TimeLineId, id2: TimeLineId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalTimeLineModelId(id1: TimeLineModelId, id2: TimeLineModelId): boolean {\n    return id1?.id === id2?.id;\n  }\n\n  private equalBlockCoordinate(coord1: BlockCoordinate, coord2: BlockCoordinate): boolean {\n    return coord1?.storyDocId.id === coord2?.storyDocId.id && coord1?.blockId.id === coord2?.blockId.id;\n  }\n\n\n  public loadAssociatedTimeLineModels() {\n    log('loadAssociatedTimeLineModels()')\n    let uiScenario = this.uiScenario\n    this.timeLineControllerService.getTimeLineModelSummariesUsingGet({\n      storyDocId: this.uiScenarioCoord.blockCoordinate.storyDocId.id,\n      blockId: this.uiScenarioCoord.blockCoordinate.blockId.id\n    }).subscribe({\n      next: summaries => this.configStore.next({timeLineModels: summaries})\n    })\n  }\n\n  private defaultTimeline(dto: TimeLineModelDto) {\n    return this.asArray(dto.timeLines).find((timeLine)=> timeLine.name==='default');\n  }\n\n  private asArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  // presentation mode\n\n  togglePresentationMode() {\n    this.presentationStore.next({ presentationMode: !this.presentationStore.getValue().presentationMode })\n  }\n\n  selectFirst() {\n\n  }\n\n  selectPrevious() {\n\n  }\n\n  selectNext() {\n\n  }\n\n  selectLast() {\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeLineControllerService",
                        "type": "TimeLineControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeLineControllerService",
                        "type": "TimeLineControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "uiScenario": {
                    "name": "uiScenario",
                    "getSignature": {
                        "name": "uiScenario",
                        "type": "",
                        "returnType": "UiScenarioDto",
                        "line": 107
                    }
                },
                "uiScenarioCoord": {
                    "name": "uiScenarioCoord",
                    "getSignature": {
                        "name": "uiScenarioCoord",
                        "type": "",
                        "returnType": "UiScenarioCoordinate",
                        "line": 111
                    }
                },
                "timeLineModel": {
                    "name": "timeLineModel",
                    "getSignature": {
                        "name": "timeLineModel",
                        "type": "",
                        "returnType": "TimeLineModelDto",
                        "line": 115
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "WorkspaceRestControllerService",
            "id": "injectable-WorkspaceRestControllerService-a86e66f1a73f3061911132da04ddb9ebd18f52109cdb7ebb3ddb4bbd9a26934149d0915257ef9573c9c8c5103b578968660ac99e8e1c90bb6bb0e7500b431edc",
            "file": "src/app/api/services/workspace-rest-controller.service.ts",
            "properties": [
                {
                    "name": "AddFolderUsingPostPath",
                    "defaultValue": "'/api/folder/add'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation addFolderUsingPost</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nPath part for operation addFolderUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetFoldersUsingGetPath",
                    "defaultValue": "'/api/folder/folders'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getFoldersUsingGet</p>\n",
                    "line": 99,
                    "rawdescription": "\n\nPath part for operation getFoldersUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetRootFolderUsingGetPath",
                    "defaultValue": "'/api/folder/root'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getRootFolderUsingGet</p>\n",
                    "line": 153,
                    "rawdescription": "\n\nPath part for operation getRootFolderUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSettingsUsingGetPath",
                    "defaultValue": "'/api/folder/settings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSettingsUsingGet</p>\n",
                    "line": 204,
                    "rawdescription": "\n\nPath part for operation getSettingsUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addFolderUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FolderUrn>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddFolder.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `addFolderUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>addFolder.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>addFolderUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addFolderUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<FolderUrn>>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\naddFolder.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `addFolderUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>addFolder.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>addFolderUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFoldersUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<FolderDto>>",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetFolders.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getFoldersUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getFolders.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getFoldersUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFoldersUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<FolderDto>>>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetFolders.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getFoldersUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getFolders.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getFoldersUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRootFolderUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FolderUrn>",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetRootFolder.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getRootFolderUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getRootFolder.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getRootFolderUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRootFolderUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<FolderUrn>>",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetRootFolder.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getRootFolderUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getRootFolder.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getRootFolderUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettingsUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WorkspaceSettings>",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSettings.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSettingsUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSettings.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSettingsUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettingsUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<WorkspaceSettings>>",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSettings.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSettingsUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSettings.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSettingsUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Workspace Rest Controller</p>\n",
            "rawdescription": "\n\nWorkspace Rest Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { FolderDto } from '../models/folder-dto';\nimport { FolderUrn } from '../models/folder-urn';\nimport { WorkspaceSettings } from '../models/workspace-settings';\n\n\n/**\n * Workspace Rest Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WorkspaceRestControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation addFolderUsingPost\n   */\n  static readonly AddFolderUsingPostPath = '/api/folder/add';\n\n  /**\n   * addFolder.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addFolderUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addFolderUsingPost$Response(params?: {\n    path?: Array<string>;\n\n    /**\n     * folderName\n     */\n    folderName?: string;\n  }): Observable<StrictHttpResponse<FolderUrn>> {\n\n    const rb = new RequestBuilder(this.rootUrl, WorkspaceRestControllerService.AddFolderUsingPostPath, 'post');\n    if (params) {\n      rb.query('path', params.path, {\"style\":\"pipeDelimited\"});\n      rb.query('folderName', params.folderName, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<FolderUrn>;\n      })\n    );\n  }\n\n  /**\n   * addFolder.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `addFolderUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addFolderUsingPost(params?: {\n    path?: Array<string>;\n\n    /**\n     * folderName\n     */\n    folderName?: string;\n  }): Observable<FolderUrn> {\n\n    return this.addFolderUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<FolderUrn>) => r.body as FolderUrn)\n    );\n  }\n\n  /**\n   * Path part for operation getFoldersUsingGet\n   */\n  static readonly GetFoldersUsingGetPath = '/api/folder/folders';\n\n  /**\n   * getFolders.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getFoldersUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFoldersUsingGet$Response(params?: {\n    path?: Array<string>;\n  }): Observable<StrictHttpResponse<Array<FolderDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, WorkspaceRestControllerService.GetFoldersUsingGetPath, 'get');\n    if (params) {\n      rb.query('path', params.path, {\"style\":\"pipeDelimited\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<FolderDto>>;\n      })\n    );\n  }\n\n  /**\n   * getFolders.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getFoldersUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFoldersUsingGet(params?: {\n    path?: Array<string>;\n  }): Observable<Array<FolderDto>> {\n\n    return this.getFoldersUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<FolderDto>>) => r.body as Array<FolderDto>)\n    );\n  }\n\n  /**\n   * Path part for operation getRootFolderUsingGet\n   */\n  static readonly GetRootFolderUsingGetPath = '/api/folder/root';\n\n  /**\n   * getRootFolder.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getRootFolderUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRootFolderUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<FolderUrn>> {\n\n    const rb = new RequestBuilder(this.rootUrl, WorkspaceRestControllerService.GetRootFolderUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<FolderUrn>;\n      })\n    );\n  }\n\n  /**\n   * getRootFolder.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getRootFolderUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRootFolderUsingGet(params?: {\n  }): Observable<FolderUrn> {\n\n    return this.getRootFolderUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<FolderUrn>) => r.body as FolderUrn)\n    );\n  }\n\n  /**\n   * Path part for operation getSettingsUsingGet\n   */\n  static readonly GetSettingsUsingGetPath = '/api/folder/settings';\n\n  /**\n   * getSettings.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSettingsUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSettingsUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<WorkspaceSettings>> {\n\n    const rb = new RequestBuilder(this.rootUrl, WorkspaceRestControllerService.GetSettingsUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<WorkspaceSettings>;\n      })\n    );\n  }\n\n  /**\n   * getSettings.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSettingsUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSettingsUsingGet(params?: {\n  }): Observable<WorkspaceSettings> {\n\n    return this.getSettingsUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<WorkspaceSettings>) => r.body as WorkspaceSettings)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-d83b95cb897fd7f1ecc7216a31a9167598810a902c9c43ec11b6a93965548994186b900fe348e64bdf35a97b36d2fdb26731097dc1738e7f73bc67d2d432a47c",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HeaderParameter",
            "id": "class-HeaderParameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 176,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the HTTP request header</p>\n",
            "rawdescription": "\n\nA parameter in the HTTP request header\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Parameter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Parameter",
            "id": "class-Parameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultStyle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultExplode",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultStyle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultExplode",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>Base class for a parameter</p>\n",
            "rawdescription": "\n\nBase class for a parameter\n",
            "methods": [
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ParameterCodec",
            "id": "class-ParameterCodec-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "properties": [],
            "description": "<p>Custom parameter codec to correctly handle the plus sign in parameter\nvalues. See <a href=\"https://github.com/angular/angular/issues/18261\">https://github.com/angular/angular/issues/18261</a></p>\n",
            "rawdescription": "\n\nCustom parameter codec to correctly handle the plus sign in parameter\nvalues. See https://github.com/angular/angular/issues/18261\n",
            "methods": [
                {
                    "name": "decodeKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decodeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "HttpParameterCodec"
            ]
        },
        {
            "name": "PathParameter",
            "id": "class-PathParameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the operation path</p>\n",
            "rawdescription": "\n\nA parameter in the operation path\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Parameter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QueryParameter",
            "id": "class-QueryParameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 117,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the query</p>\n",
            "rawdescription": "\n\nA parameter in the query\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Parameter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RequestBuilder",
            "id": "class-RequestBuilder-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operationPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 204,
                "jsdoctags": [
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operationPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_bodyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any | null",
                    "optional": false,
                    "description": "",
                    "line": 203
                },
                {
                    "name": "_bodyContentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "_header",
                    "defaultValue": "new Map<string, HeaderParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 202,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_path",
                    "defaultValue": "new Map<string, PathParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 200,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_query",
                    "defaultValue": "new Map<string, QueryParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 201,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "operationPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 208,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>Helper to build http requests from parameters</p>\n",
            "rawdescription": "\n\nHelper to build http requests from parameters\n",
            "methods": [
                {
                    "name": "body",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'application/json'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the body content, along with the content type\n",
                    "description": "<p>Sets the body content, along with the content type</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'application/json'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpRequest<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBuilds the request with the current set parameters\n",
                    "description": "<p>Builds the request with the current set parameters</p>\n",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formDataValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "header",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a header parameter\n",
                    "description": "<p>Sets a header parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "path",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a path parameter\n",
                    "description": "<p>Sets a path parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a query parameter\n",
                    "description": "<p>Sets a query parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "LoadingDirective",
            "id": "directive-LoadingDirective-f27456acd2a83d507640c24823a2efdc62f362d7a8e64834afe9ff6af053091881e8ad1a4848c76ffd319606096890630db68d6ec0e8132e3a47a74a080a564c",
            "file": "src/app/common/loading.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[appLoading]'\n})\nexport class LoadingDirective {\n\n  constructor() { }\n\n}\n",
            "selector": "[appLoading]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            }
        },
        {
            "name": "VarDirective",
            "id": "directive-VarDirective-72882ad01cf68533191cc79e91e51a299e12b244110fb945fcd63c11c2d19f5659690892600c175fe949425ee83a649c827d06d52c65a8f9191ad58ff04fd40c",
            "file": "src/app/common/ng-var.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input, TemplateRef, ViewContainerRef} from \"@angular/core\";\n\n// cfr https://stackoverflow.com/questions/38582293/how-to-declare-a-variable-in-a-template-in-angular\n\n@Directive({\n  selector: '[ngVar]',\n})\nexport class VarDirective {\n  @Input()\n  set ngVar(context: unknown) {\n    this.context.$implicit = this.context.ngVar = context;\n\n    if (!this.hasView) {\n      this.vcRef.createEmbeddedView(this.templateRef, this.context);\n      this.hasView = true;\n    }\n  }\n\n  private context: {\n    $implicit: unknown;\n    ngVar: unknown;\n  } = {\n    $implicit: null,\n    ngVar: null,\n  };\n\n  private hasView: boolean = false;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private vcRef: ViewContainerRef\n  ) {}\n}\n",
            "selector": "[ngVar]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "ngVar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "context",
                    "defaultValue": "{\n    $implicit: null,\n    ngVar: null,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hasView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "ngVar": {
                    "name": "ngVar",
                    "setSignature": {
                        "name": "ngVar",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "context",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 10,
                        "jsdoctags": [
                            {
                                "name": "context",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AddScreenshotDialogComponent",
            "id": "component-AddScreenshotDialogComponent-d9d688e777829d02a27937820067977967056d8d3e4c25bf649b113873f02670a6d761c5507d7a8173d0a4bfb4b5cc0ef50ea0675168c7813166406a5e5fdbb9",
            "file": "src/app/ui/uiscenario-page/add-screenshot-dialog/add-screenshot-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-screenshot-dialog",
            "styleUrls": [
                "./add-screenshot-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-screenshot-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "AddScreenshotDialogInput",
                    "decorators": []
                },
                {
                    "name": "screenshotCollectionDTO",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ScreenShotCollectionDto",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "onConfirm",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    screenshot: new FormControl(null, Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ScreenShotCollectionDto} from \"@storydoc/models\";\n\nexport interface AddScreenshotDialogData {\n  screenshot: string,\n}\n\nexport interface AddScreenshotDialogInput {\n  mode: 'UPDATE' | 'NEW'\n  data: AddScreenshotDialogData\n}\n\n@Component({\n  selector: 'app-add-screenshot-dialog',\n  templateUrl: './add-screenshot-dialog.component.html',\n  styleUrls: ['./add-screenshot-dialog.component.scss']\n})\nexport class AddScreenshotDialogComponent {\n\n  @Input()\n  input: AddScreenshotDialogInput\n\n  @Input()\n  screenshotCollectionDTO: ScreenShotCollectionDto\n\n  formGroup: FormGroup = new FormGroup({\n    screenshot: new FormControl(null, Validators.required),\n  })\n\n  @Output()\n  private onConfirm = new EventEmitter()\n\n  @Output()\n  private onCancel = new EventEmitter()\n\n  cancel() {\n    this.onCancel.emit()\n  }\n\n  save() {\n    this.onConfirm.emit(this.formGroup.value)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-screenshot-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">Add Screenshot</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"formGroup\">\n        <div class=\"mb-3\">\n          <label for=\"name\" class=\"form-label\">Screenshot</label>\n          <select formControlName=\"screenshot\" class=\"form-select\" aria-label=\"Default select example\">\n            <ng-container *ngIf=\"screenshotCollectionDTO\">\n              <option *ngFor=\"let screenshot of screenshotCollectionDTO.screenShots\"\n                      [value]=\"screenshot.id.id\">{{screenshot.name}}</option>\n            </ng-container>\n          </select>\n          <div id=\"name\" class=\"form-text\">Select screenshot.</div>\n        </div>\n      </form>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\" [disabled]=\"!formGroup.valid\">Save changes</button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-78435fffa93f9126cc722ca3946b48733df1383daa82973b46427ae77123a3e3a3cf2c5fa5fd3adc6b346c37a17b1875bc528e93c246f1655135538343893b05",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'storydoc-frontend-ng'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'storydoc-frontend-ng';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "ArtifactBlockComponent",
            "id": "component-ArtifactBlockComponent-2a9a76b8c3e1d094805661280fa4699ef7e946f09e9a33c36dd9d8eb93f2fe0e73dcd840696d3527e14619991ee48eb4eaaa2d9f542889281d9650d5888c0fe5",
            "file": "src/app/document/document-page/block/artifact-block/artifact-block.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-artifact-block",
            "styleUrls": [
                "./artifact-block.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./artifact-block.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "artifacts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "Array<ArtifactDto>",
                    "decorators": []
                },
                {
                    "name": "blockId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "BlockId",
                    "decorators": []
                },
                {
                    "name": "documentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "StoryDocId",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlockChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "artifactDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtifactDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmationDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PopupMenuComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addArtifact",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeArtifactDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmAddArtifact",
                    "args": [
                        {
                            "name": "formData",
                            "type": "ArtifactDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "ArtifactDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmDeleteArtifact",
                    "args": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmRenameArtifact",
                    "args": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "ArtifactDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "ArtifactDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteArtifact",
                    "args": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editorUrl",
                    "args": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "icon",
                    "args": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openArtifactDialog",
                    "args": [
                        {
                            "name": "artifactDialogSpec",
                            "type": "ArtifactDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "artifactDialogSpec",
                            "type": "ArtifactDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renameArtifact",
                    "args": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {ConfirmationDialogSpec, ModalService, PopupMenuComponent} from \"@storydoc/common\";\nimport {ArtifactDto, BlockId, StoryDocId} from \"@storydoc/models\";\nimport {DocumentDataService} from \"../../document-data.service\";\nimport {ArtifactDialogData, ArtifactDialogSpec} from \"../../create-artifact-dialog/create-artifact-dialog.component\";\nimport {ArtifactDataService} from \"./artifact-data.service\";\n\n@Component({\n  selector: 'app-artifact-block',\n  templateUrl: './artifact-block.component.html',\n  styleUrls: ['./artifact-block.component.scss']\n})\nexport class ArtifactBlockComponent {\n\n  constructor(\n    private modalService: ModalService,\n    private documentDataService: DocumentDataService,\n    private artifactDataService: ArtifactDataService\n  ) {\n  }\n\n  @Input()\n  documentId: StoryDocId\n\n  @Input()\n  blockId: BlockId\n\n  @Input()\n  artifacts: Array<ArtifactDto>\n\n  @Output()\n  onBlockChanged = new EventEmitter()\n\n  refresh() {\n    this.onBlockChanged.emit()\n  }\n\n  // artifact list\n\n  editorUrl(artifact: ArtifactDto): string[] {\n    let descriptor = this.artifactDataService.descriptor(artifact.artifactType)\n    if (descriptor) {\n      return [descriptor.editorUrl, 'd', this.documentId.id, 'b', this.blockId.id, 'a', artifact.artifactId.id]\n    }\n    return ['/error-unknown-block-type']\n\n  }\n\n  icon(artifact: ArtifactDto) {\n    let descriptor = this.artifactDataService.descriptor(artifact.artifactType)\n    return descriptor ? descriptor.icon : ''\n  }\n\n  // artifact dialog\n\n  artifactDialogSpec: ArtifactDialogSpec\n\n  dialogId(): string {\n    return 'add-artifact-dialog-' + this.blockId.id\n  };\n\n\n  openArtifactDialog(artifactDialogSpec: ArtifactDialogSpec) {\n    this.artifactDialogSpec = artifactDialogSpec\n    this.modalService.open(this.dialogId())\n  }\n\n  closeArtifactDialog() {\n    this.modalService.close(this.dialogId())\n  }\n\n  // confirmation dialog\n  confirmationDialogId(): string {\n    return 'confirmation-dialog-' + this.blockId.id\n  }\n\n  confirmationDialogSpec: ConfirmationDialogSpec\n\n  openConfirmationDialog(confirmationDialogSpec: ConfirmationDialogSpec) {\n    this.confirmationDialogSpec = confirmationDialogSpec\n    this.modalService.open(this.confirmationDialogId())\n  }\n\n  closeConfirmationDialog() {\n    this.modalService.close(this.confirmationDialogId())\n  }\n\n\n  addArtifact() {\n    this.openArtifactDialog(\n      this.artifactDialogSpec = {\n        mode: 'NEW',\n        data: {\n          name: null,\n          artifactType: null\n        },\n        confirm: (data) => {\n          this.closeArtifactDialog(), this.confirmAddArtifact(data)\n        },\n        cancel: () => this.closeArtifactDialog()\n\n      })\n  }\n\n  confirmAddArtifact(formData: ArtifactDialogData) {\n    this.documentDataService.addArtifact(\n      {\n        artifactType: formData.artifactType,\n        blockId: this.blockId.id,\n        name: formData.name\n      }\n    )\n  }\n\n  @ViewChild(PopupMenuComponent) menu: PopupMenuComponent\n\n  openMenu(event: MouseEvent, artifact: ArtifactDto) {\n    this.menu.items = [\n      {\n        label: 'Rename',\n        onClick: () => this.renameArtifact(artifact)\n      },\n      {\n        label: 'Delete',\n        onClick: () => this.deleteArtifact(artifact)\n      }\n    ]\n    this.menu.open(event)\n    return false\n  }\n\n  private renameArtifact(artifact: ArtifactDto) {\n    this.openArtifactDialog({\n      mode: 'UPDATE',\n      data: {\n        name: artifact.name,\n        artifactType: artifact.artifactType\n      },\n      confirm: (data) => {\n        this.closeArtifactDialog();\n        this.confirmRenameArtifact(artifact, data)\n      },\n      cancel: () => this.closeArtifactDialog()\n    })\n  }\n\n  private confirmRenameArtifact(artifact: ArtifactDto, data: ArtifactDialogData) {\n    this.documentDataService.renameArtifact({\n      storyDocId: this.documentId,\n      blockId: this.blockId,\n      artifactId: artifact.artifactId,\n      name: data.name\n    })\n  }\n\n  private deleteArtifact(artifact: ArtifactDto) {\n    this.openConfirmationDialog({\n      title: 'Confirm Delete',\n      message: `Delete ${artifact.name} ?`,\n      confirm: () => {\n        this.closeConfirmationDialog(), this.confirmDeleteArtifact(artifact)\n      },\n      cancel: () => this.closeConfirmationDialog()\n    })\n  }\n\n\n  private confirmDeleteArtifact(artifact: ArtifactDto) {\n    this.documentDataService.deleteArtifact({\n      storyDocId: this.documentId,\n      blockId: this.blockId,\n      artifactId: artifact.artifactId,\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./artifact-block.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "documentDataService",
                        "type": "DocumentDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "artifactDataService",
                        "type": "ArtifactDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "documentDataService",
                        "type": "DocumentDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "artifactDataService",
                        "type": "ArtifactDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-panel>\n  <div class=\"d-flex flex-row\">\n    <div class=\"p-2\" *ngFor=\"let artifact of artifacts\" (contextmenu)=\"openMenu($event, artifact)\">\n      <a [routerLink]=\"editorUrl(artifact)\">\n        <img height=\"50\" width=\"50\" [src]=\"icon(artifact)\" alt=\"image\">\n        <div>{{artifact.name}}</div>\n      </a>\n    </div>\n  </div>\n  <div class=\"btn  btn-sm btn-outline-primary\" (click)=\"addArtifact()\">Add..</div>\n</app-panel>\n\n<app-popup-menu></app-popup-menu>\n\n<jw-modal [id]=\"dialogId()\">\n  <app-create-artifact-dialog [spec]=\"artifactDialogSpec\"></app-create-artifact-dialog>\n</jw-modal>\n\n\n<jw-modal [id]=\"confirmationDialogId()\">\n  <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "ArtifactSelectionDialogComponent",
            "id": "component-ArtifactSelectionDialogComponent-b5135469502e0cfb14f430db68d9a6c20f83c629c9537b9d11dcd3816bccf44f1605c767cc18333c11579b09772fca707049808eea2d943dba11ec68bd114d19",
            "file": "src/app/document/document-page/artifact-selection-dialog/artifact-selection-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-artifact-selection-dialog",
            "styleUrls": [
                "./artifact-selection-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./artifact-selection-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ArtifactSelectionDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "artifacts$",
                    "defaultValue": "this.service.artifacts$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "artifact",
                            "type": "ArtifactDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ArtifactDto, ArtifactId, BlockCoordinate} from \"@storydoc/models\";\nimport {ArtifactSelectionService} from \"./artifact-selection.service\";\n\nexport interface ArtifactSelectionDialogData  {\n}\n\nexport interface ArtifactSelectionDialogSpec  {\n  artifactType: string;\n  artifactLabel: string;\n  blockCoord: BlockCoordinate,\n  confirm: (selection: ArtifactId)=> void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-artifact-selection-dialog',\n  templateUrl: './artifact-selection-dialog.component.html',\n  styleUrls: ['./artifact-selection-dialog.component.scss']\n})\nexport class ArtifactSelectionDialogComponent implements OnInit, OnChanges {\n\n  @Input()\n  spec: ArtifactSelectionDialogSpec\n\n  constructor(private service: ArtifactSelectionService) { }\n\n  artifacts$ = this.service.artifacts$\n\n  ngOnInit(): void {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.spec) return\n    this.service.select(this.spec.artifactType, this.spec.blockCoord)\n  }\n\n\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  select(artifact: ArtifactDto) {\n    this.spec.confirm(artifact.artifactId)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./artifact-selection-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ArtifactSelectionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ArtifactSelectionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"modal-dialog\" *ngIf=\"spec\" >\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">Select {{spec.artifactLabel}}</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n\n    </div>\n    <div class=\"modal-body\">\n      <div *ngIf=\"artifacts$ | async as artifacts\">\n        <div *ngFor=\"let artifact of artifacts\" (click)=\"select(artifact)\">\n          {{artifact.name}}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "BackButtonComponent",
            "id": "component-BackButtonComponent-d0b64b5c602e1545f30e5142393474f20627e5484d2da6bc73bb31f380a66d93f3fed181196b0b7e048f1e0abdd546dff4fcba75f32979b1742a20a7d5d1c5e3",
            "file": "src/app/common/back-button/back-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-back-button",
            "styleUrls": [
                "./back-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./back-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any[] | string | null | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-back-button',\n  templateUrl: './back-button.component.html',\n  styleUrls: ['./back-button.component.scss']\n})\nexport class BackButtonComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  routerLink: any[] | string | null | undefined\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./back-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a style=\"text-decoration: none; \" [routerLink]=\"routerLink\">&thinsp; &#9664; &nbsp;</a>\n"
        },
        {
            "name": "BlockComponent",
            "id": "component-BlockComponent-048bff873af7b65b31480a9681788d7108c1542b1e4649f7837e9d8095f96b31ea81c5a80d12ff0c948548249ff3cac4b765b1050f99302a81e4fcb495035a14",
            "file": "src/app/document/document-page/block/block.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-block",
            "styleUrls": [
                "./block.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./block.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "block",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "BlockDto",
                    "decorators": []
                },
                {
                    "name": "documentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "StoryDocId",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlockChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numbering",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {BlockDto, StoryDocId} from \"@storydoc/models\";\n\n@Component({\n  selector: 'app-block',\n  templateUrl: './block.component.html',\n  styleUrls: ['./block.component.scss']\n})\nexport class BlockComponent implements OnInit {\n\n  constructor() {\n  }\n\n  @Input()\n  block: BlockDto\n\n  @Input()\n  documentId: StoryDocId\n\n  @Output()\n  onBlockChanged = new EventEmitter()\n\n  refresh() {\n    this.onBlockChanged.emit()\n  }\n\n  ngOnInit(): void {\n  }\n\n  numbering(): string {\n    if (!this.block) return ''\n    let val = ''\n    for (let nr of this.block.numbering) {\n      val += (val.length == 0 ? '' : '.') + nr\n    }\n    return val\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".block-border {\n  margin: 3px;\n}\n",
                    "styleUrl": "./block.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"block-border\">\n  <app-title [numbering]=\"block.numbering\" [text]=\"block.title\"></app-title>\n  <ng-container [ngSwitch]=\"block.blockType\">\n    <div *ngSwitchCase=\"'ARTIFACT'\">\n      <app-artifact-block [documentId]=\"documentId\" [blockId]=\"block.blockId\" [artifacts]=\"block.artifacts\"\n                          (onBlockChanged)=\"refresh()\"></app-artifact-block>\n    </div>\n    <!--\n        <div *ngSwitchCase=\"'UI'\">\n          <app-uiblock></app-uiblock>\n        </div>\n        <div *ngSwitchCase=\"'UI-WALK'\">\n          <app-ui-walkthrough></app-ui-walkthrough>\n        </div>\n        <div *ngSwitchCase=\"'DB-CONNECTION'\">\n        <app-ui-walkthrough></app-ui-walkthrough>\n    </div>\n    -->\n  </ng-container>\n</div>\n\n"
        },
        {
            "name": "BluePrintDiagramComponent",
            "id": "component-BluePrintDiagramComponent-9b90718562faf292629ec0a2e3e8e2a954bb145b2db47429a8a47c9502e40912a5ffac8639246f6e590c61a058f475d592f8bad6da4d6179f99eea5212c58c62",
            "file": "src/app/common/diagram/blue-print-diagram/blue-print-diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-blue-print-diagram",
            "styleUrls": [
                "./blue-print-diagram.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./blue-print-diagram.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bluePrint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "BluePrint",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {BluePrint} from \"../diagram-example/diagram-example.component\";\n\n@Component({\n  selector: 'app-blue-print-diagram',\n  templateUrl: './blue-print-diagram.component.html',\n  styleUrls: ['./blue-print-diagram.component.scss']\n})\nexport class BluePrintDiagramComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  bluePrint: BluePrint\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.title {\n  border-radius: 0 7px 0px 0px;\n  display: inline-block;\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  padding: 5px 10px;\n  background-color: rgb(255,236,217);\n}\n\n.body {\n  border: 1px solid black;\n  border-radius: 0 7px 0px 0px;\n  padding: 5px;\n  background-color: rgb(255,236,217);\n}\n",
                    "styleUrl": "./blue-print-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <span class=\"title\">{{bluePrint.name}}</span>\n  <div class=\"body\">\n    <ng-container *ngFor=\"let subElem of bluePrint.subElements\">\n      <ng-container *ngIf=\"subElem.type==='BluePrint'\">\n        <app-blue-print-diagram [bluePrint]=\"subElem\"></app-blue-print-diagram>\n      </ng-container>\n      <ng-container *ngIf=\"subElem.type==='ClassElem'\">\n        <app-class-role-diagram [classElem]=\"subElem\"></app-class-role-diagram>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "BlueprintPanelComponent",
            "id": "component-BlueprintPanelComponent-6e6a643ea7e76650957fda1a98486bf35f708283bbb2f8cce6450c9cdb5320ed367bef9686d275d393bf4e55d75ac85d9c61fdc4b6de3d01ba75ee489c753b0f",
            "file": "src/app/code/code-trace-page/blueprint-panel/blueprint-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-blueprint-panel",
            "styleUrls": [
                "./blueprint-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./blueprint-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bluePrintDiagram$",
                    "defaultValue": "this.service.bluePrintDiagram$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "isRole",
                    "args": [
                        {
                            "name": "element",
                            "type": "BluePrintElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "BluePrintElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toRole",
                    "args": [
                        {
                            "name": "element",
                            "type": "BluePrintElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Role",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "BluePrintElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {CodeService} from \"../../code.service\";\nimport {BluePrint, BluePrintElement, Role} from \"@storydoc/models\";\n\n@Component({\n  selector: 'app-blueprint-panel',\n  templateUrl: './blueprint-panel.component.html',\n  styleUrls: ['./blueprint-panel.component.scss']\n})\nexport class BlueprintPanelComponent implements OnInit {\n\n  constructor(private service: CodeService) { }\n\n  bluePrintDiagram$ = this.service.bluePrintDiagram$\n\n  ngOnInit(): void {\n  }\n\n  isRole(element: BluePrintElement) {\n    return element.type === 'Role'\n\n  }\n\n  toRole(element: BluePrintElement): Role {\n    return <Role> element\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./blueprint-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"bluePrintDiagram$ | async as bluePrintDiagram\" >\n  <svg *ngIf=\"bluePrintDiagram.layout.type === 'FlexLayout'\">\n    <ng-container *ngFor=\"let element of bluePrint.elements, let idx = index\">\n      <ng-container *ngIf=\"isRole(element)\" >\n        <ng-container *ngVar=\"toRole(element) as role\">\n          <rect [attr.x]=\"10*idx\" [attr.y]=\"10*idx\" width=\"200\" height=\"200\" stroke=\"black\" stroke-width=\"1\" fill=\"none\" *ngFor=\"let element of bluePrint.elements\" style=\"border: 1px solid blue; padding: 10px; margin: 10px;\"></rect>\n          <text style=\"fill: red;\" [attr.x]=\"120 + 50*idx\" [attr.y]=\"50*idx\">{{ role.name }}</text>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </svg>\n</ng-container>\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-dad86110ba7711e926eb48831aea0421e07bb62a81f1c4f9a5e639859b325f1ca5bfbe2d41d1263602b410eb664534a5db5171982cdd90694c2c00577de2a863",
            "file": "src/app/common/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>breadcrumb works!</p>\n"
        },
        {
            "name": "CanvasComponent",
            "id": "component-CanvasComponent-246b202a9a2107c5374ee24cbd86cf92d0d9f331f1025b05d1696a13bca4c8e557369c419d5d568e280fd59aa3e76a9eaf884158931580601969e2da7de6b450",
            "file": "src/app/ui/screen-design-page/canvas/canvas.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-canvas",
            "styleUrls": [
                "./canvas.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./canvas.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canvasElem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvasElem'"
                        }
                    ]
                },
                {
                    "name": "lassoSelect",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "screenDesign$",
                    "defaultValue": "this.service.screenDesign$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selection$",
                    "defaultValue": "this.service.selection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "allowDrop",
                    "args": [
                        {
                            "name": "ev",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doDrop",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "ev",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "child",
                            "type": "SdComponentTypeSelectionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "child",
                            "type": "SdComponentTypeSelectionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAttributeValue",
                    "args": [
                        {
                            "name": "attName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKeyboardEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selection",
                            "type": "SdComponentDto | \"NONE\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selection",
                            "type": "SdComponentDto | \"NONE\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lassoSelectBegin",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lassoSelectStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "SdComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "style",
                    "args": [
                        {
                            "name": "child",
                            "type": "SdComponentTypeSelectionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "child",
                            "type": "SdComponentTypeSelectionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport { HostListener } from '@angular/core';\nimport {ComponentDescriptorDto, SdComponentDto, SdComponentTypeSelectionDto} from \"@storydoc/models\";\nimport {ScreenDesignService} from \"../screen-design.service\";\n\nexport interface DragRequest {\n  type: 'ADD_COMPONENT' | 'MOVE_COMPONENT'\n  add: AddComponentData\n  move:  MoveComponentData\n}\n\nexport interface AddComponentData {\n  dx: number,\n  dy: number,\n  desc: ComponentDescriptorDto\n}\n\nexport interface MoveComponentData {\n  x0: number,\n  y0: number,\n  component: SdComponentDto\n}\n\n@Component({\n  selector: 'app-canvas',\n  templateUrl: './canvas.component.html',\n  styleUrls: ['./canvas.component.scss']\n})\nexport class CanvasComponent implements OnInit {\n\n  constructor(private service: ScreenDesignService) {\n  }\n\n  @HostListener('document:keyup', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if(event.key === 'Delete'){\n      this.service.deleteSelection()\n    }\n  }\n\n  screenDesign$ = this.service.screenDesign$\n\n  selection$ = this.service.selection$\n\n  ngOnInit(): void {\n  }\n\n  allowDrop(ev: DragEvent) {\n    ev.preventDefault();\n  }\n\n  @ViewChild(\"canvasElem\") canvasElem: ElementRef\n\n  doDrop(ev: any) {\n    ev.preventDefault();\n    var data = ev.dataTransfer.getData(\"text\");\n    let request = <DragRequest>JSON.parse(data)\n\n    if (request.type==='ADD_COMPONENT') {\n      let coord =  {\n        x: ev.clientX - this.canvasElem.nativeElement.getBoundingClientRect().left - request.add.dx,\n        y: ev.clientY - this.canvasElem.nativeElement.getBoundingClientRect().top -request.add.dy\n      }\n      let componentDescriptor = request.add.desc\n      this.service.addComponent(componentDescriptor, coord)\n    }\n    else if (request.type==='MOVE_COMPONENT') {\n      let dx = request.move.x0 - ev.clientX\n      let dy = request.move.y0 - ev.clientY\n      let coord =  {\n        x: request.move.component.x - dx,\n        y: request.move.component.y - dy\n      }\n      this.service.moveComponent(request.move.component, coord)\n    }\n\n  }\n\n\n  getAttributeValue(attName: string, component: SdComponentDto): string {\n    let attribute = component.attributes.find(att => att.name===attName)\n    return attribute ? attribute.value : component.name\n  }\n\n  select(component: SdComponentDto) {\n    this.service.selectComponent(component)\n  }\n\n  isSelected(component: SdComponentDto, selection: SdComponentDto | \"NONE\") {\n    if (selection==='NONE') return false\n    return component?.id.id === selection?.id.id\n  }\n\n  style(child: SdComponentTypeSelectionDto, index: number): string {\n    let style =  'position: absolute; top:'+(child.component.y)+'px; left:'+(child.component.x) + 'px;'\n    return style\n  }\n\n  dragStart(ev: DragEvent, child: SdComponentTypeSelectionDto) {\n    let x0 = ev.clientX\n    let y0 = ev.clientY\n    ev.dataTransfer.setData(\"text\", JSON.stringify(<DragRequest>{\n      type : 'MOVE_COMPONENT',\n      move: { x0, y0, component: child.component}\n    }));\n\n  }\n\n  lassoSelect: boolean = false\n  lassoSelectBegin(event: any) {\n    if (event.target.id != 'canvas') return\n    this.lassoSelect = true\n    console.log(event)\n  }\n\n  lassoSelectStyle() : string {\n    return this.lassoSelect? \"\" : \"visibility: hidden;\"\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../common/variables\";\n\n.canvas-container {\n  min-height: calc(100vh - 200px);\n}\n\n.canvas-selected {\n  border: 2px solid $red-600;\n}\n\n/*\n.sketchy {\n    @import 'bootstrap-sketchy.min';\n}\n\n.quartz {\n   @import 'bootstrap-quartz.min';\n}\n\n.mdbdark {\n  @import 'mdb.dark.min';\n}\n*/\n",
                    "styleUrl": "./canvas.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel>\n  <div id=\"canvas\" class=\"quartz  canvas-container\" (mousedown)=\"lassoSelectBegin($event)\" (dragover)=\"allowDrop($event)\" (drop)=\"doDrop($event)\" #canvasElem>\n    <!-- <div #lassoSelectElem [style]=\"lassoSelectStyle()\">lasso</div> -->\n    <div *ngIf=\"screenDesign$ | async as screenDesign\">\n      <div style= \"position: relative;\"  *ngIf=\"selection$ | async as selection\">\n        <div *ngFor=\"let child of screenDesign.rootContainer.children, let idx = index\"\n             [style]=\"style(child, idx)\"   draggable=\"true\" (dragstart)=\"dragStart($event, child)\"\n        >\n          <ng-container *ngIf=\"child.component as component\">\n            <div  [class.canvas-selected]=\"isSelected(component, selection)\" [ngSwitch]=\"component.type\"  (click)=\"select(component)\">\n              <div *ngSwitchCase=\"'BUTTON'\">\n                <button  class=\"btn btn-outline-primary\">{{getAttributeValue(\"value\", component)}}</button>\n              </div>\n              <div *ngSwitchCase=\"'TEXT'\">\n                Lorem ipsum\n              </div>\n              <div *ngSwitchCase=\"'IMAGE'\">\n                <img width=\"150\" height=\"150\" src=\"assets/wireframe-image.png\">\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</app-panel>\n"
        },
        {
            "name": "ClassRoleDiagramComponent",
            "id": "component-ClassRoleDiagramComponent-f278b98416ee5c871e50f701536b2a5463dc50dade066cace0a3bcce79aefc074e2030c8bb43334a2937eb203e4b977254ed2840f848b3734f8be27d205fa925",
            "file": "src/app/common/diagram/class-role-diagram/class-role-diagram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-class-role-diagram",
            "styleUrls": [
                "./class-role-diagram.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./class-role-diagram.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classElem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "ClassElem",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {ClassElem} from \"../diagram-example/diagram-example.component\";\n\n\n@Component({\n  selector: 'app-class-role-diagram',\n  templateUrl: './class-role-diagram.component.html',\n  styleUrls: ['./class-role-diagram.component.scss']\n})\nexport class ClassRoleDiagramComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  classElem: ClassElem\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: inline-block;\n  max-width: 220px;\n  padding: 0;\n  background-color: rgb(213,250,205);\n  border-radius: 2px 2px 2px 2px;\n  border: 1px solid grey;\n}\n\n.title {\n  font-weight: bold;\n  text-align: center;\n  border-bottom: 1px solid grey;\n  padding: 10px;\n}\n\n.body {\n  padding: 10px;\n}\n",
                    "styleUrl": "./class-role-diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"title\">{{classElem.name}}</div>\n  <div class=\"body\">\n    <ng-container *ngFor=\"let method of classElem.methods\">\n      <div [id]=\"method.id\">\n        +  {{method.methodName}}\n      </div>\n    </ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "CodeConfigurationDialogComponent",
            "id": "component-CodeConfigurationDialogComponent-9d5e7fe52bb74b6ea4b7b44ecf58062d6a5182bb5647ce8809f7024b33d348c8261560c679231a2636d09a73bf67f6f4c8368b6da96cab17d973c59e8c917af7",
            "file": "src/app/code/code-configuration-page/code-configuration-dialog/code-configuration-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-code-configuration-dialog",
            "styleUrls": [
                "./code-configuration-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./code-configuration-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "CodeConfigurationSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    path: new FormControl(null, Validators.required),\n    addMore: new FormControl(null)\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "pathField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'path'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {setFocusOn} from \"@storydoc/common\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\n\nexport interface CodeConfigurationData {\n  path: string,\n  addMore: boolean\n}\n\nexport interface CodeConfigurationSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: CodeConfigurationData\n  confirm: (CodeConfigurationData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-code-configuration-dialog',\n  templateUrl: './code-configuration-dialog.component.html',\n  styleUrls: ['./code-configuration-dialog.component.scss']\n})\nexport class CodeConfigurationDialogComponent implements OnChanges {\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n  }\n\n  @Input()\n  spec: CodeConfigurationSpec\n\n  @ViewChild('path') pathField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      //this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n     // setFocusOn(this.pathField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    path: new FormControl(null, Validators.required),\n    addMore: new FormControl(null)\n  })\n\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  save() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./code-configuration-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"modal-dialog\" *ngIf=\"spec\">\n  <form [formGroup]=\"formGroup\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\">{{spec.mode=='NEW' ? 'Add' : 'Edit' }} Path</h5>\n        <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"mb-3\">\n          <label for=\"path\" class=\"form-label\">Path</label>\n          <input formControlName=\"path\" type=\"text\" class=\"form-control\" #path>\n          <div id=\"path\" class=\"form-text\">Enter a path to the source code.</div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"form-check\" *ngIf=\"spec.mode=='NEW'\">\n          <input formControlName=\"addMore\" class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\n          <label class=\"form-check-label\" for=\"flexCheckDefault\">\n            Add more\n          </label>\n        </div>\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\" [disabled]=\"!formGroup.valid\">Save</button>\n        <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n      </div>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "CodeConfigurationPageComponent",
            "id": "component-CodeConfigurationPageComponent-9f120632a65cf63330f6311cbdca63aa81f8fccdf4027694959e57d12892a5e670deeeae91f0466e3d0a03cb9b19e3d18044ce92fba43dc279b9b0a8d20c8cbf",
            "file": "src/app/code/code-configuration-page/code-configuration-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-code-configuration-page",
            "styleUrls": [
                "./code-configuration-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./code-configuration-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "codeConfigurationSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeConfigurationSpec",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "config$",
                    "defaultValue": "this.codeService.config$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PopupMenuComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addPath",
                    "args": [
                        {
                            "name": "addMore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addMore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "artifactSelectionDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeArtifactSelectionDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeConfigDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmAddPath",
                    "args": [
                        {
                            "name": "data",
                            "type": "CodeConfigurationData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "CodeConfigurationData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openArtifactSelectionDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openConfigDialog",
                    "args": [
                        {
                            "name": "dialogInput",
                            "type": "CodeConfigurationSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dialogInput",
                            "type": "CodeConfigurationSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SourceCodeConfigDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dir",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "SourceCodeConfigDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dir",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CodeService} from \"../code.service\";\nimport {SourceCodeConfigCoordinate} from '@storydoc/models'\nimport {LinkService, ModalService, PopupMenuComponent} from \"@storydoc/common\";\nimport {CodeConfigurationData, CodeConfigurationSpec} from \"./code-configuration-dialog/code-configuration-dialog.component\";\nimport {SourceCodeConfigDto} from \"../../api/models/source-code-config-dto\";\n\n@Component({\n  selector: 'app-code-configuration-page',\n  templateUrl: './code-configuration-page.component.html',\n  styleUrls: ['./code-configuration-page.component.scss']\n})\nexport class CodeConfigurationPageComponent implements OnInit {\n\n  constructor(\n    private route: ActivatedRoute,\n    public link: LinkService,\n    private modalService: ModalService,\n    private codeService: CodeService\n  ) { }\n\n  config$ = this.codeService.config$\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe((params) => {\n      let documentId = params.get('documentId')\n      let blockId = params.get('blockId')\n      let id = params.get('artifactId')\n      if (id) {\n        this.codeService.loadConfig(<SourceCodeConfigCoordinate>{\n            blockCoordinate: {\n              storyDocId: { id: documentId },\n              blockId: { id: blockId }\n            },\n            sourceCodeConfigId: { id: id}\n        });\n      }\n    });\n  }\n\n  // config dialog\n  codeConfigurationSpec: CodeConfigurationSpec\n\n  getDialogId() {\n    return \"code-configuration-dialog\"\n  }\n\n  openConfigDialog(dialogInput: CodeConfigurationSpec) {\n    this.codeConfigurationSpec = dialogInput\n    this.modalService.open(this.getDialogId())\n  }\n\n  closeConfigDialog() {\n    this.modalService.close(this.getDialogId())\n  }\n\n  addPath(addMore: boolean = false) {\n    this.openConfigDialog({\n      mode: 'NEW',\n      data: {\n        path: null,\n        addMore\n      },\n      confirm: (data) => {\n        this.confirmAddPath(data)\n        this.closeConfigDialog()\n        if (data.addMore) this.addPath(true)\n      },\n      cancel: () => this.closeConfigDialog()\n    })\n  }\n\n  confirmAddPath(data: CodeConfigurationData) {\n    this.codeService.addPathToConfig(data.path)\n  }\n\n  // popup menu\n  @ViewChild(PopupMenuComponent) menu: PopupMenuComponent\n\n  openMenu(event: MouseEvent, config: SourceCodeConfigDto , dir: string) {\n    this.menu.items = [\n      {\n        label: 'Rename',\n        onClick: () => {} // todo\n      },\n      {\n        label: 'Delete',\n        onClick: () => {} // todo\n      }\n    ]\n    this.menu.open(event)\n    return false\n\n  }\n\n  // artifact selction dialog\n\n  artifactSelectionDialogId(): string {\n    return 'artifact-selection-dialog-id'\n  };\n\n  openArtifactSelectionDialog() {\n    this.modalService.open(this.artifactSelectionDialogId())\n  }\n\n  closeArtifactSelectionDialog() {\n    this.modalService.close(this.artifactSelectionDialogId())\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./code-configuration-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "codeService",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "codeService",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-2col\n  [breadcrumb]=\"breadcrumb\"\n  [title]=\"title\"\n  [leftColumn]=\"itemList\">\n</app-layout-2col>\n\n<ng-template #breadcrumb>\n  <ng-container *ngIf=\"config$ | async as config\">\n    <nav>\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <app-back-button [routerLink]=\"link.toStoryDoc(config.storyDocSummary)\"></app-back-button>\n          <a routerLink=\"/\">Home</a>\n        </li>\n        <li class=\"breadcrumb-item\">\n          <a [routerLink]=\"link.toStoryDoc(config.storyDocSummary)\">{{config.storyDocSummary.name}}</a>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{config.name}}</li>\n      </ol>\n    </nav>\n  </ng-container>\n</ng-template>\n\n<ng-template #title>\n  <div class=\"container-fluid\" *ngIf=\"config$ | async as config\">\n    <div class=\"row\">\n      <h3>Timeline: {{config.name}}</h3>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #itemList>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div *ngIf=\"config$ | async as config ; else loading\">\n          <ul class=\"list-group\">\n            <li *ngFor=\"let dir of config.dirs\" (contextmenu)=\"openMenu($event, config, dir)\" class=\"list-group-item\">\n              {{dir}}\n            </li>\n          </ul>\n      </div>\n      <div class=\"btn  btn-sm btn-outline-primary\" (click)=\"addPath()\">Add path</div>\n    </div>\n  </div>\n</ng-template>\n\n<app-popup-menu></app-popup-menu>\n\n<ng-template #loading>loading...</ng-template>\n\n<jw-modal [id]=\"getDialogId()\">\n  <app-code-configuration-dialog [spec]=\"codeConfigurationSpec\"></app-code-configuration-dialog>\n</jw-modal>\n"
        },
        {
            "name": "CodeTraceConfigurationDialogComponent",
            "id": "component-CodeTraceConfigurationDialogComponent-f5ae8932c7a45154722bd1f5d2e7d6e806515ee548e9c4437c6de8553f2dba8850d37beca62b010a0d6d8e8d1e02d4ce26a3028944e33302e447fb95a6b5c997",
            "file": "src/app/code/code-trace-page/code-trace-configuration-dialog/code-trace-configuration-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-code-trace-configuration-dialog",
            "styleUrls": [
                "./code-trace-configuration-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./code-trace-configuration-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "CodeTraceConfigDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "artifactSelectionDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtifactSelectionDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    stitchFile: new FormControl(null, Validators.required),\n    testClass: new FormControl(null, Validators.required),\n    testMethod: new FormControl(null, Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "artifactSelectionDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeArtifactSelectionDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmSelection",
                    "args": [
                        {
                            "name": "blockCoordinate",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "artifactId",
                            "type": "ArtifactId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "blockCoordinate",
                            "type": "BlockCoordinate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "artifactId",
                            "type": "ArtifactId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openArtifactSelectionDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "ArtifactSelectionDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "ArtifactSelectionDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCodeConfigArtifact",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ModalService} from \"@storydoc/common\";\nimport {CodeService} from \"../../code.service\";\nimport {ArtifactSelectionDialogSpec} from \"../../../document/document-page/artifact-selection-dialog/artifact-selection-dialog.component\";\nimport {ArtifactDto, ArtifactId, BlockCoordinate, CodeExecutionCoordinate} from \"@storydoc/models\";\n\nexport interface CodeTraceConfigDialogData  {\n  stitchFile: string,\n  testClass: string,\n  testMethod: string\n}\n\nexport interface CodeTraceConfigDialogSpec  {\n  coord: CodeExecutionCoordinate\n  data: CodeTraceConfigDialogData\n  confirm: (data: CodeTraceConfigDialogData)=> void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-code-trace-configuration-dialog',\n  templateUrl: './code-trace-configuration-dialog.component.html',\n  styleUrls: ['./code-trace-configuration-dialog.component.scss']\n})\nexport class CodeTraceConfigurationDialogComponent implements OnInit {\n\n  constructor(\n    private modalService: ModalService,\n    private service: CodeService)\n  { }\n\n  @Input()\n  spec: CodeTraceConfigDialogSpec\n\n\n  ngOnInit(): void {\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    stitchFile: new FormControl(null, Validators.required),\n    testClass: new FormControl(null, Validators.required),\n    testMethod: new FormControl(null, Validators.required),\n  })\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n  // artifact selection dialog\n\n  artifactSelectionDialogSpec: ArtifactSelectionDialogSpec\n\n  selectCodeConfigArtifact() {\n     this.openArtifactSelectionDialog({\n       artifactType: 'io.storydoc.server.code.domain.SourceCodeConfig',\n       artifactLabel: 'SourceCode Configuration',\n       blockCoord: this.spec.coord.blockCoordinate,\n       cancel: () => this.closeArtifactSelectionDialog(),\n       confirm: (artifactId) => { this.confirmSelection(this.spec.coord.blockCoordinate, artifactId); this.closeArtifactSelectionDialog()},\n     });\n  }\n\n  artifactSelectionDialogId(): string {\n    return 'artifact-selection-dialog-id'\n  };\n\n  openArtifactSelectionDialog(spec: ArtifactSelectionDialogSpec) {\n    this.artifactSelectionDialogSpec = spec\n    this.modalService.open(this.artifactSelectionDialogId())\n  }\n\n  closeArtifactSelectionDialog() {\n    this.modalService.close(this.artifactSelectionDialogId())\n  }\n\n\n  private confirmSelection(blockCoordinate: BlockCoordinate, artifactId: ArtifactId) {\n    this.service.setCodeExecutionConfig(blockCoordinate, artifactId)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./code-trace-configuration-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-dialog\" >\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">Configure Code Trace</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"formGroup\">\n        <div class=\"mb-3\">\n          <label class=\"form-label\">Sourcecode location</label>\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"selectCodeConfigArtifact()\">Select...</button>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"stitchFile\" class=\"form-label\">Stitch File Location</label>\n          <input formControlName=\"stitchFile\" type=\"text\" class=\"form-control\">\n          <div id=\"stitchFile\" class=\"form-text\">Enter location of the stitch file.</div>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"testClass\" class=\"form-label\">Test Class Name</label>\n          <input formControlName=\"testClass\" type=\"text\" class=\"form-control\">\n          <div id=\"testClass\" class=\"form-text\">Enter test class name.</div>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"testMethod\" class=\"form-label\">Test Method Name</label>\n          <input formControlName=\"testMethod\" type=\"text\" class=\"form-control\">\n          <div id=\"testMethod\" class=\"form-text\">Enter test method name.</div>\n        </div>\n\n      </form>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">OK</button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </div>\n</div>\n\n<jw-modal [id]=\"artifactSelectionDialogId()\">\n  <app-artifact-selection-dialog [spec]=\"artifactSelectionDialogSpec\"></app-artifact-selection-dialog>\n</jw-modal>\n"
        },
        {
            "name": "CodeTracePageComponent",
            "id": "component-CodeTracePageComponent-11fc818e70e5926b69d4d886a0ed295e89904ba61eaa9a66819de5567accfbd74281fce1ad112cc2eee50197cf84524a893d2b6fead4a8fdc6f00b58ef9c7ae1",
            "file": "src/app/code/code-trace-page/code-trace-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-code-trace-page",
            "styleUrls": [
                "./code-trace-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./code-trace-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "codeTrace$",
                    "defaultValue": "this.codeService.codeTrace$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "codeTraceConfigDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeTraceConfigDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "codeTraceCoord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodeExecutionCoordinate",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "codeTraceCoord$",
                    "defaultValue": "this.codeService.codeTraceCoord$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "configurationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "configure",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmConfig",
                    "args": [
                        {
                            "name": "data",
                            "type": "CodeTraceConfigDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "CodeTraceConfigDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {CodeExecutionEnterEvent, CodeExecutionReturnEvent, CodeService, isCodeTestCaseBDDEvent, StitchEvent, TestCaseBDDEvent} from \"../code.service\";\nimport {LinkService, ModalService} from \"@storydoc/common\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CodeExecutionCoordinate, StitchItemDto} from \"@storydoc/models\";\nimport {CodeTraceConfigDialogData, CodeTraceConfigDialogSpec} from \"./code-trace-configuration-dialog/code-trace-configuration-dialog.component\";\nimport {Subscription} from \"rxjs\";\n\n@Component({\n  selector: 'app-code-trace-page',\n  templateUrl: './code-trace-page.component.html',\n  styleUrls: ['./code-trace-page.component.scss']\n})\nexport class CodeTracePageComponent implements OnInit, OnDestroy{\n\n  constructor(\n    public link: LinkService,\n    private route: ActivatedRoute,\n    private modalService: ModalService,\n    private codeService: CodeService) {\n  }\n\n  codeTrace$ = this.codeService.codeTrace$\n\n  codeTraceCoord$ = this.codeService.codeTraceCoord$\n  codeTraceCoord : CodeExecutionCoordinate\n\n  subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe((params) => {\n      let documentId = params.get('documentId')\n      let blockId = params.get('blockId')\n      let id = params.get('artifactId')\n      if (id) {\n        this.codeService.loadTrace( <CodeExecutionCoordinate>{\n          blockCoordinate: {\n            storyDocId: {id: documentId},\n            blockId: {id: blockId}\n          },\n          codeExecutionId: { id  }\n        })\n      }\n    });\n    this.subscriptions.push(this.codeTraceCoord$.subscribe((codeTraceCoord) => this.codeTraceCoord = codeTraceCoord))\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach( (subscription) => subscription.unsubscribe())\n  }\n\n  // configuration dialog\n\n  configurationDialogId(): string {\n    return 'configuration-dialog-id'\n  };\n\n\n  codeTraceConfigDialogSpec : CodeTraceConfigDialogSpec\n\n  configure() {\n    this.codeTraceConfigDialogSpec = {\n      data: null,\n      coord: this.codeTraceCoord,\n      confirm: (data: CodeTraceConfigDialogData) => this.confirmConfig(data),\n      cancel: () => this.cancelConfig()\n    }\n    this.modalService.open(this.configurationDialogId())\n  }\n\n  private confirmConfig(data: CodeTraceConfigDialogData) {\n    this.codeService.setStitchDetails({\n      stitchFile: data.stitchFile,\n      testClass: data.testClass,\n      testMethod: data.testMethod\n    })\n    this.modalService.close(this.configurationDialogId())\n  }\n\n  private cancelConfig() {\n    this.modalService.close(this.configurationDialogId())\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./code-trace-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "codeService",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "codeService",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout-2col\n  [breadcrumb]=\"breadcrumb\"\n  [title]=\"menu\"\n  [leftColumn]=\"codeTracePanel\"\n  [rightColumn]=\"sourceCodePanel\"\n>\n</app-layout-2col>\n\n<ng-template #breadcrumb>\n  <ng-container *ngIf=\"codeTrace$ | async as codeTrace\">\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <app-back-button [routerLink]=\"link.toStoryDoc(codeTrace.storyDocSummary)\"></app-back-button>\n          <a routerLink=\"/\">Home</a>\n        </li>\n        <li class=\"breadcrumb-item\"><a\n          [routerLink]=\"link.toStoryDoc(codeTrace.storyDocSummary)\">{{codeTrace.storyDocSummary.name}}</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{codeTrace.name}}</li>\n      </ol>\n    </nav>\n  </ng-container>\n\n</ng-template>\n\n<ng-template #menu>\n  <div class=\"container-fluid\" *ngIf=\"codeTrace$ | async as codeTrace\">\n    <div class=\"row\">\n      <div class=\"col-md-11\">\n        <h3>\n          Code trace: {{codeTrace.name}}\n        </h3>\n      </div>\n      <div class=\"col-md-1\">\n        <div class=\"btn  btn-sm btn-outline-light float-right m-2\" (click)=\"configure()\">Configure</div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #codeTracePanel>\n  <div style=\"max-height: 90vh; overflow-y: scroll;\">\n    <app-code-trace-panel></app-code-trace-panel>\n  </div>\n</ng-template>\n\n<ng-template #sourceCodePanel>\n  <div style=\"max-height: 90vh; overflow-y: scroll;\">\n    <app-blueprint-panel></app-blueprint-panel>\n    <app-source-code-panel></app-source-code-panel>\n  </div>\n</ng-template>\n\n<ng-template #loading>loading...</ng-template>\n\n<jw-modal [id]=\"configurationDialogId()\">\n  <app-code-trace-configuration-dialog [spec]=\"codeTraceConfigDialogSpec\"></app-code-trace-configuration-dialog>\n</jw-modal>\n\n"
        },
        {
            "name": "CodeTracePanelComponent",
            "id": "component-CodeTracePanelComponent-c747ac1eeaa89b361542aa85ca82f3e118c1e0abbb2f625107cb347a225af3f56cef1ad058182b66eebd7adbad874b98e9fa7ea633a19a8e0c05bad47edee698",
            "file": "src/app/code/code-trace-page/code-trace-panel/code-trace-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-code-trace-panel",
            "styleUrls": [
                "./code-trace-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./code-trace-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectedItem$",
                    "defaultValue": "this.codeService.selectedEvent$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "treeNodes$",
                    "defaultValue": "this.codeService.treeNodes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "isBDDEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCodeEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCodeExecutionEnterEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCodeExecutionReturnEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "StitchItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "StitchItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNode",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {StitchItemDto} from \"@storydoc/models\";\nimport {TreeNode} from '../../code.service'\nimport {\n  CodeExecutionEnterEvent,\n  CodeExecutionReturnEvent,\n  CodeService,\n  isCodeExecutionEnterEvent,\n  isCodeExecutionReturnEvent,\n  isCodeTestCaseBDDEvent,\n  StitchEvent,\n  TestCaseBDDEvent\n} from \"../../code.service\";\nimport {Subscription} from \"rxjs\";\n\n@Component({\n  selector: 'app-code-trace-panel',\n  templateUrl: './code-trace-panel.component.html',\n  styleUrls: ['./code-trace-panel.component.scss']\n})\nexport class CodeTracePanelComponent implements OnInit, OnDestroy {\n\n  constructor(private codeService: CodeService) {\n  }\n\n  treeNodes$ = this.codeService.treeNodes$\n\n  selectedItem$ = this.codeService.selectedEvent$\n  selectedItem\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n    this.subscriptions.push(this.selectedItem$.subscribe(item => this.selectedItem = item))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n\n  selectNode(event: any) {\n    this.codeService.selectNode(event.node)\n  }\n\n  isSelected(item: StitchItemDto): boolean {\n    return this.selectedItem === item\n  }\n\n  isBDDEvent(event: StitchEvent) {\n    return isCodeTestCaseBDDEvent(event)\n  }\n\n  isCodeEvent(event: StitchEvent) {\n    return isCodeExecutionEnterEvent(event) || isCodeExecutionReturnEvent(event)\n  }\n\n  isCodeExecutionEnterEvent(event: StitchEvent) {\n    return isCodeExecutionEnterEvent(event)\n  }\n\n  isCodeExecutionReturnEvent(event: StitchEvent) {\n    return isCodeExecutionReturnEvent(event)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".bdd {\n  background-color: #00b74a;\n}\n",
                    "styleUrl": "./code-trace-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "codeService",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "codeService",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"treeNodes$ | async as treeNodes\" class=\"code-trace-panel-container\">\n    <tree-root [nodes]=\"treeNodes\" (focus)=\"selectNode($event)\">\n      <ng-template #treeNodeTemplate let-node let-index=\"index\">\n        <ng-container *ngIf=\"node && node.data.event && isCodeEvent(node.data.event)\" >\n          <ng-container *ngIf=\"isCodeExecutionEnterEvent(node.data.event)\" >\n            <div>\n              <span>{{ node.data.name }}</span>\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"isCodeExecutionReturnEvent(node.data.event)\" >\n            <div style=\"height: 1px;\">\n            </div>\n          </ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"node && node.data.event && isBDDEvent(node.data.event)\" >\n          <div style=\"background-color: lightcoral\">\n            <span>{{ node.data.name }}</span>\n          </div>\n        </ng-container>\n      </ng-template>\n    </tree-root>\n</div>\n"
        },
        {
            "name": "ComponentDetailsComponent",
            "id": "component-ComponentDetailsComponent-4d8e148c88789f63aebac4bacc0e4b84897ee1a47c318b903b50c98151242b2ea776a4c7e6eeeb07bc5d3cafb78ba0248070515283612c70b11dfa503523c91e",
            "file": "src/app/ui/screen-design-page/component-details/component-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-component-details",
            "styleUrls": [
                "./component-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./component-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "descriptor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentDescriptorDto",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentDescriptorDto[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "palette$",
                    "defaultValue": "this.service.palette$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentDto | \"NONE\"",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selection$",
                    "defaultValue": "this.service.selection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "attribute",
                            "type": "ComponentAttributeDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attribute",
                            "type": "ComponentAttributeDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNameChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ScreenDesignService} from \"../screen-design.service\";\nimport {ComponentAttributeDescriptorDto, ComponentDescriptorDto, SdComponentDto} from \"@storydoc/models\";\nimport {combineLatest, Subscription} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Component({\n  selector: 'app-component-details',\n  templateUrl: './component-details.component.html',\n  styleUrls: ['./component-details.component.scss']\n})\nexport class ComponentDetailsComponent implements OnInit, OnDestroy {\n\n  constructor(private service: ScreenDesignService) { }\n\n  palette$ = this.service.palette$\n  selection$ = this.service.selection$\n\n  palette: ComponentDescriptorDto[]\n  selection: SdComponentDto | 'NONE'\n  descriptor: ComponentDescriptorDto\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n    this.subscriptions.push(combineLatest([this.palette$, this.selection$]).subscribe(\n      ([palette, selection]) => {\n        if (palette) {\n          this.palette = palette\n          this.selection = selection\n          if (selection=='NONE') {\n            this.descriptor = null\n          } else {\n            this.descriptor = this.palette.find(p => p.type===selection.type)\n          }\n        }\n      }\n    ))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  onChange(attribute: ComponentAttributeDescriptorDto, $event: any) {\n    let value = $event.target.value\n    this.service.setAttribute(this.selection, attribute, value)\n  }\n\n  onNameChange($event: any) {\n    let value = $event.target.value\n    this.service.renameSelectedComponent(value)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".component-details-container {\n  min-height: calc(100vh - 200px);\n}\n",
                    "styleUrl": "./component-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-panel>\n  <div class=\"component-details-container\">\n    <div class=\"container-fluid\" *ngIf=\"descriptor\">\n      <div *ngIf=\"selection != 'NONE'\">\n        <div class=\"form-group\">\n          <label><b>Name</b></label>\n          <input class=\"form-control\" type=\"text\" [value]=\"selection.name\" (keyup)=\"onNameChange($event)\">\n        </div>\n        <div class=\"form-group\">\n          <label>x</label>\n          <input class=\"form-control\" type=\"text\" [value]=\"selection.x\" >\n        </div>\n        <div class=\"form-group\">\n          <label>y</label>\n          <input class=\"form-control\" type=\"text\" [value]=\"selection.y\" >\n        </div>\n        <div class=\"row \" *ngFor=\"let attribute of descriptor.attributes\">\n          <div class=\"form-group\">\n            <label>{{attribute.name}}</label>\n            <input class=\"form-control\" type=\"text\" (keyup)=\"onChange(attribute, $event)\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</app-panel>\n"
        },
        {
            "name": "ComponentTreeComponent",
            "id": "component-ComponentTreeComponent-c8937b6ec688f9349394c5176e44461aea27e1521038db391582381db62262a3cad36583c2927a288e3ac609045ee50eea32ef85293886b9ba4f32dd1c95e431",
            "file": "src/app/ui/screen-design-page/component-tree/component-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-component-tree",
            "styleUrls": [
                "./component-tree.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./component-tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "counter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "editing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "faBorderAll",
                    "defaultValue": "faBorderAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "faCube",
                    "defaultValue": "faCube",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "screenDesign$",
                    "defaultValue": "this.service.screenDesign$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SdComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedContainer$",
                    "defaultValue": "this.service.selectedContainer$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selection$",
                    "defaultValue": "this.service.selection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "item[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "editName",
                    "args": [
                        {
                            "name": "treeItem",
                            "type": "item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "treeItem",
                            "type": "item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEditing",
                    "args": [
                        {
                            "name": "treeItem",
                            "type": "item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "treeItem",
                            "type": "item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "treeItem",
                            "type": "item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "treeItem",
                            "type": "item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "recursiveAdd",
                    "args": [
                        {
                            "name": "container",
                            "type": "SdContainerDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "depth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "container",
                            "type": "SdContainerDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "depth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshTree",
                    "args": [
                        {
                            "name": "screenDesign",
                            "type": "ScreenDesignDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "screenDesign",
                            "type": "ScreenDesignDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "treeItem",
                            "type": "item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "treeItem",
                            "type": "item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ScreenDesignService} from \"../screen-design.service\";\nimport {ScreenDesignDto, SdComponentDto, SdComponentId, SdContainerDto} from \"@storydoc/models\";\nimport {faBorderAll, faCube} from '@fortawesome/free-solid-svg-icons'\n\ninterface item {\n  depth: number\n  label: string\n  type: 'COMPONENT' | 'CONTAINER'\n  id: SdComponentId\n  component: SdComponentDto\n}\n\n@Component({\n  selector: 'app-component-tree',\n  templateUrl: './component-tree.component.html',\n  styleUrls: ['./component-tree.component.scss']\n})\nexport class ComponentTreeComponent implements OnInit {\n\n  constructor(private service: ScreenDesignService) { }\n\n  screenDesign$ = this.service.screenDesign$\n\n  selectedContainer$ = this.service.selectedContainer$\n\n  selection$ = this.service.selection$\n  selectedComponent : SdComponentDto\n\n  ngOnInit(): void {\n    this.screenDesign$.subscribe(screenDesign => this.refreshTree(screenDesign))\n    this.selection$.subscribe(component => {\n      if (component && component!=='NONE') {\n        this.selectedComponent = component\n      }\n    })\n  }\n\n\n  tree: item[]\n  counter: number\n\n  faBorderAll = faBorderAll\n  faCube = faCube\n\n  private refreshTree(screenDesign: ScreenDesignDto) {\n    if (!screenDesign) return\n    this.tree = []\n    this.counter = 1\n    this.recursiveAdd(screenDesign.rootContainer, 0)\n  }\n\n  private recursiveAdd(container: SdContainerDto, depth: number) {\n    this.tree.push({\n      depth,\n      label: container.label? container.label : `container ${this.counter++}`,\n      type: \"CONTAINER\",\n      id: null,\n      component: null\n    })\n    container.children.forEach( (child) => {\n      if (child.component) {\n        this.tree.push({\n          depth: depth+1,\n          label: child.component.name ? child.component.name :  `${child.component.type} ${this.counter++}`,\n          type: \"COMPONENT\",\n          id: child.component.id,\n          component: child.component\n        })\n      } else if (child.container) {\n        this.recursiveAdd(child.container, depth+1)\n      }\n    })\n  }\n\n  isSelected(treeItem: item) {\n    return treeItem && treeItem.id?.id === this.selectedComponent?.id.id\n\n  }\n\n  select(treeItem: item) {\n    this.service.selectComponent(treeItem.component)\n    this.editName(treeItem)\n  }\n\n  editing: SdComponentDto\n\n  editName(treeItem: item) {\n    this.editing = treeItem.component\n  }\n\n  isEditing(treeItem: item) {\n    return this.editing && this.editing.id.id===treeItem.id?.id\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".component-tree-container {\n  min-height: calc(100vh - 200px);\n}\n\n.itemselected {\n  background-color: #0dcaf0;\n}\n",
                    "styleUrl": "./component-tree.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel >\n  <div class=\"component-tree-container\" *ngIf=\"screenDesign$ | async as screenDesign\">\n    <div *ngFor=\"let treeItem of tree\" [class.itemselected]=\"isSelected(treeItem)\" (click)=\"select(treeItem)\" (dblclick)=\"editName(treeItem)\" >\n      <ng-container *ngIf=\"treeItem.depth==1\">&nbsp;</ng-container>\n      <fa-icon *ngIf=\"treeItem.type==='CONTAINER'\" [icon]=\"faBorderAll\"></fa-icon>\n      <fa-icon *ngIf=\"treeItem.type==='COMPONENT'\" [icon]=\"faCube\"></fa-icon> {{treeItem.label}}\n    </div>\n  </div>\n</app-panel>\n"
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-875e19b115d5b6ffd98af56d9bb8db885f6eab37a6a0b78f9819ecbdd90475e395d1a8e6598190e9f3bb34613b970d8fc8df2600a36ea69db8e3740986207385",
            "file": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirmation-dialog",
            "styleUrls": [
                "./confirmation-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ConfirmationDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\n\nexport interface ConfirmationDialogSpec {\n  title: string;\n  message: string,\n  cancel: () => void\n  confirm: () => void\n}\n\n@Component({\n  selector: 'app-confirmation-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  styleUrls: ['./confirmation-dialog.component.scss']\n})\nexport class ConfirmationDialogComponent {\n\n  @Input()\n  spec: ConfirmationDialogSpec\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this, [])\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirmation-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"spec\" class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">{{spec.title}}</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <p>{{spec.message}}</p>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\">Yes</button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">No</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CreateArtifactDialogComponent",
            "id": "component-CreateArtifactDialogComponent-2d40a9ea8550f4eb97017113546eae3a18e63dd63740cfcfdb2006e97637f3c7a919235f87c0da38e34fa1b7f70cd4c032d18163c79fc0d75f05ec247be04867",
            "file": "src/app/document/document-page/create-artifact-dialog/create-artifact-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-artifact-dialog",
            "styleUrls": [
                "./create-artifact-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-artifact-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "ArtifactDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    name: new FormControl(null, Validators.required),\n    artifactType: new FormControl(null, Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "nameField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'name'"
                        }
                    ]
                },
                {
                    "name": "typeField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'type'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "descriptors",
                    "args": [],
                    "optional": false,
                    "returnType": "ArtifactDescriptor[]",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMode",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, Input, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ArtifactDataService, ArtifactDescriptor} from \"../block/artifact-block/artifact-data.service\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface ArtifactDialogData {\n  name?: string\n  file?: string\n  artifactType: string\n}\n\nexport interface ArtifactDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: ArtifactDialogData\n  confirm: (ArtifactDialogData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-create-artifact-dialog',\n  templateUrl: './create-artifact-dialog.component.html',\n  styleUrls: ['./create-artifact-dialog.component.scss']\n})\nexport class CreateArtifactDialogComponent {\n\n  constructor(private changeDetector: ChangeDetectorRef, private artifactDataService: ArtifactDataService) {\n  }\n\n  @Input()\n  spec: ArtifactDialogSpec\n\n  @ViewChild('type') typeField: ElementRef\n  @ViewChild('name') nameField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      if (this.updateMode()) {\n        this.artifactType.disable()\n        setFocusOn(this.nameField)\n      } else {\n        this.artifactType.enable()\n        setFocusOn(this.typeField)\n      }\n    }\n  }\n\n  updateMode(): boolean {\n    return this.spec.mode=='UPDATE'\n  }\n\n\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n    artifactType: new FormControl(null, Validators.required),\n  })\n\n  get artifactType(): FormControl {\n    return <FormControl> this.formGroup.get('artifactType')\n  }\n\n  descriptors(): ArtifactDescriptor[] {\n    return this.artifactDataService.list()\n  }\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-artifact-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "artifactDataService",
                        "type": "ArtifactDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "artifactDataService",
                        "type": "ArtifactDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "artifactType": {
                    "name": "artifactType",
                    "getSignature": {
                        "name": "artifactType",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 59
                    }
                }
            },
            "templateData": "<div class=\"modal-dialog\" *ngIf=\"spec\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">{{spec.mode==='NEW'? 'Add' : 'Edit'}} Artifact</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"formGroup\">\n        <div class=\"mb-3\">\n          <label for=\"type\" class=\"form-label\">Type</label>\n          <select [disabled]=\"updateMode()\" formControlName=\"artifactType\" class=\"form-select\" aria-label=\"Default select example\" #type>\n            <option *ngFor=\"let descriptor of descriptors()\" [value]=\"descriptor.key\">{{descriptor.label}}</option>\n          </select>\n          <div id=\"type\" class=\"form-text\">Select artifact type.</div>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"name\" class=\"form-label\">Name</label>\n          <input formControlName=\"name\" type=\"text\" class=\"form-control\" #name>\n          <div id=\"name\" class=\"form-text\">Enter a name for the artifact.</div>\n        </div>\n      </form>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Save changes\n      </button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CreateBlockDialogComponent",
            "id": "component-CreateBlockDialogComponent-7175dcf9540d66f90766cb537a1fe47fdffe263c4b2a1548953568d5dab094740316826d27443115c7a7c8da85894a39ceda3fa1740a623edb1d03f9100c93ba",
            "file": "src/app/document/document-page/create-block-dialog/create-block-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-block-dialog",
            "styleUrls": [
                "./create-block-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-block-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "BlockDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    name: new FormControl(null, Validators.required)\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "nameField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'name'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface BlockDialogData {\n  name?: string\n}\n\nexport interface BlockDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: BlockDialogData\n  confirm: (BlockDialogData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-create-block-dialog',\n  templateUrl: './create-block-dialog.component.html',\n  styleUrls: ['./create-block-dialog.component.scss']\n})\nexport class CreateBlockDialogComponent implements OnChanges {\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  @Input()\n  spec: BlockDialogSpec\n\n  @ViewChild('name') nameField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      setFocusOn(this.nameField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required)\n  })\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-block-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"modal-dialog\" *ngIf=\"spec\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">{{spec.mode==='NEW'? 'Create' : 'Edit'}} Paragraph</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"formGroup\">\n        <div class=\"mb-3\">\n          <label for=\"name\" class=\"form-label\">Name</label>\n          <input formControlName=\"name\" type=\"text\" class=\"form-control\" #name>\n          <div id=\"name\" class=\"form-text\">Enter a name for the paragraph.</div>\n        </div>\n      </form>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Save changes\n      </button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CreateDocumentDialogComponent",
            "id": "component-CreateDocumentDialogComponent-1b726887da00f527c868736461927985900f5c0d0e41e9235d7a069131df31d2475002ceb0035d3ea2ba7e62eda883c8b78cb36414a347d4ecd7aba8de77923d",
            "file": "src/app/document/document-manager-page/create-document-dialog/create-document-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-document-dialog",
            "styleUrls": [
                "./create-document-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-document-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "DocumentDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "onConfirm",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    name: new FormControl(null, Validators.required)\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "nameField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'name'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface DocumentDialogData {\n  name?: string\n}\n\nexport interface DocumentDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: DocumentDialogData\n  cancel: () => void\n  confirm: (data: DocumentDialogData) => void\n}\n\n\n@Component({\n  selector: 'app-create-document-dialog',\n  templateUrl: './create-document-dialog.component.html',\n  styleUrls: ['./create-document-dialog.component.scss']\n})\nexport class CreateDocumentDialogComponent implements OnChanges{\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  @Input()\n  spec: DocumentDialogSpec\n\n  @ViewChild('name') nameField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      setFocusOn(this.nameField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required)\n  })\n\n  @Output()\n  private onConfirm = new EventEmitter()\n\n  @Output()\n  private onCancel = new EventEmitter()\n\n  cancel() {\n    this.spec.cancel.apply(this.spec.cancel, [])\n  }\n\n  confirm() {\n    this.spec.confirm.apply(this.spec.confirm, [this.formGroup.value])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-document-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"modal-dialog\" *ngIf=\"spec\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">{{spec.mode==='NEW'? 'Create' : 'Edit'}} Story</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"formGroup\">\n        <div class=\"mb-3\">\n          <label for=\"name\" class=\"form-label\">Name</label>\n          <input formControlName=\"name\" type=\"text\" class=\"form-control\" #name>\n          <div id=\"name\" class=\"form-text\">Enter a name for the story.</div>\n        </div>\n      </form>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Save changes\n      </button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CreateItemDialogComponent",
            "id": "component-CreateItemDialogComponent-02b28883aac3c3244cde9a01c5883dd22ce698d9228a7cfe5cbf4e8c393eb3968cf1b6ee1163de437d1258606e28fbd6e9d99c54a9b4b5f49a2371ad42c52fe1",
            "file": "src/app/ui/timeline-page/create-item-dialog/create-item-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-item-dialog",
            "styleUrls": [
                "./create-item-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-item-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "ItemDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "descriptionField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'description'"
                        }
                    ]
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    description: new FormControl(null, Validators.required),\n    addMore: new FormControl(null)\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {setFocusOn} from \"@storydoc/common\";\n\nexport interface ItemDialogData {\n  description: string,\n  addMore: boolean\n}\n\nexport interface ItemDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: ItemDialogData\n  confirm: (ItemDialogData) => void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-create-item-dialog',\n  templateUrl: './create-item-dialog.component.html',\n  styleUrls: ['./create-item-dialog.component.scss']\n})\nexport class CreateItemDialogComponent implements OnChanges {\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  @Input()\n  spec: ItemDialogSpec\n\n  @ViewChild('description') descriptionField: ElementRef\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n      this.changeDetector.detectChanges()\n      setFocusOn(this.descriptionField)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    description: new FormControl(null, Validators.required),\n    addMore: new FormControl(null)\n  })\n\n\n  cancel() {\n    this.spec.cancel.apply(this, [])\n  }\n\n  save() {\n    this.spec.confirm.apply(this, [this.formGroup.value])\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-item-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"modal-dialog\">\n  <form [formGroup]=\"formGroup\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\">{{spec.mode=='NEW' ? 'Add' : 'Edit' }} Timeline Item</h5>\n        <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"mb-3\">\n          <label for=\"description\" class=\"form-label\">Description</label>\n          <input formControlName=\"description\" type=\"text\" class=\"form-control\" #description>\n          <div id=\"description\" class=\"form-text\">Enter a description for the timeline item.</div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"form-check\" *ngIf=\"spec.mode=='NEW'\">\n          <input formControlName=\"addMore\" class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\n          <label class=\"form-check-label\" for=\"flexCheckDefault\">\n            Add more\n          </label>\n        </div>\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\" [disabled]=\"!formGroup.valid\">Save</button>\n        <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n      </div>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "CreateScreenshotDialogComponent",
            "id": "component-CreateScreenshotDialogComponent-56bdba0e92ea94f0292cdc486e3cdf4b350aaafffb12c2469e5cc17c2d77c1dd5b54a2afabb9530dbfd6531b7c255a2bb02f6ac96acb63734bc394b62dd47822",
            "file": "src/app/ui/screenshot-collection-page/create-screenshot-dialog/create-screenshot-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-screenshot-dialog",
            "styleUrls": [
                "./create-screenshot-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-screenshot-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "ScreenshotDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editFormGroup",
                    "defaultValue": "new FormGroup({\n    name: new FormControl(null, Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "fileElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileElement'"
                        }
                    ]
                },
                {
                    "name": "newFormGroup",
                    "defaultValue": "new FormGroup({\n    name: new FormControl(null, Validators.required),\n    file: new FormControl('', [Validators.required]),\n    fileSource: new FormControl('', [Validators.required]),\n    fileSize: new FormControl(0, [this.validFileSize()])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "invalidFile",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validFileSize",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Input, SimpleChanges, ViewChild} from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators} from \"@angular/forms\";\n\nexport interface ScreenshotDialogData {\n  name: string,\n  file: string,\n  fileSource: any,\n  fileSize: number\n}\n\nexport interface ScreenshotDialogSpec {\n  mode: 'UPDATE' | 'NEW'\n  data: ScreenshotDialogData\n  confirm: (data: ScreenshotDialogData) => void\n  cancel: () => void\n  maxFileSize: number\n}\n\n@Component({\n  selector: 'app-create-screenshot-dialog',\n  templateUrl: './create-screenshot-dialog.component.html',\n  styleUrls: ['./create-screenshot-dialog.component.scss']\n})\nexport class CreateScreenshotDialogComponent {\n\n  @Input()\n  spec: ScreenshotDialogSpec\n\n  @ViewChild('fileElement') fileElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      if (this.spec.mode == 'NEW') {\n        this.newFormGroup.setValue(this.spec.data)\n      } else {\n        this.editFormGroup.setValue(this.spec.data)\n      }\n    }\n  }\n\n  // new\n  newFormGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n    file: new FormControl('', [Validators.required]),\n    fileSource: new FormControl('', [Validators.required]),\n    fileSize: new FormControl(0, [this.validFileSize()])\n  })\n\n  get newNameControl(): FormControl {\n    return <FormControl>this.newFormGroup.get('name')\n  }\n\n  get fileSizeControl(): FormControl {\n    return <FormControl> this.newFormGroup.get('fileSize')\n  }\n\n  validFileSize(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors| null => {\n      if (!this.spec) return null\n      const invalid = control.value > this.spec.maxFileSize\n      return invalid ? {validFileSize: {value: 'File size is too big, max filesize is ' + this.spec.maxFileSize}} : null;\n    }\n  }\n\n\n  onFileChange(event) {\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0]\n      this.newFormGroup.patchValue({\n        fileSource: file\n      });\n      this.fileSizeControl.setValue(file.size)\n      if (!this.newNameControl.value) {\n        this.newNameControl.setValue(file.name)\n      }\n    }\n  }\n\n  // edit\n\n  editFormGroup: FormGroup = new FormGroup({\n    name: new FormControl(null, Validators.required),\n  })\n\n\n\n  cancel() {\n    this.spec.cancel.apply(this.spec.cancel, [])\n  }\n\n  save() {\n    this.spec.confirm.apply(this.spec.confirm, this.spec.mode=='NEW' ? [this.newFormGroup.value] : [this.editFormGroup.value])\n  }\n\n  invalidFile(): boolean {\n    return !this.newFormGroup.get('fileSize').valid\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-screenshot-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "newNameControl": {
                    "name": "newNameControl",
                    "getSignature": {
                        "name": "newNameControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 49
                    }
                },
                "fileSizeControl": {
                    "name": "fileSizeControl",
                    "getSignature": {
                        "name": "fileSizeControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 53
                    }
                }
            },
            "templateData": "<div class=\"modal-dialog\" *ngIf=\"spec\">\n  <div class=\"modal-content\" *ngIf=\"spec.mode=='NEW'\" >\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">Create Screenshot</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"newFormGroup\">\n        <div class=\"mb-3\">\n          <label for=\"file\" class=\"form-label\">File</label>\n          <input formControlName=\"file\" type=\"file\" (change)=\"onFileChange($event)\" class=\"form-control\"\n                 accept=\".jpg, .png, .jpeg, .gif, .bmp, .tif, .tiff|image/*\"\n          >\n          <div id=\"file\" class=\"form-text\">select a file for containing the screenshot.</div>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"name\" class=\"form-label\">Name</label>\n          <input formControlName=\"name\" type=\"text\" class=\"form-control\">\n          <div id=\"name\" class=\"form-text\">Enter a name for the screenshot.</div>\n        </div>\n        <div *ngIf=\"invalidFile()\">\n          <div class=\"alert alert-warning\" role=\"alert\">\n            Filesize {{fileSizeControl.value}} too big. Maximum filesize is {{spec.maxFileSize/1000}}Kb\n          </div>\n        </div>\n      </form>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\" [disabled]=\"!newFormGroup.valid\">Save changes</button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </div>\n  <div class=\"modal-content\" *ngIf=\"spec.mode=='UPDATE'\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">Update Screenshot</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"editFormGroup\">\n        <div class=\"mb-3\">\n          <label for=\"name2\" class=\"form-label\">Name</label>\n          <input formControlName=\"name\" type=\"text\" class=\"form-control\">\n          <div id=\"name2\" class=\"form-text\">rename the screenshot.</div>\n        </div>\n      </form>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\" [disabled]=\"!editFormGroup.valid\">Save</button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DBConnectionSettingsComponent",
            "id": "component-DBConnectionSettingsComponent-29d448f4e959a0143786cabf47d8613aafa990909f594d70efe51096bf8cf21e2cbd1abee2131b4e06e1073a0a1dd0d9a299f7ceeb66503c6d87f224e31a947f",
            "file": "_attick/dbconnection-settings/dbconnection-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dbconnection-settings",
            "styleUrls": [
                "./dbconnection-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dbconnection-settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dbconnection-settings',\n  templateUrl: './dbconnection-settings.component.html',\n  styleUrls: ['./dbconnection-settings.component.scss']\n})\nexport class DBConnectionSettingsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dbconnection-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dbconnection-settings works!</p>\n"
        },
        {
            "name": "DBDataPageComponent",
            "id": "component-DBDataPageComponent-c0bcabefdf00dd08314f7c46c9d18ecb4da87712e402a4d44c1b72ee05070b2a26d0e4784c08033b2c976d2e108fd867669c0d296135854ca022fd00a2716a2d",
            "file": "src/app/db/dbdata-page/dbdata-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dbdata-page",
            "styleUrls": [
                "./dbdata-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dbdata-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSet$",
                    "defaultValue": "this.dataService.dataSet$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DbDataSetDto>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "navigationModel$",
                    "defaultValue": "this.dbNavigationService.navigationModel$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<NavigationModelDto>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "addTableData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {DBDataService} from \"./dbdata.service\";\nimport {Observable} from \"rxjs\";\nimport {DbDataSetDto, NavigationModelDto} from \"@storydoc/models\";\nimport {DBNavigationService} from \"../dbnavigation-page/dbnavigation.service\";\n\n@Component({\n  selector: 'app-dbdata-page',\n  templateUrl: './dbdata-page.component.html',\n  styleUrls: ['./dbdata-page.component.scss']\n})\nexport class DBDataPageComponent implements OnInit {\n\n  constructor(private dataService: DBDataService, private dbNavigationService: DBNavigationService ) { }\n\n  dataSet$: Observable<DbDataSetDto> = this.dataService.dataSet$\n  navigationModel$: Observable<NavigationModelDto> = this.dbNavigationService.navigationModel$\n\n  ngOnInit(): void {\n    this.dataService.load()\n    this.dbNavigationService.init()\n  }\n\n  addTableData() {\n    this.dataService.addTableData()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dbdata-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DBDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dbNavigationService",
                        "type": "DBNavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DBDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dbNavigationService",
                        "type": "DBNavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-1col\n  [breadcrumb]=\"breadcrumb\"\n  [title]=\"title\"\n  [middle]=\"content\"\n>\n</app-layout-1col>\n\n<ng-template #breadcrumb>\n  [breadcrumb]\n</ng-template>\n\n<ng-template #title>\n  [title]\n</ng-template>\n\n<ng-template #content>\n  <div *ngIf=\"dataSet$ | async as dataSet; else loading\">\n\n    <div class=\"btn  btn-sm btn-outline-primary\" (click)=\"addTableData()\">Add</div>\n    {{dataSet.tableDataSets.length}}\n  </div>\n</ng-template>\n\n<ng-template #loading>loading...</ng-template>\n"
        },
        {
            "name": "DBNavigationPageComponent",
            "id": "component-DBNavigationPageComponent-3c336cdf9bc7a56254648f1983a477acdfeb217bebe5a0bdc7696d1b7c2834638472a06d9368fa9938de772ac6fd919bb3ad811882ba26316bbe62a8f102a454",
            "file": "src/app/db/dbnavigation-page/dbnavigation-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dbnavigation-page",
            "styleUrls": [
                "./dbnavigation-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dbnavigation-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "nav$",
                    "defaultValue": "this.service.navigationModel$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<NavigationModelDto>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {DBNavigationService} from \"./dbnavigation.service\";\nimport {Observable} from \"rxjs\";\nimport {NavigationModelDto} from \"@storydoc/models\";\n\n@Component({\n  selector: 'app-dbnavigation-page',\n  templateUrl: './dbnavigation-page.component.html',\n  styleUrls: ['./dbnavigation-page.component.scss']\n})\nexport class DBNavigationPageComponent implements OnInit {\n\n  constructor(private service: DBNavigationService) { }\n\n  nav$: Observable<NavigationModelDto> = this.service.navigationModel$\n\n  ngOnInit(): void {\n    this.service.init();\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dbnavigation-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "DBNavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "DBNavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dbnavigation-page works!</p>\n\n<div *ngIf=\"nav$ | async as nav; else loading\">\n  {{nav}}\n</div>\n\n<ng-template #loading>loading...</ng-template>\n"
        },
        {
            "name": "DiagramExampleComponent",
            "id": "component-DiagramExampleComponent-7fc3fdfec60eb0f078a9ef74d64ad841f3589ad740b36ab9f8d9668ef89053a6d77f8b83b3997ab045c67e90cf9718825aabbab582f6b09a99e306a4b8bed570",
            "file": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-diagram-example",
            "styleUrls": [
                "./diagram-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./diagram-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "diagram",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "BluePrint",
                    "decorators": []
                },
                {
                    "name": "lines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "Line[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "leaderLines",
                    "defaultValue": "new Array()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Inject, Input, OnInit} from '@angular/core'\nimport {DOCUMENT} from \"@angular/common\"\n\ndeclare var LeaderLine: any\n\nexport interface BluePrintElem {\n  type: string\n  name: string\n}\n\nexport interface CompositeBluePrintElem extends BluePrintElem {\n  subElements: BluePrintElem[]\n}\n\nexport interface BluePrint extends CompositeBluePrintElem {\n  type: \"BluePrint\"\n}\n\nexport interface MethodElem {\n  id: string\n  methodName: string\n  active: boolean\n}\n\nexport interface ClassElem extends BluePrintElem {\n  type: \"ClassElem\"\n  role: string\n  className: string\n  methods: MethodElem[]\n}\n\nexport interface Line {\n  idFrom: string\n  idTo: string\n}\n\n@Component({\n  selector: 'app-diagram-example',\n  templateUrl: './diagram-example.component.html',\n  styleUrls: ['./diagram-example.component.scss']\n})\nexport class DiagramExampleComponent implements OnInit {\n\n  @Input()\n  diagram: BluePrint\n\n  @Input()\n  lines: Line[]\n\n  constructor(@Inject(DOCUMENT) private document) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  leaderLines: any[] = new Array()\n\n  ngAfterViewInit() {\n    console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n    this.lines.forEach(line => {\n      this.leaderLines.push(new LeaderLine(\n        this.document.getElementById(line.idFrom),\n        this.document.getElementById(line.idTo),\n        {\n          path: 'arc',\n          color: 'red',\n          size: 4,\n          //endPlug: 'arrow3'\n        }\n      ))\n    })\n  }\n\n  ngOnDestroy() {\n    if (this.leaderLines) {\n      console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n      for (var leaderLine of this.leaderLines) {\n        console.log(\"typeof this.leaderLines\", typeof this.leaderLines)\n        console.log(\"typeof this.leaderLine\", typeof leaderLine)\n        //leaderLine.remove()\n      }\n      this.leaderLines = []\n    }\n  }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".box {\n  border: 1px solid black;\n}\n",
                    "styleUrl": "./diagram-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-blue-print-diagram [bluePrint]=\"diagram\"></app-blue-print-diagram>\n"
        },
        {
            "name": "DocumentComponent",
            "id": "component-DocumentComponent-7b59452e504964df11f99cb521825733b08d9d10729f95c537ffc93439c592be7046d006f2a340193d83a7d7774a5aa9e734bc108a2837600f30597b44d4e22a",
            "file": "src/app/document/document-page/document.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-document",
            "styleUrls": [
                "./document.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./document.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blockDialogId",
                    "defaultValue": "\"block-dialog\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "blockDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "confirmationDialogId",
                    "defaultValue": "'confirmation-dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmationDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "doc$",
                    "defaultValue": "this.documentDataService.storyDoc$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PopupMenuComponent"
                        }
                    ]
                },
                {
                    "name": "selectedBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlockDto",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedBlock$",
                    "defaultValue": "this.documentDataService.selectedBlock$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "addBlock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeBlockDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmAddBlock",
                    "args": [
                        {
                            "name": "data",
                            "type": "BlockDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "BlockDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDeleteBlock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmRenameBlock",
                    "args": [
                        {
                            "name": "data",
                            "type": "BlockDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "BlockDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBlock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numbering",
                    "args": [
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openBlockDialog",
                    "args": [
                        {
                            "name": "blockDialogSpec",
                            "type": "BlockDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "blockDialogSpec",
                            "type": "BlockDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameBlock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectBlock",
                    "args": [
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "block",
                            "type": "BlockDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Subscription} from \"rxjs\";\nimport {ConfirmationDialogSpec, ModalService, PopupMenuComponent} from \"@storydoc/common\";\nimport {BlockDto} from \"@storydoc/models\";\nimport {StoryDocRestControllerService} from \"@storydoc/services\";\nimport {DocumentDataService} from \"./document-data.service\";\nimport {BlockDialogData, BlockDialogSpec} from \"./create-block-dialog/create-block-dialog.component\";\n\n@Component({\n  selector: 'app-document',\n  templateUrl: './document.component.html',\n  styleUrls: ['./document.component.scss']\n})\nexport class DocumentComponent implements OnInit, OnDestroy {\n\n  constructor(\n    private storyDocRestControllerService: StoryDocRestControllerService,\n    private documentDataService: DocumentDataService,\n    private route: ActivatedRoute,\n    private modalService: ModalService,) {\n  }\n\n  id: string;\n  doc$ = this.documentDataService.storyDoc$\n  selectedBlock$ = this.documentDataService.selectedBlock$\n  selectedBlock: BlockDto\n\n  subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe((params) => {\n      this.id = params.get('id')\n      if (this.id) {\n        this.documentDataService.init(this.id);\n      }\n    });\n    this.subscriptions.push(this.selectedBlock$.subscribe({next: value => this.selectedBlock = value}))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  numbering(block: BlockDto): string {\n    if (!block) return ''\n    let val = ''\n    for (let nr of block.numbering) {\n      val += (val.length == 0 ? '' : '.') + nr\n    }\n    return val\n  }\n\n  // left panel\n\n  @ViewChild(PopupMenuComponent) menu: PopupMenuComponent\n\n  openMenu(event: MouseEvent, block: BlockDto) {\n    this.selectBlock(block)\n    this.menu.items = [\n      {\n        label: 'Rename',\n        onClick: () => this.renameBlock()\n      },\n      {\n        label: 'Delete',\n        onClick: () => this.deleteBlock()\n      }\n    ]\n    this.menu.open(event)\n    return false\n  }\n\n  selectBlock(block: BlockDto) {\n    this.documentDataService.selectBlock(block)\n  }\n\n  isSelected(block: BlockDto): boolean {\n    return this.selectedBlock?.blockId.id == block.blockId.id\n  }\n\n\n  // block dialog\n\n  blockDialogId = \"block-dialog\"\n\n  blockDialogSpec: BlockDialogSpec\n\n  openBlockDialog(blockDialogSpec: BlockDialogSpec) {\n    this.blockDialogSpec = blockDialogSpec\n    this.modalService.open(this.blockDialogId)\n  }\n\n  closeBlockDialog() {\n    this.modalService.close(this.blockDialogId)\n  }\n\n  // confirmation dialog\n  confirmationDialogId = 'confirmation-dialog'\n  confirmationDialogSpec: ConfirmationDialogSpec\n\n  openConfirmationDialog(confirmationDialogSpec: ConfirmationDialogSpec) {\n    this.confirmationDialogSpec = confirmationDialogSpec\n    this.modalService.open(this.confirmationDialogId)\n  }\n\n  closeConfirmationDialog() {\n    this.modalService.close(this.confirmationDialogId)\n  }\n\n  // add block\n\n  addBlock() {\n    this.openBlockDialog({\n      mode: 'NEW',\n      data: {\n        name: null\n      },\n      confirm: (data) => {\n        this.closeBlockDialog();\n        this.confirmAddBlock(data)\n      },\n      cancel: () => this.closeBlockDialog()\n    })\n  }\n\n  confirmAddBlock(data: BlockDialogData) {\n    this.documentDataService.addBlock(data.name)\n  }\n\n  // rename block\n\n  renameBlock() {\n    this.openBlockDialog({\n      mode: 'UPDATE',\n      data: {\n        name: this.selectedBlock.title\n      },\n      confirm: (data) => {\n        this.closeBlockDialog();\n        this.confirmRenameBlock(data)\n      },\n      cancel: () => this.closeBlockDialog()\n    })\n  }\n\n  confirmRenameBlock(data: BlockDialogData) {\n    this.documentDataService.renameBlock(this.selectedBlock.blockId, data.name)\n  }\n\n  // delete block\n\n  deleteBlock() {\n    this.openConfirmationDialog({\n      title: 'Confirm delete',\n      message: `Delete paragraph \"${this.selectedBlock.title}\" ?`,\n      cancel: () => this.closeConfirmationDialog(),\n      confirm: () => {\n        this.closeConfirmationDialog();\n        this.confirmDeleteBlock()\n      }\n    })\n  }\n\n  confirmDeleteBlock() {\n    this.documentDataService.deleteBlock(this.selectedBlock.blockId)\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../common/variables.scss';\n\n.navigation-panel {\n  @include storybook-height-main-section\n}\n\n.content-panel {\n  @include storybook-height-main-section\n}\n\n.selected {\n  background-color: $storybook-secondary-300;\n}\n",
                    "styleUrl": "./document.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storyDocRestControllerService",
                        "type": "StoryDocRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "documentDataService",
                        "type": "DocumentDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "storyDocRestControllerService",
                        "type": "StoryDocRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "documentDataService",
                        "type": "DocumentDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout-2col\n  [breadcrumb]=\"breadcrumb\"\n  [title]=\"title\"\n  [leftColumn]=\"leftPanel\"\n  [rightColumn]=\"rightPanel\"\n>\n</app-layout-2col>\n\n<ng-template #breadcrumb>\n  <div *ngIf=\"doc$ | async as doc; else loading\">\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <app-back-button [routerLink]=\"'/'\"></app-back-button>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Home</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{doc.title}}</li>\n      </ol>\n    </nav>\n  </div>\n</ng-template>\n\n<ng-template #title>\n  <div class=\"container-fluid\" *ngIf=\"doc$ | async as doc; else loading\">\n    <div class=\"row\">\n      <h3>Story: {{doc.title}}</h3>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #leftPanel>\n  <app-panel>\n    <div class=\"navigation-panel\" *ngIf=\"doc$ | async as doc; else loading\">\n      <ul class=\"list-group\">\n        <li class=\"list-group-item\" [class.selected]=\"isSelected(block)\" *ngFor=\"let block of doc.blocks\"\n            (click)=\"selectBlock(block)\" (select)=\"selectBlock(block)\" (contextmenu)=\"openMenu($event, block)\">\n          {{numbering(block)}} {{block.title}}\n        </li>\n        <div class=\"btn  btn-sm btn-outline-primary\" (click)=\"addBlock()\">Add Paragraph</div>\n\n      </ul>\n    </div>\n  </app-panel>\n</ng-template>\n\n<ng-template #rightPanel>\n  <app-panel>\n    <div class=\"content-panel\" *ngIf=\"doc$ | async as doc; else loading\">\n      <div class=\"container\">\n        <div class=\"row\" *ngFor=\"let block of doc.blocks\">\n          <app-block [block]=\"block\" [documentId]=\"doc.storyDocId\"></app-block>\n        </div>\n      </div>\n    </div>\n  </app-panel>\n</ng-template>\n\n<app-popup-menu></app-popup-menu>\n\n<jw-modal [id]=\"blockDialogId\">\n  <app-create-block-dialog [spec]=\"blockDialogSpec\"></app-create-block-dialog>\n</jw-modal>\n\n\n<jw-modal [id]=\"confirmationDialogId\">\n  <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n\n\n<ng-template #loading>loading...</ng-template>\n"
        },
        {
            "name": "DocumentManagerPageComponent",
            "id": "component-DocumentManagerPageComponent-8966ffbecc700ac61c8aff517095e93b15a9d5c9ee2d4293632a024e8dc9f262b8e3ba74f352a228feefb7cbac793e0cf9ccea7985ddb07ed8efc767629c032c",
            "file": "src/app/document/document-manager-page/document-manager-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-story-manager-page",
            "styleUrls": [
                "./document-manager-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./document-manager-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmationDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "documentDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DocumentDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PopupMenuComponent"
                        }
                    ]
                },
                {
                    "name": "storyDoc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDocSummaryDto",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "summaries$",
                    "defaultValue": "this.documentManagerService.summaries$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "addDocument",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "closeDocumentDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmAddDocument",
                    "args": [
                        {
                            "name": "data",
                            "type": "DocumentDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "DocumentDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmDeleteDocument",
                    "args": [
                        {
                            "name": "storyDoc",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "storyDoc",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmRenameDocument",
                    "args": [
                        {
                            "name": "data",
                            "type": "DocumentDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "storyDoc",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "DocumentDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "storyDoc",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDocument",
                    "args": [
                        {
                            "name": "storyDoc",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "storyDoc",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "documentDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDocumentDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "DocumentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "DocumentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "storyDocSummaryDto",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "storyDocSummaryDto",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameDocument",
                    "args": [
                        {
                            "name": "storyDoc",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "storyDoc",
                            "type": "StoryDocSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ViewChild} from '@angular/core';\nimport {ConfirmationDialogSpec, ModalService, PopupMenuComponent} from \"@storydoc/common\";\nimport {ArtifactDto, StoryDocSummaryDto} from \"@storydoc/models\";\nimport {DocumentDialogData, DocumentDialogSpec} from './create-document-dialog/create-document-dialog.component'\nimport {DocumentManagerService} from \"./document-manager.service\";\n\n@Component({\n  selector: 'app-story-manager-page',\n  templateUrl: './document-manager-page.component.html',\n  styleUrls: ['./document-manager-page.component.scss']\n})\nexport class DocumentManagerPageComponent {\n\n  constructor(private modalService: ModalService, private documentManagerService: DocumentManagerService) {\n  }\n\n  // document list\n\n  summaries$ = this.documentManagerService.summaries$\n\n  // document dialog\n\n  documentDialogSpec: DocumentDialogSpec\n\n  documentDialogId(): string {\n    return 'document-dialog'\n  }\n\n  private openDocumentDialog(spec: DocumentDialogSpec) {\n    this.documentDialogSpec = spec\n    this.modalService.open(this.documentDialogId())\n  }\n\n  private closeDocumentDialog() {\n    this.modalService.close(this.documentDialogId())\n  }\n\n  // confirmation dialog\n\n  confirmationDialogSpec: ConfirmationDialogSpec\n\n  confirmationDialogId(): string {\n    return 'confirmation-dialog'\n  }\n\n  private openConfirmationDialog(spec: ConfirmationDialogSpec) {\n    this.confirmationDialogSpec = spec\n    this.modalService.open(this.confirmationDialogId())\n  }\n\n  private closeConfirmationDialog() {\n    this.modalService.close(this.confirmationDialogId())\n  }\n\n  // popup menu\n\n  @ViewChild(PopupMenuComponent) menu: PopupMenuComponent\n\n  openMenu(event: MouseEvent, storyDocSummaryDto: StoryDocSummaryDto) {\n    this.menu.items = [\n      {\n        label: 'Rename',\n        onClick: () => this.renameDocument(storyDocSummaryDto)\n      },\n      {\n        label: 'Delete',\n        onClick: () => this.deleteDocument(storyDocSummaryDto)\n      }\n    ]\n    this.menu.open(event)\n    return false\n  }\n\n  storyDoc: StoryDocSummaryDto\n\n  // add document\n\n  addDocument() {\n    this.openDocumentDialog({\n      mode: 'NEW',\n      data: {\n        name: null\n      },\n      confirm: (data) => {\n        this.closeDocumentDialog();\n        this.confirmAddDocument(data)\n      },\n      cancel: () => {\n        this.closeDocumentDialog()\n      }\n    });\n  }\n\n  confirmAddDocument(data: DocumentDialogData) {\n    this.documentManagerService.addDocument(data.name)\n  }\n\n  // rename document\n\n  renameDocument(storyDoc: StoryDocSummaryDto) {\n    this.openDocumentDialog({\n      mode: 'UPDATE',\n      data: {\n        name: storyDoc.name\n      },\n      confirm: (data) => {\n        this.closeDocumentDialog();\n        this.confirmRenameDocument(data, storyDoc)\n      },\n      cancel: () => {\n        this.closeDocumentDialog()\n      }\n    })\n  }\n\n  confirmRenameDocument(data: DocumentDialogData, storyDoc: StoryDocSummaryDto) {\n    this.documentManagerService.renameDocument({\n      storyDocId: storyDoc.storyDocId,\n      name: data.name\n    })\n  }\n\n  // delete document\n\n  deleteDocument(storyDoc: StoryDocSummaryDto) {\n    this.openConfirmationDialog({\n      title: 'Confirmation',\n      message: `Delete  '${storyDoc.name}' ?`,\n      confirm: () => {\n        this.closeConfirmationDialog();\n        this.confirmDeleteDocument(storyDoc)\n      },\n      cancel: () => this.closeConfirmationDialog()\n    })\n  }\n\n  confirmDeleteDocument(storyDoc: StoryDocSummaryDto) {\n    this.documentManagerService.deleteDocument(storyDoc.storyDocId)\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\n  margin: 0px;\n  padding: 10px;\n  border-bottom: 1px solid rgb(13, 110, 253);\n}\n\n.items p {\n  margin: 0px;\n  padding: 5px;\n  border-bottom: 1px solid rgb(13, 110, 253);\n}\n\n.items p:hover {\n  color: white;\n  background: rgb(13, 110, 253);\n}\n",
                    "styleUrl": "./document-manager-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "documentManagerService",
                        "type": "DocumentManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "documentManagerService",
                        "type": "DocumentManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-layout-1col\n  [breadcrumb]=\"breadcrumb\"\n  [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #breadcrumb>\n  <nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n      <li class=\"breadcrumb-item active\" aria-current=\"page\">Home</li>\n    </ol>\n  </nav>\n</ng-template>\n\n<ng-template #middle>\n  <div *ngIf=\"summaries$ | async as summaries; else loading\">\n    <ul class=\"list-group\">\n      <li *ngFor=\"let summary of summaries\" class=\"list-group-item\">\n        <a (contextmenu)=\"openMenu($event, summary)\"\n           routerLink=\"/fe/document/{{summary.storyDocId.id}}\">{{summary.name}}</a>\n      </li>\n    </ul>\n  </div>\n  <div class=\"btn  btn-sm btn-outline-primary\" (click)=\"addDocument()\">Add Story</div>\n</ng-template>\n\n<app-popup-menu></app-popup-menu>\n\n<ng-template #loading>\n  <ul class=\"list-group\"></ul>\n</ng-template>\n\n<jw-modal [id]=\"documentDialogId()\">\n  <app-create-document-dialog [spec]=\"documentDialogSpec\"></app-create-document-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n  <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-fa2aa27e4139e9793b910068b910e321596a2d195bfa0fd7b8f5f3b804a9b0685cdd9f1a71b7fbe6a9f73526113a68baf80e312c4440dab15890fd39dc4c0aac",
            "file": "src/app/common/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../variables';\n\n.header-container {\n  background-color: $storybook-secondary-800;\n  color: $storybook-white;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-container\">\n    <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "Layout1ColComponent",
            "id": "component-Layout1ColComponent-9d91de8ab231654ddbeb9f83b59e020d424d35896511707313ee65d16c1cda713ae086d66d0d591dc7180ee01dfe5b5e153dabf1a70e53b81f934808f2313fbc",
            "file": "src/app/common/layout-1col/layout-1col.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout-1col",
            "styleUrls": [
                "./layout-1col.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout-1col.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadcrumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "middle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, TemplateRef} from '@angular/core';\n\n@Component({\n  selector: 'app-layout-1col',\n  templateUrl: './layout-1col.component.html',\n  styleUrls: ['./layout-1col.component.scss']\n})\nexport class Layout1ColComponent {\n\n  @Input()\n  breadcrumb: TemplateRef<any>\n\n  @Input()\n  title: TemplateRef<any>\n\n  @Input()\n  middle: TemplateRef<any>\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../variables';\n\n.backdrop {\n  background-color: $storybook-secondary-100;\n  min-height: 100vh;\n}\n\n",
                    "styleUrl": "./layout-1col.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"backdrop\">\n  <app-header>\n    <ng-container *ngTemplateOutlet=\"title\"></ng-container>\n  </app-header>\n  <app-header>\n    <ng-container *ngTemplateOutlet=\"breadcrumb\"></ng-container>\n  </app-header>\n\n  <div class=\"container-fluid\">\n    <div class=\"row middle\">\n      <div class=\"col-md-12\">\n        <ng-container *ngTemplateOutlet=\"middle\"></ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "Layout2ColComponent",
            "id": "component-Layout2ColComponent-55dc18ece335efbce2f275a208e6db446cd9593cbe700a7aa4fad73261bb807953132bc3e2a5163ab97676760b310111dce85bd71c870f4781632dfeaab58443",
            "file": "src/app/common/layout-2col/layout-2col.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout-2col",
            "styleUrls": [
                "./layout-2col.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout-2col.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadcrumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "leftColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "rightColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, TemplateRef} from '@angular/core';\n\n@Component({\n  selector: 'app-layout-2col',\n  templateUrl: './layout-2col.component.html',\n  styleUrls: ['./layout-2col.component.scss']\n})\nexport class Layout2ColComponent {\n\n  @Input()\n  breadcrumb: TemplateRef<any>\n\n  @Input()\n  title: TemplateRef<any>\n\n  @Input()\n  leftColumn: TemplateRef<any>\n\n  @Input()\n  rightColumn: TemplateRef<any>\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../variables';\n\n.backdrop {\n  background-color: $storybook-secondary-100;\n  min-height: 100vh;\n}\n\n",
                    "styleUrl": "./layout-2col.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"backdrop\">\n  <app-header>\n    <ng-container *ngTemplateOutlet=\"title\"></ng-container>\n  </app-header>\n  <app-header>\n    <ng-container *ngTemplateOutlet=\"breadcrumb\"></ng-container>\n  </app-header>\n\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-3\">\n        <ng-container *ngTemplateOutlet=\"leftColumn\"></ng-container>\n      </div>\n      <div class=\"col-md-9\">\n        <ng-container *ngTemplateOutlet=\"rightColumn\"></ng-container>\n      </div>\n    </div>\n  </div>\n\n</div>\n"
        },
        {
            "name": "MockBlockComponent",
            "id": "component-MockBlockComponent-3eb689adf08986546047cb1c5357cdaca5c94a8fd0e624ac968058c2ec3d2a07b4fb54d2825155fa80161a81694b825ccccf9b7e534e7ef1f4229fec31045655",
            "file": "_attick/mock-block/mock-block.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mock-block",
            "styleUrls": [
                "./mock-block.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mock-block.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-mock-block',\n  templateUrl: './mock-block.component.html',\n  styleUrls: ['./mock-block.component.scss']\n})\nexport class MockBlockComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mock-block.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>mock-block works!</p>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-d74ee47333c88da5c2bfe8669b61c22405eae2385c548049d19e7fbbbfa634a9e28bda42e708d971aafee1609e244d7874f51eae05fdc19e515a652e530f40af",
            "file": "src/app/common/modal.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jw-modal",
            "styleUrls": [
                "./modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Input, OnDestroy, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {ModalService} from './modal-service';\n\n// based on https://github.com/cornflourblue/angular-10-custom-modal\n// licence MIT\n\n@Component({\n  selector: 'jw-modal',\n  styleUrls: ['./modal.component.css'],\n  templateUrl: 'modal.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent implements OnInit, OnDestroy {\n\n  @Input() id: string;\n  private element: any;\n\n  constructor(private modalService: ModalService, private el: ElementRef) {\n    this.element = el.nativeElement;\n  }\n\n  ngOnInit(): void {\n    if (!this.id) {\n      console.error('modal must have an id');\n      return;\n    }\n\n    document.body.appendChild(this.element);\n\n    this.element.addEventListener('click', el => {\n      if (el.target.className === 'jw-modal') {\n        this.close();\n      }\n    });\n\n    this.modalService.add(this);\n  }\n\n  ngOnDestroy(): void {\n    this.modalService.remove(this.id);\n    this.element.remove();\n  }\n\n  // open modal\n  open(): void {\n    this.element.style.display = 'block';\n    document.body.classList.add('jw-modal-open');\n  }\n\n  // close modal\n  close(): void {\n    this.element.style.display = 'none';\n    document.body.classList.remove('jw-modal-open');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "jw-modal {\n  display: none;\n}\n\njw-modal .jw-modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1000;\n  overflow: auto;\n}\n\njw-modal .jw-modal .jw-modal-body {\n  width: 800px;\n  margin: 130px auto;\n}\n\njw-modal .jw-modal-background {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #000;\n  opacity: 0.15;\n  z-index: 900;\n}\n\nbody.jw-modal-open {\n  overflow: hidden;\n}\n\n.modal-body {\n  max-height: calc(100vh - 200px);\n  overflow-y: auto;\n}\n",
                    "styleUrl": "./modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"jw-modal\">\n  <div class=\"jw-modal-body\">\n    <ng-content></ng-content>\n  </div>\n</div>\n<div class=\"jw-modal-background\"></div>\n"
        },
        {
            "name": "PaletteComponent",
            "id": "component-PaletteComponent-c0980f0f7ac09ff2edb702ec8bc9b68631817984a57f967a8da1eee72de33ffb0fd40c8a6b075f0d6c2972a857839611fb4994f1f9d3b2a413b9c4188e4a9185",
            "file": "src/app/ui/screen-design-page/palette/palette.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-palette",
            "styleUrls": [
                "./palette.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./palette.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "palette$",
                    "defaultValue": "this.service.palette$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "componentDescTracker",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "ComponentDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ComponentDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "desc",
                            "type": "ComponentDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "desc",
                            "type": "ComponentDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ScreenDesignService} from \"../screen-design.service\";\nimport {ComponentDescriptorDto} from \"@storydoc/models\";\nimport {DragRequest} from \"../canvas/canvas.component\";\n\n@Component({\n  selector: 'app-palette',\n  templateUrl: './palette.component.html',\n  styleUrls: ['./palette.component.scss']\n})\nexport class PaletteComponent implements OnInit {\n\n  constructor(private service: ScreenDesignService) { }\n\n  palette$ = this.service.palette$\n\n  ngOnInit(): void {\n  }\n\n  dragStart(ev: any, desc: ComponentDescriptorDto) {\n    let dx = ev.clientX - ev.target.getBoundingClientRect().left\n    let dy = ev.clientY - ev.target.getBoundingClientRect().top\n    ev.dataTransfer.setData(\"text\", JSON.stringify(<DragRequest>{\n      type : 'ADD_COMPONENT',\n      add: { dx, dy, desc }\n    }));\n  }\n\n  componentDescTracker(index, item: ComponentDescriptorDto) {\n    return item.type;\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../common/variables\";\n\n.palette-item {\n  background-color: #0dcaf0;\n  text-align: center;\n  vertical-align: center;\n  width: 120px;\n  height: 50px;\n  overflow: hidden;\n  border: 1px solid $storybook-primary-400;\n  margin-right: 10px;\n\n}\n",
                    "styleUrl": "./palette.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel>\n  <div *ngIf=\"palette$ | async as palette\" class=\"d-flex flex-wrap\">\n    <div class=\"palette-item\" *ngFor=\"let componentDesc of palette; trackBy: componentDescTracker\" draggable=\"true\" (dragstart)=\"dragStart($event, componentDesc)\">\n        {{componentDesc.label }}\n    </div>\n  </div>\n</app-panel>\n"
        },
        {
            "name": "PanelComponent",
            "id": "component-PanelComponent-a51a73e6ebaaf535727ea0fd30d54849385985825483bea89dfa0232aaa710ed6aebcbc5ba2fc4c03edd977ab4f24a4bbc850be2883fe473ba16c5c935736d81",
            "file": "src/app/common/panel/panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-panel",
            "styleUrls": [
                "./panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.scss']\n})\nexport class PanelComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../variables';\n\n.panel-border {\n  background-color: $storybook-white !important;\n  border: 1px solid $storybook-secondary-400 !important;\n  margin-bottom: 7px;\n}\n\n.panel-container {\n  padding: 10px;\n}\n",
                    "styleUrl": "./panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"panel-border\">\n  <div class=\"panel-container\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "PLayerPanelComponent",
            "id": "component-PLayerPanelComponent-560c5a32de7736729798e6c0e2bc58264dcc3d86399cf8a5bc25733a1f720fbdcea61525b22b6c1f398538785827e59fe013bd5d3858fdd3f01ddacd4acf8b74",
            "file": "src/app/common/presentation/player-panel/player-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-player-panel",
            "styleUrls": [
                "./player-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./player-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "first",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "last",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "next",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "previous",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faFastBackward",
                    "defaultValue": "faFastBackward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "faFastForward",
                    "defaultValue": "faFastForward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "faStepBackward",
                    "defaultValue": "faStepBackward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "faStepForward",
                    "defaultValue": "faStepForward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "firstClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lastClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\n\nimport { faStepBackward, faStepForward, faFastBackward, faFastForward } from '@fortawesome/free-solid-svg-icons';\n\n\n@Component({\n  selector: 'app-player-panel',\n  templateUrl: './player-panel.component.html',\n  styleUrls: ['./player-panel.component.scss']\n})\nexport class PLayerPanelComponent implements OnInit {\n\n  constructor() { }\n\n  @Output()\n  private first = new EventEmitter()\n\n  @Output()\n  private previous = new EventEmitter()\n\n  @Output()\n  private next = new EventEmitter()\n\n  @Output()\n  private last = new EventEmitter()\n\n  faFastBackward=faFastBackward\n  faStepBackward=faStepBackward\n  faStepForward=faStepForward\n  faFastForward=faFastForward\n\n  ngOnInit(): void {\n  }\n\n  firstClicked() {\n    this.first.emit()\n  }\n\n  previousClicked() {\n    this.previous.emit()\n  }\n\n  nextClicked() {\n    this.next.emit()\n  }\n\n  lastClicked() {\n    this.last.emit()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./player-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div>\n  <div class=\"btn-group\">\n    <button type=\"button\" class=\"btn btn-outline-light\" (click)=\"firstClicked()\">\n      <fa-icon  [icon]=\"faFastBackward\"></fa-icon> First\n    </button>\n    <button type=\"button\" class=\"btn btn-outline-light\" (click)=\"previousClicked()\">\n      <fa-icon  [icon]=\"faStepBackward\"></fa-icon> Previous\n    </button>\n    <button type=\"button\" class=\"btn btn-outline-light\" (click)=\"nextClicked()\">\n      Next <fa-icon  [icon]=\"faStepForward\"></fa-icon>\n    </button>\n    <button type=\"button\" class=\"btn btn-outline-light\" (click)=\"lastClicked()\">\n      Last <fa-icon  [icon]=\"faFastForward\"></fa-icon>\n    </button>\n\n  </div>\n\n</div>\n"
        },
        {
            "name": "PopupMenuComponent",
            "id": "component-PopupMenuComponent-0ed2a066939d050c3817abdaa5224e1550abfc0e1e39053eafafcfdc32891f5f99dc3539479d24da9479d665fdc02464183e284e09222363516fefb06a72513e",
            "file": "src/app/common/popup-menu/popup-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popup-menu",
            "styleUrls": [
                "./popup-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popup-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "\"200px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupMenuItemSpec[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "visibility",
                    "defaultValue": "\"hidden\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.visibility'"
                        }
                    ]
                },
                {
                    "name": "x",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.left'"
                        }
                    ]
                },
                {
                    "name": "y",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.top'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "PopupMenuItemSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "PopupMenuItemSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDocumentClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click'"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.left",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.top",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.visibility",
                    "defaultValue": "\"hidden\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, HostBinding, HostListener, Input, OnInit} from '@angular/core';\n\n// based on https://mobiarch.wordpress.com/2018/07/07/create-a-popup-menu-in-angular/\n\nexport interface PopupMenuItemSpec {\n  label: string\n  onClick: () => void\n}\n\n@Component({\n  selector: 'app-popup-menu',\n  templateUrl: './popup-menu.component.html',\n  styleUrls: ['./popup-menu.component.scss']\n})\nexport class PopupMenuComponent implements OnInit {\n  @HostBinding(\"style.top\") y = \"0px\"\n  @HostBinding(\"style.left\") x = \"0px\"\n  @HostBinding(\"style.visibility\") visibility = \"hidden\"\n  @Input() @HostBinding(\"style.width\") width = \"200px\"\n\n  constructor() {\n  }\n\n  items: PopupMenuItemSpec[]\n\n  ngOnInit() {\n  }\n\n  open(e: MouseEvent) {\n    this.x = `${e.pageX}px`\n    this.y = `${e.pageY}px`\n\n    this.visibility = \"visible\"\n\n    e.stopPropagation()\n  }\n\n  close() {\n    this.visibility = \"hidden\"\n  }\n\n  @HostListener('document:click')\n  public onDocumentClick() {\n    if (this.visibility === \"visible\") {\n      this.close()\n    }\n  }\n\n  onClick(item: PopupMenuItemSpec) {\n    item.onClick.apply(this, [])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../variables';\n\n:host {\n  border-top: 1px solid rgb(13, 110, 253);\n  border-left: 1px solid rgb(13, 110, 253);\n  border-right: 1px solid rgb(13, 110, 253);\n  position: absolute;\n  z-index: 999;\n  cursor: pointer;\n  background: white;\n}\n\n.items p {\n  margin: 0px;\n  padding: 5px;\n  border-bottom: 1px solid rgb(13, 110, 253);\n}\n\n.items p:hover {\n  color: white;\n  background: $storybook-primary-300;\n}\n",
                    "styleUrl": "./popup-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"items\" *ngFor=\"let item of items\">\n  <p (click)=\"onClick(item)\">{{item.label}}</p>\n</div>\n"
        },
        {
            "name": "PresentationLayoutComponent",
            "id": "component-PresentationLayoutComponent-85413884cb5d7e5547464b6af1b3ad69c72f573d39ce837a192f533183caa2200a10e68acf7a27d958a3d76c798b4c734d55b6df0c35479698bb8c5b6e51a80c",
            "file": "src/app/common/presentation/presentation-layout/presentation-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-presentation-layout",
            "styleUrls": [
                "./presentation-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./presentation-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "borderVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "hideBorder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showBorder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, TemplateRef} from '@angular/core';\nimport {animate, style, state, transition, trigger} from \"@angular/animations\";\n\n\n@Component({\n  selector: 'app-presentation-layout',\n  templateUrl: './presentation-layout.component.html',\n  styleUrls: ['./presentation-layout.component.scss'],\n  animations: [\n    trigger('showHideAnim', [\n      state('show', style({\n        opacity: 1\n      })),\n      state('hide', style({\n        opacity: 0\n      })),\n      transition('* => *', [\n        animate('0.4s')\n      ]),\n    ])\n  ]\n})\nexport class PresentationLayoutComponent {\n\n  borderVisible: boolean = false\n\n  @Input()\n  top: TemplateRef<any>\n\n  @Input()\n  center: TemplateRef<any>\n\n  @Input()\n  bottom: TemplateRef<any>\n\n  showBorder() {\n    this.borderVisible = true\n  }\n\n  hideBorder(){\n    this.borderVisible = false\n  }\n\n  get showHideState(): string {\n    return this.borderVisible? \"show\" : 'hide'\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../common/variables\";\n\n\n.hide {\n  visibility: hidden;\n}\n\n.hide-mouse {\n  // cursor: none !important;\n}\n\n.header-container {\n}\n\n\n.presentation-container {\n  @include storybook-height-fullscreen;\n  background-color: $storybook-secondary-100;\n}\n\n.main-section {\n  min-height: calc(100vh - 2*50px);\n // @include storybook-test;\n}\n\n.border-container {\n  background-color: $storybook-secondary-800;\n  color: $storybook-white;\n}\n\n.border-row {\n  min-height: 50px;\n//  @include storybook-test;\n}\n",
                    "styleUrl": "./presentation-layout.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "showHideState": {
                    "name": "showHideState",
                    "getSignature": {
                        "name": "showHideState",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                }
            },
            "templateData": "<div class=\"container-fluid presentation-container\" >\n  <div class=\"row border-row\" (mouseover)=\"showBorder()\" (mouseout)=\"hideBorder()\">\n    <div class=\"border-container\" [@showHideAnim]=\"showHideState\">\n      <ng-container *ngTemplateOutlet=\"top\"></ng-container>\n    </div>\n  </div>\n  <div class=\"row main-section hide-mouse\" >\n    <ng-container  *ngTemplateOutlet=\"center\"></ng-container>\n  </div>\n  <div class=\"row border-row\" (mouseover)=\"showBorder()\" (mouseout)=\"hideBorder()\">\n    <div class=\"border-container\" [class.hide]=\"!borderVisible\">\n      <ng-container *ngTemplateOutlet=\"bottom\" ></ng-container>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ScenarioConfigDialogComponent",
            "id": "component-ScenarioConfigDialogComponent-18c24b1f5a3b97683657e7ba2123373308fecee8387787e2d5b7dd1c124650a18e84925f8bceae2f7645752ea07fc406595655341c9bf2d3495de2859ccf465b",
            "file": "src/app/ui/uiscenario-page/scenario-config-dialog/scenario-config-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-config-dialog",
            "styleUrls": [
                "./scenario-config-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-config-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "ScenarioConfigDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n      timeLineModel : new FormControl(null, [Validators.required])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "timeLineModels$",
                    "defaultValue": "this.service.timeLineModels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "compareTimeLineModel",
                    "args": [
                        {
                            "name": "s1",
                            "type": "TimeLineModelSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "s2",
                            "type": "TimeLineModelSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "s1",
                            "type": "TimeLineModelSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "s2",
                            "type": "TimeLineModelSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {UIScenarioService} from \"../uiscenario.service\";\nimport {TimeLineModelCoordinate, TimeLineModelSummaryDto} from \"@storydoc/models\";\n\nexport interface ScenarioConfigDialogData  {\n  timeLineModel: TimeLineModelCoordinate\n}\n\nexport interface ScenarioConfigDialogSpec  {\n  data: ScenarioConfigDialogData\n  confirm: (data: ScenarioConfigDialogData)=> void\n  cancel: () => void\n}\n\n@Component({\n  selector: 'app-scenario-config-dialog',\n  templateUrl: './scenario-config-dialog.component.html',\n  styleUrls: ['./scenario-config-dialog.component.scss']\n})\nexport class ScenarioConfigDialogComponent implements OnInit {\n\n  constructor(private service: UIScenarioService) { }\n\n  timeLineModels$ = this.service.timeLineModels$\n\n  @Input()\n  spec: ScenarioConfigDialogSpec\n\n\n  ngOnInit(): void {\n    this.service.loadAssociatedTimeLineModels()\n  }\n\n  formGroup: FormGroup = new FormGroup({\n      timeLineModel : new FormControl(null, [Validators.required])\n  })\n\n  compareTimeLineModel(s1: TimeLineModelSummaryDto, s2: TimeLineModelSummaryDto): boolean {\n    return s1?.timeLineModelCoordinate?.timeLineModelId.id === s2?.timeLineModelCoordinate?.timeLineModelId.id\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./scenario-config-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-dialog\" >\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">Configure UI Scenario</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"formGroup\">\n        <label for=\"timeLineModel\" class=\"form-label\">Timeline Model</label>\n        <div class=\"input-group mb-3\">\n          <select id=\"timeLineModel\" formControlName=\"timeLineModel\" class=\"form-select\"\n                  [compareWith]=\"compareTimeLineModel\" >\n            <ng-container *ngIf=\"timeLineModels$ | async as timeLineModels\">\n              <option *ngFor=\"let timeLineModel of timeLineModels\"\n                      [ngValue]=\"timeLineModel.timeLineModelCoordinate\">{{timeLineModel.name}}</option>\n            </ng-container>\n          </select>\n        </div>\n      </form>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">OK</button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ScenarioPanelComponent",
            "id": "component-ScenarioPanelComponent-6796e6373fbc9679f88426388753a3699b3dda3c14d379da2bb64ee85740c4977f02e62b0a4bc94bea6467932da48135e546b362f66cfaad9d00abb78a264526",
            "file": "src/app/ui/uiscenario-page/scenario-panel/scenario-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-panel",
            "styleUrls": [
                "./scenario-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "screenshotCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenShotCollectionDto",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedTimeLineItem",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineItemDto",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "timeLine$",
                    "defaultValue": "this.uiScenarioService.timeLine$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TimeLineDto>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "timeLineModel$",
                    "defaultValue": "this.uiScenarioService.timeLineModel$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TimeLineModelDto>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "uiScenario$",
                    "defaultValue": "this.uiScenarioService.uiScenario$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UiScenarioDto>",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "allowDrop",
                    "args": [
                        {
                            "name": "ev",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "asArray",
                    "args": [
                        {
                            "name": "timeLines",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TimeLineDto[]",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timeLines",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "assignedScreenshot",
                    "args": [
                        {
                            "name": "uiScenario",
                            "type": "UiScenarioDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScreenshotCoordinate",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uiScenario",
                            "type": "UiScenarioDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doDrop",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "timeLineItemId",
                            "type": "TimeLineItemId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeLineItemId",
                            "type": "TimeLineItemId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "timeLineItem",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timeLineItem",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "timeLineItem",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timeLineItem",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ScreenShotCollectionDto, ScreenshotCoordinate, TimeLineDto, TimeLineItemDto, TimeLineItemId, TimeLineModelDto, UiScenarioDto} from \"@storydoc/models\";\nimport {UIScenarioService} from \"../uiscenario.service\";\nimport {Observable} from \"rxjs\";\n\n@Component({\n  selector: 'app-scenario-panel',\n  templateUrl: './scenario-panel.component.html',\n  styleUrls: ['./scenario-panel.component.scss']\n})\nexport class ScenarioPanelComponent implements OnInit {\n\n  constructor(\n    private uiScenarioService: UIScenarioService\n  ) {\n  }\n\n  timeLine$: Observable<TimeLineDto> = this.uiScenarioService.timeLine$\n\n  selectedTimeLineItem: TimeLineItemDto = null\n\n  uiScenario$: Observable<UiScenarioDto> = this.uiScenarioService.uiScenario$\n\n  timeLineModel$: Observable<TimeLineModelDto> = this.uiScenarioService.timeLineModel$\n\n\n  screenshotCollection: ScreenShotCollectionDto\n\n\n  ngOnInit(): void {\n  }\n\n  allowDrop(ev: DragEvent) {\n    ev.preventDefault();\n  }\n\n  doDrop(ev: any, timeLineItemId: TimeLineItemId) {\n    ev.preventDefault();\n    var data = ev.dataTransfer.getData(\"text\");\n    let screenshotCoordinate: ScreenshotCoordinate = <ScreenshotCoordinate>JSON.parse(data)\n    this.uiScenarioService.addScreenshotToScenario(screenshotCoordinate, timeLineItemId)\n  }\n\n  assignedScreenshot(uiScenario: UiScenarioDto, item: TimeLineItemDto): ScreenshotCoordinate {\n    if (!item) return null\n    return uiScenario.screenshots\n      .find(screenshot => screenshot.timeLineItemId.id == item.itemId.id)\n      ?.screenshotCoordinate;\n  }\n\n  asArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n  select(timeLineItem: TimeLineItemDto) {\n    this.selectedTimeLineItem = timeLineItem\n  }\n\n  isSelected(timeLineItem: TimeLineItemDto):boolean {\n    return this.selectedTimeLineItem?.itemId.id === timeLineItem?.itemId.id\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../common/variables';\n\n.to-bottom {\n  @include storybook-height-main-section\n}\n\n.dropzone {\n  width: 120px;\n  min-height: 100px;\n  border: dotted 1px red\n}\n\n.time-line-item-connector {\n  height: 31px;\n  width: 50%;\n  border-right: 2px solid $storybook-secondary-500;\n}\n\n.time-line-item {\n  border-radius: 10px;\n  cursor: pointer;\n  border: 2px solid $storybook-secondary-500;\n  padding: 10px;\n  text-align: center;\n}\n\n.selected {\n  background-color: $storybook-primary-300;\n  color: $storybook-white;\n}\n",
                    "styleUrl": "./scenario-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"uiScenario$ | async as uiScenario\">\n  <ng-container *ngIf=\"timeLineModel$ | async as timeLineModel\">\n    <ng-container *ngIf=\"timeLine$ | async as timeLine\">\n      <app-panel>\n      <div class=\"container-fluid to-bottom\">\n        <div class=\"row\">\n          <div class=\"col-md-3\">\n            <div class=\"container\">\n              <div class=\"row\" *ngFor=\"let timeLineItem of timeLine.items; let idx=index \" (click)=\"select(timeLineItem)\">\n                <div class=\"col-md-6\">\n                  <div class=\"time-line-item-connector\"></div>\n                  <div class=\"time-line-item\" [class.selected]=\"isSelected(timeLineItem)\">{{timeLineItem.description}}</div>\n                  <div class=\"time-line-item-connector\"></div>\n                </div>\n                <div class=\"col-md-6\">\n                  <div *ngVar=\"assignedScreenshot(uiScenario, timeLineItem) as screenshotCoord\" style=\"margin-bottom: 10px;\">\n                    <div class=\"dropzone\" (dragover)=\"allowDrop($event)\" (drop)=\"doDrop($event, timeLineItem.itemId)\">\n                      <ng-container *ngIf=\"screenshotCoord\">\n                        <app-screenshot-thumbnail [screenshotCoordinate]=\"screenshotCoord\" [selected]=\"isSelected(timeLineItem)\"></app-screenshot-thumbnail>\n                      </ng-container>\n                      <ng-container *ngIf=\"!screenshotCoord\">\n                        <div>[drop sceenshot here]</div>\n                      </ng-container>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-9\">\n            <div *ngIf=\"assignedScreenshot(uiScenario, selectedTimeLineItem) as screenshotCoordinate\" style=\"width: 100%; height: 100%;  \">\n                <app-screenshot-thumbnail [thumbnail]=\"false\" [screenshotCoordinate]=\"screenshotCoordinate\"></app-screenshot-thumbnail>\n            </div>\n          </div>\n        </div>\n      </div>\n      </app-panel>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #loading>loading...</ng-template>\n"
        },
        {
            "name": "ScenarioPresentationComponent",
            "id": "component-ScenarioPresentationComponent-8e83f6711c5c3524f03d8f40d25f6cff27f69b86ba3235eeee8a96c0e212041d5c95efc4f2660eb83c8360d522fef4f48ee686ccb5e7d52db10096cd9ca5397c",
            "file": "src/app/ui/uiscenario-page/scenario-presentation/scenario-presentation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-presentation",
            "styleUrls": [
                "./scenario-presentation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-presentation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "uiScenario$",
                    "defaultValue": "this.uiScenarioService.uiScenario$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UiScenarioDto>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "endPresentationMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toFirst",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toLast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toPrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport {Observable} from \"rxjs\";\nimport {UiScenarioDto} from \"@storydoc/models\";\nimport {UIScenarioService} from \"../uiscenario.service\";\n\n@Component({\n  selector: 'app-scenario-presentation',\n  templateUrl: './scenario-presentation.component.html',\n  styleUrls: ['./scenario-presentation.component.scss']\n})\nexport class ScenarioPresentationComponent implements OnInit {\n\n  constructor(\n    private uiScenarioService: UIScenarioService\n  ) { }\n\n  uiScenario$: Observable<UiScenarioDto> = this.uiScenarioService.uiScenario$\n\n  ngOnInit(): void {\n  }\n\n  endPresentationMode() {\n    this.uiScenarioService.togglePresentationMode()\n  }\n\n  toFirst() {\n    this.uiScenarioService.selectFirst()\n  }\n\n  toPrevious() {\n    this.uiScenarioService.selectPrevious()\n  }\n\n  toNext() {\n    this.uiScenarioService.selectNext()\n  }\n\n  toLast() {\n    this.uiScenarioService.selectLast()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./scenario-presentation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-presentation-layout\n  [top]=\"top\"\n  [center]=\"center\"\n  [bottom]=\"bottom\"\n>\n</app-presentation-layout>\n\n<ng-template #top>\n  <div class=\"container-fluid\" *ngIf=\"uiScenario$ | async as uiScenario\">\n    <div class=\"row\">\n      <div class=\"col-md-11\">\n      </div>\n      <div class=\"col-md-1\">\n        <div class=\"btn  btn-sm btn-outline-light\" (click)=\"endPresentationMode()\">End Presentation</div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #center>\n  <app-scenario-panel></app-scenario-panel>\n</ng-template>\n\n<ng-template #bottom>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n    </div>\n    <div class=\"col-md-4\">\n      <app-player-panel (first)=\"toFirst()\" (previous)=\"toPrevious()\" (next)=\"toNext()\" (last)=\"toLast()\"></app-player-panel>\n    </div>\n    <div class=\"col-md-4\">\n    </div>\n  </div>\n</ng-template>\n\n"
        },
        {
            "name": "ScreenDesignPageComponent",
            "id": "component-ScreenDesignPageComponent-382a376ef2ecd2c90c9698bb7125b42e1ee2a0ad5c49bcfae3c3b92d068a1dd231beccf244c600b1565f8c74594bd7b16b45948e67f9e2d68dc8b2e26bfb6ab1",
            "file": "src/app/ui/screen-design-page/screen-design-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-screen-design-page",
            "styleUrls": [
                "./screen-design-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screen-design-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "screenDesign$",
                    "defaultValue": "this.service.screenDesign$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ScreenDesignService} from \"./screen-design.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Subscription} from \"rxjs\";\nimport {LinkService} from \"@storydoc/common\";\n\n@Component({\n  selector: 'app-screen-design-page',\n  templateUrl: './screen-design-page.component.html',\n  styleUrls: ['./screen-design-page.component.scss']\n})\nexport class ScreenDesignPageComponent implements OnInit, OnDestroy {\n\n  constructor(\n    public link: LinkService,\n    private route: ActivatedRoute,\n    private service: ScreenDesignService) { }\n\n  screenDesign$ = this.service.screenDesign$\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n    this.subscriptions.push(this.route.paramMap.subscribe((params) => {\n      let documentId = params.get('documentId')\n      let blockId = params.get('blockId')\n      let id = params.get('artifactId')\n      if (id) {\n        this.service.setScreenDesign({\n          blockCoordinate: {\n            blockId: { id: blockId },\n            storyDocId: { id: documentId }\n          },\n          screenDesignId: {id: id }\n        });\n      }\n    }));\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./screen-design-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ScreenDesignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout-1col\n  [breadcrumb]=\"breadcrumb\"\n  [title]=\"title\"\n  [middle]=\"content\"\n>\n</app-layout-1col>\n\n<ng-template #breadcrumb>\n  <ng-container *ngIf=\"screenDesign$ | async as screenDesign\">\n    <nav>\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <app-back-button [routerLink]=\"link.toStoryDoc(screenDesign.storyDocSummaryDTO)\"></app-back-button>\n          <a routerLink=\"/\">Home</a>\n        </li>\n        <li class=\"breadcrumb-item\"><a\n          [routerLink]=\"link.toStoryDoc(screenDesign.storyDocSummaryDTO)\">{{screenDesign.storyDocSummaryDTO.name}}</a>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{screenDesign.name}}</li>\n      </ol>\n    </nav>\n  </ng-container>\n</ng-template>\n\n<ng-template #title>\n  <div class=\"container-fluid\" *ngIf=\"screenDesign$ | async as screenDesign\">\n    <div class=\"row\">\n      <h3>\n        Screen design: {{screenDesign.name}}\n      </h3>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #content>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col col-md-2\">\n      </div>\n      <div class=\"col col-md-8\">\n        <app-palette></app-palette>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col col-md-2\">\n        <app-component-tree></app-component-tree>\n      </div>\n      <div class=\"col col-md-8\">\n        <app-canvas></app-canvas>\n      </div>\n      <div class=\"col col-md-2\">\n        <app-component-details></app-component-details>\n      </div>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ScreenshotCollectionPageComponent",
            "id": "component-ScreenshotCollectionPageComponent-7b49ea95198aff3d53bbee3a457bfac7dfc19682b9a6ffc16767270a6a385bab71d152e18e39caed88d22d211b02dfcb78f50285c6508b38679650ac50273de1",
            "file": "src/app/ui/screenshot-collection-page/screenshot-collection-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-screenshot-collection-page",
            "styleUrls": [
                "./screenshot-collection-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screenshot-collection-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "screenshotCollection$",
                    "defaultValue": "this.screenshotCollectionService.screenshotCollection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getScreenshotUrl",
                    "args": [
                        {
                            "name": "screenshot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "screenshot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "screenshotCoord",
                    "args": [
                        {
                            "name": "screenshot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScreenshotCoordinate",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "screenshot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {LinkService, ModalService, AdminDataService, PopupMenuComponent, ConfirmationDialogSpec} from \"@storydoc/common\";\nimport {ScreenshotCoordinate, ScreenShotDto, TimeLineDto, TimeLineItemDto} from \"@storydoc/models\";\nimport {\n  ScreenshotDialogData,\n  ScreenshotDialogSpec\n} from \"./create-screenshot-dialog/create-screenshot-dialog.component\";\nimport {ScreenshotCollectionService} from \"./screenshot-collection.service\";\nimport {Subscription} from \"rxjs\";\n\n@Component({\n  selector: 'app-screenshot-collection-page',\n  templateUrl: './screenshot-collection-page.component.html',\n  styleUrls: ['./screenshot-collection-page.component.scss']\n})\nexport class ScreenshotCollectionPageComponent implements OnInit, OnDestroy {\n\n  constructor(\n    private screenshotCollectionService: ScreenshotCollectionService,\n    private route: ActivatedRoute,\n    public link: LinkService,\n  ) {\n  }\n\n  screenshotCollection$ = this.screenshotCollectionService.screenshotCollection$\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n    this.subscriptions.push(this.route.paramMap.subscribe((params) => {\n      let documentId = params.get('documentId')\n      let blockId = params.get('blockId')\n      let id = params.get('artifactId')\n      if (id) {\n        this.screenshotCollectionService.initId({\n          blockCoordinate: {\n            blockId: { id: blockId },\n            storyDocId: { id: documentId }\n          },\n          screenShotCollectionId: {id: id }\n        });\n      }\n    }));\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n\n  getScreenshotUrl(screenshot: ScreenShotDto) {\n    let coord = this.screenshotCoord(screenshot);\n    return this.link.getScreenshotUrl(coord)\n  }\n\n  screenshotCoord(screenshot: ScreenShotDto) {\n    let coord = <ScreenshotCoordinate>{\n      collectionCoordinate: this.screenshotCollectionService.collectionCoord,\n      screenShotId: {id: screenshot.id.id}\n    };\n    return coord;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./screenshot-collection-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenshotCollectionService",
                        "type": "ScreenshotCollectionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "screenshotCollectionService",
                        "type": "ScreenshotCollectionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout-1col\n  [breadcrumb]=\"breadcrumb\"\n  [title]=\"title\"\n  [middle]=\"collectionPanel\"\n>\n</app-layout-1col>\n\n<ng-template #breadcrumb>\n  <ng-container *ngIf=\"screenshotCollection$ | async as screenshotCollection\">\n    <nav>\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <app-back-button [routerLink]=\"link.toStoryDoc(screenshotCollection.storyDocSummary)\"></app-back-button>\n          <a routerLink=\"/\">Home</a>\n        </li>\n        <li class=\"breadcrumb-item\"><a\n          [routerLink]=\"link.toStoryDoc(screenshotCollection.storyDocSummary)\">{{screenshotCollection.storyDocSummary.name}}</a>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{screenshotCollection.name}}</li>\n      </ol>\n    </nav>\n  </ng-container>\n</ng-template>\n\n<ng-template #title>\n  <div class=\"container-fluid\" *ngIf=\"screenshotCollection$ | async as screenshotCollection\">\n    <div class=\"row\">\n      <h3>\n        Screenshots: {{screenshotCollection.name}}\n      </h3>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #leftPanel>\n  <span>LEFT</span>\n</ng-template>\n\n<ng-template #collectionPanel>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n    </div>\n    <div class=\"row\">\n      <app-screenshot-collection-panel [screenshotCollection$]=\"screenshotCollection$\" [readonly]=\"false\"></app-screenshot-collection-panel>\n    </div>\n  </div>\n</ng-template>\n\n\n<ng-template #loading>loading...</ng-template>\n"
        },
        {
            "name": "ScreenshotCollectionPanelComponent",
            "id": "component-ScreenshotCollectionPanelComponent-9c1fb986ecd45bdb90dc63dc08d2a063afac93125df7479231b5e38d24824f69b141b64bbaca91ab0363a69fe43ee9f28b161917da56485503c01bca8619ce32",
            "file": "src/app/ui/screenshot-collection-page/screenshot-collection-panel/screenshot-collection-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-screenshot-collection-panel",
            "styleUrls": [
                "./screenshot-collection-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screenshot-collection-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "readonly",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "screenshotCollection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Observable<ScreenShotCollectionDto>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmationDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PopupMenuComponent"
                        }
                    ]
                },
                {
                    "name": "screenshotCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenShotCollectionDto",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "screenshotDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScreenshotDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "settings$",
                    "defaultValue": "this.admin.settings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addScreenShot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeScreenShotDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmAddScreenshot",
                    "args": [
                        {
                            "name": "data",
                            "type": "ScreenshotDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ScreenshotDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmDeleteScreenShot",
                    "args": [
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmRenameScreenShot",
                    "args": [
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "ScreenshotDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "ScreenshotDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScreenshot",
                    "args": [
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "ev",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "screenshotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "screenshotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenshotDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openScreenshotDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "ScreenshotDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "ScreenshotDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renameScreenshot",
                    "args": [
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "screenShot",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "screenshotCoordinate",
                    "args": [
                        {
                            "name": "screenShotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScreenshotCoordinate",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "screenShotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "screenshotTracker",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ScreenShotDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {Observable, Subscription} from \"rxjs\";\nimport {ScreenShotCollectionDto, ScreenshotCoordinate, ScreenShotDto, ScreenShotId} from \"@storydoc/models\";\nimport {AdminDataService, ConfirmationDialogSpec, LinkService, ModalService, PopupMenuComponent} from \"@storydoc/common\";\nimport {ScreenshotCollectionService} from \"../screenshot-collection.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {ScreenshotDialogData, ScreenshotDialogSpec} from \"../create-screenshot-dialog/create-screenshot-dialog.component\";\n\n@Component({\n  selector: 'app-screenshot-collection-panel',\n  templateUrl: './screenshot-collection-panel.component.html',\n  styleUrls: ['./screenshot-collection-panel.component.scss']\n})\nexport class ScreenshotCollectionPanelComponent implements OnInit, OnDestroy{\n\n  constructor(\n    private screenshotCollectionService: ScreenshotCollectionService,\n    private modalService: ModalService,\n    private admin: AdminDataService,\n  ) { }\n\n  settings$ = this.admin.settings$\n  maxFileSize : number\n\n  @Input()\n  screenshotCollection$: Observable<ScreenShotCollectionDto>\n  screenshotCollection: ScreenShotCollectionDto\n\n  @Input()\n  readonly: boolean = true\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.screenshotCollection$.subscribe(screenshotCollectionDTO => this.screenshotCollection=screenshotCollectionDTO))\n      this.subscriptions.push(this.settings$.subscribe((settings)=> this.maxFileSize = settings?.maxFileSize))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  dragStart(ev: DragEvent, screenshotId: ScreenShotId) {\n    let screenshotCoordinate = this.screenshotCoordinate(screenshotId)\n    ev.dataTransfer.setData(\"text\", JSON.stringify(screenshotCoordinate));\n  }\n\n  screenshotCoordinate(screenShotId: ScreenShotId) {\n    return <ScreenshotCoordinate>{\n      collectionCoordinate: this.screenshotCollection.coordinate,\n      screenShotId\n    };\n  }\n\n  // create screenshot dialog\n  screenshotDialogSpec: ScreenshotDialogSpec\n\n  screenshotTracker(index, item: ScreenShotDto) {\n    return item.id.id;\n  }\n\n  getScreenshotDialogId() {\n    return \"screenshot-dialog\"\n  }\n\n  openScreenshotDialog(spec: ScreenshotDialogSpec) {\n    this.screenshotDialogSpec = spec\n    this.modalService.open(this.getScreenshotDialogId())\n  }\n\n  private closeScreenShotDialog() {\n    this.modalService.close(this.getScreenshotDialogId())\n  }\n\n  addScreenShot() {\n    this.openScreenshotDialog({\n        mode: 'NEW',\n        data: {\n          name: null,\n          file: null,\n          fileSource: null,\n          fileSize: 0\n        },\n        confirm: (data) => { this.confirmAddScreenshot(data); this.closeScreenShotDialog() },\n        cancel: () => this.closeScreenShotDialog(),\n        maxFileSize : this.maxFileSize\n      }\n    )\n  }\n\n  confirmAddScreenshot(data: ScreenshotDialogData) {\n    this.screenshotCollectionService.AddScreenshot({\n      fileSource: data.fileSource,\n      name: data.name\n    }, () => {\n    })\n  }\n\n  // confirmation dialog\n\n  confirmationDialogSpec: ConfirmationDialogSpec\n\n  confirmationDialogId(): string {\n    return 'confirmation-dialog'\n  }\n\n  openConfirmationDialog(confirmationDialogSpec: ConfirmationDialogSpec) {\n    this.confirmationDialogSpec = confirmationDialogSpec\n    this.modalService.open(this.confirmationDialogId())\n  }\n\n  closeConfirmationDialog() {\n    this.modalService.close(this.confirmationDialogId())\n  }\n\n\n  // menu\n  @ViewChild(PopupMenuComponent) menu: PopupMenuComponent\n\n  openMenu(event: MouseEvent, screenShot: ScreenShotDto) {\n    this.menu.items = [\n      {\n        label: 'Rename',\n        onClick: () => this.renameScreenshot(screenShot)\n      },\n      {\n        label: 'Delete',\n        onClick: () => this.deleteScreenshot(screenShot)\n      }\n    ]\n    this.menu.open(event)\n    return false\n  }\n\n  private renameScreenshot(screenShot: ScreenShotDto) {\n    this.openScreenshotDialog({\n        mode: 'UPDATE',\n        data: {\n          name: screenShot.name,\n          file: null,\n          fileSource: null,\n          fileSize: 0\n        },\n        confirm: (data) => { this.confirmRenameScreenShot(screenShot, data); this.closeScreenShotDialog() },\n        cancel: () => this.closeScreenShotDialog(),\n        maxFileSize : this.maxFileSize\n      }\n    )\n  }\n\n  private confirmRenameScreenShot(screenShot: ScreenShotDto, data: ScreenshotDialogData) {\n    this.screenshotCollectionService.renameScreenShot(screenShot.id, data.name)\n  }\n\n\n  private deleteScreenshot(screenShot: ScreenShotDto) {\n    this.openConfirmationDialog({\n      title: \"Confim Delete\",\n      message: `Delete screenshot '${screenShot.name}' ?`,\n      confirm: () => { this.confirmDeleteScreenShot(screenShot); this.closeConfirmationDialog() },\n      cancel: () => this.closeConfirmationDialog()\n    })\n  }\n\n  private confirmDeleteScreenShot(screenShot: ScreenShotDto) {\n    this.screenshotCollectionService.deleteScreenshot(screenShot.id)\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./screenshot-collection-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screenshotCollectionService",
                        "type": "ScreenshotCollectionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "admin",
                        "type": "AdminDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "screenshotCollectionService",
                        "type": "ScreenshotCollectionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "admin",
                        "type": "AdminDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div *ngIf=\"(screenshotCollection$ | async) as screenshotCollection\" class=\"d-flex flex-wrap\" >\n      <div class=\"p-2\" *ngFor=\"let screenshot of screenshotCollection.screenShots; trackBy: screenshotTracker\" >\n        <div (contextmenu)=\"!readonly && openMenu($event, screenshot)\">\n          <app-screenshot-thumbnail [screenshotCoordinate]=\"screenshotCoordinate(screenshot.id)\" [label]=\"screenshot.name\" (dragstart)=\"dragStart($event, screenshot.id)\" >\n          </app-screenshot-thumbnail>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"!readonly\" class=\"row\">\n      <div class=\"col\">\n        <div class=\"btn  btn-sm btn-outline-primary\" (click)=\"addScreenShot()\">Add Screenshot</div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<app-popup-menu></app-popup-menu>\n\n<jw-modal *ngIf=\"!readonly\" [id]=\"getScreenshotDialogId()\">\n  <app-create-screenshot-dialog [spec]=\"screenshotDialogSpec\" ></app-create-screenshot-dialog>\n</jw-modal>\n\n<jw-modal *ngIf=\"!readonly\" [id]=\"confirmationDialogId()\">\n  <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "ScreenshotPanelComponent",
            "id": "component-ScreenshotPanelComponent-03ebbfd7ec843146eb7d25ea5e7b486dba7abf5dfdeefa30fabea57561d9214b66903f32ed749468e1d6391cf4301851c9dc419d0c44adad847e117b70854869",
            "file": "src/app/ui/uiscenario-page/screenshot-panel/screenshot-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-screenshot-panel",
            "styleUrls": [
                "./screenshot-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screenshot-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collectionCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "collections$",
                    "defaultValue": "this.uiScenarioService.screenshotCollections$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    collection: new FormControl(null)\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "screenshotCollection$",
                    "defaultValue": "this.uiScenarioService.screenshotCollection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "screenshotCollectionCoord$",
                    "defaultValue": "this.uiScenarioService.screenshotCollectionCoord$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCollectionChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "screenshotCoordinate",
                    "args": [
                        {
                            "name": "screenshotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScreenshotCoordinate",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "screenshotId",
                            "type": "ScreenShotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {Observable} from \"rxjs\";\nimport {ScreenshotCollectionCoordinate, ScreenShotCollectionDto, ScreenshotCollectionSummaryDto, ScreenshotCoordinate, ScreenShotId} from \"@storydoc/models\";\nimport {UiRestControllerService} from \"@storydoc/services\";\nimport {UIScenarioService} from \"../uiscenario.service\";\n\n@Component({\n  selector: 'app-screenshot-panel',\n  templateUrl: './screenshot-panel.component.html',\n  styleUrls: ['./screenshot-panel.component.scss']\n})\nexport class ScreenshotPanelComponent implements OnInit {\n\n  constructor(\n    private uiScenarioService: UIScenarioService,\n    private uiRestControllerService: UiRestControllerService\n  ) {\n  }\n\n  screenshotCollectionCoord$ = this.uiScenarioService.screenshotCollectionCoord$\n  collectionCoordinate\n\n  screenshotCollection$ = this.uiScenarioService.screenshotCollection$\n\n  collections$ = this.uiScenarioService.screenshotCollections$\n\n  ngOnInit(): void {\n    this.screenshotCollectionCoord$.subscribe(coord => {\n      this.collectionControl.setValue(coord, {onlySelf: true})\n      this.collectionCoordinate = coord })\n  }\n\n  formGroup = new FormGroup({\n    collection: new FormControl(null)\n  });\n\n  get collectionControl() : FormControl {\n    return <FormControl> this.formGroup.get('collection')\n  }\n\n  onCollectionChange() {\n    if(this.collectionControl.value) {\n      this.uiScenarioService.selectScreenshotCollection(this.collectionControl.value)\n    }\n  }\n\n  screenshotCoordinate(screenshotId: ScreenShotId): ScreenshotCoordinate {\n    return <ScreenshotCoordinate>{\n      collectionCoordinate: this.collectionCoordinate,\n      screenShotId: screenshotId\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./screenshot-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "collectionControl": {
                    "name": "collectionControl",
                    "getSignature": {
                        "name": "collectionControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 38
                    }
                }
            },
            "templateData": "<app-panel>\n  <form [formGroup]=\"formGroup\">\n    <div class=\"mb-3\">\n      <label for=\"collection\" class=\"form-label\">Screenshot collection</label>\n      <select id=\"collection\" formControlName=\"collection\" class=\"form-select\" (change)=\"onCollectionChange()\">\n        <option selected>--select--</option>\n        <ng-container *ngIf=\"collections$ | async as collections\">\n          <option *ngFor=\"let collection of collections\"\n                  [ngValue]=\"collection.collectionCoordinate\">{{collection.name}}</option>\n        </ng-container>\n      </select>\n      <div class=\"form-text\">Select a screenshot collection.</div>\n    </div>\n  </form>\n  <div  *ngIf=\"(screenshotCollection$|async)\" style=\"max-height: 400px; overflow-y: scroll;\">\n    <app-screenshot-collection-panel  [screenshotCollection$]=\"screenshotCollection$\" ></app-screenshot-collection-panel>\n  </div>\n</app-panel>\n"
        },
        {
            "name": "ScreenshotThumbnailComponent",
            "id": "component-ScreenshotThumbnailComponent-27acd7a4bf27903415019ef39d87f250c9c69469d40b70e361e9195e26e16dc348154a875824a7e0fcb9607608f1e3bee98e1611ec39474425fde05b158107c6",
            "file": "src/app/ui/uiscenario-page/screenshot-thumbnail/screenshot-thumbnail.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-screenshot-thumbnail",
            "styleUrls": [
                "./screenshot-thumbnail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screenshot-thumbnail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "screenshotCoordinate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "ScreenshotCoordinate",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "thumbnail",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getScreenshotUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {LinkService} from \"@storydoc/common\";\nimport {ScreenshotCoordinate} from \"@storydoc/models\";\n\n@Component({\n  selector: 'app-screenshot-thumbnail',\n  templateUrl: './screenshot-thumbnail.component.html',\n  styleUrls: ['./screenshot-thumbnail.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScreenshotThumbnailComponent implements OnInit {\n\n  constructor(private link: LinkService) {\n  }\n\n  @Input()\n  selected: boolean= false\n\n  @Input()\n  thumbnail: boolean = true\n\n  @Input()\n  label: string\n\n  @Input()\n  screenshotCoordinate: ScreenshotCoordinate\n\n  get containerClass():string {\n    return this.thumbnail? 'thumbnail-container' : 'full-width-container'\n  }\n\n  get imageClass():string {\n    return this.thumbnail? 'thumbnail-image' : 'full-width-image'\n  }\n\n  ngOnInit(): void {\n  }\n\n  getScreenshotUrl() {\n    return this.link.getScreenshotUrl(this.screenshotCoordinate)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".thumbnail-container {\n  width: 120px;\n  height: 100px;\n  overflow: hidden;\n  border: 1px solid lightblue;\n}\n\n.selected {\n  border: 2px solid blue;\n}\n\n.thumbnail-image {\n  height: 100px;\n  width: auto;\n}\n\n.full-width-container {\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.full-width-image {\n  max-width: 50vw;\n  //width: 100%;\n}\n",
                    "styleUrl": "./screenshot-thumbnail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "containerClass": {
                    "name": "containerClass",
                    "getSignature": {
                        "name": "containerClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                },
                "imageClass": {
                    "name": "imageClass",
                    "getSignature": {
                        "name": "imageClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 32
                    }
                }
            },
            "templateData": "<div>\n    <div [class.selected]=\"selected\" [class]=\"containerClass\">\n      <img [class]=imageClass [src]=\"getScreenshotUrl()\" >\n    </div>\n    <div style=\"max-width: 120px; text-align: center\">{{label}}</div>\n</div>\n"
        },
        {
            "name": "SourceCodePanelComponent",
            "id": "component-SourceCodePanelComponent-40a6c6c37560e75072731fd00178bc715e722ecda644d57bfdc0091930e8b2ac0d213b46c2314dd0b9682dcf42cee2b98e38e5df99d17f8b266581b16287d912",
            "file": "src/app/code/code-trace-page/source-code-panel/source-code-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-source-code-panel",
            "styleUrls": [
                "./source-code-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./source-code-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sourceCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceCodeDto",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sourceCode$",
                    "defaultValue": "this.codeService.sourceCode$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "code",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {CodeRestControllerService} from \"@storydoc/services\";\nimport {SourceCodeDto} from \"@storydoc/models\";\nimport {CodeService} from \"../../code.service\";\nimport {Subscription} from \"rxjs\";\n\n\n@Component({\n  selector: 'app-source-code-panel',\n  templateUrl: './source-code-panel.component.html',\n  styleUrls: ['./source-code-panel.component.scss']\n})\nexport class SourceCodePanelComponent implements OnInit {\n\n  constructor(\n    private codeService: CodeService,\n    private codeRestControllerService: CodeRestControllerService) { }\n\n  sourceCode$ = this.codeService.sourceCode$\n  sourceCode: SourceCodeDto\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit() : void {\n    this.subscriptions.push(this.sourceCode$.subscribe(sourceCode => this.sourceCode = sourceCode))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  code() {\n    if (this.sourceCode) {\n      return this.sourceCode.lines.join('\\n')\n    }\n    return ''\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./source-code-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "codeService",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "codeRestControllerService",
                        "type": "CodeRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "codeService",
                        "type": "CodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "codeRestControllerService",
                        "type": "CodeRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<pre><code>{{code()}}</code></pre>\n"
        },
        {
            "name": "TextBlockComponent",
            "id": "component-TextBlockComponent-9b56d5cf58495a728095b08c355e1bcf053302bd7483604f635016d4139a2964cae6fc4e3628597579f9051b103d10d7ee9f7c1da566944a9a2b8e21984ef7c4",
            "file": "src/app/document/document-page/block/text-block/text-block.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-block",
            "styleUrls": [
                "./text-block.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-block.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-text-block',\n  templateUrl: './text-block.component.html',\n  styleUrls: ['./text-block.component.scss']\n})\nexport class TextBlockComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-block.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>text-block works!</p>\n"
        },
        {
            "name": "ThumbNailComponent",
            "id": "component-ThumbNailComponent-6cb62d8e650e6a30721c006dee349bcde5f2fd3798e3ca8d425974b713902d4a6656326b4df89aa01f563448bc79567d2a36b5f955a081fc55e8a2bcb1a1da61",
            "file": "_attick/uiblock/thumb-nail/thumb-nail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-thumb-nail",
            "styleUrls": [
                "./thumb-nail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./thumb-nail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ui",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Uidto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Uidto} from '../../../../../app/api/models'\n\n@Component({\n  selector: 'app-thumb-nail',\n  templateUrl: './thumb-nail.component.html',\n  styleUrls: ['./thumb-nail.component.scss']\n})\nexport class ThumbNailComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  ui: Uidto;\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".thumbnail-image {\n  border: 1px solid #ddd; /* Gray border */\n  border-radius: 4px;  /* Rounded border */\n  padding: 5px; /* Some padding */\n  width: 150px; /* Set a small width */\n}\n",
                    "styleUrl": "./thumb-nail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  <img class=\"thumbnail\" src=\"{{ui.imgURL}}\">\n"
        },
        {
            "name": "TimelinePageComponent",
            "id": "component-TimelinePageComponent-b2bac384a288e75a5c324b4e23262851ee90e9d4aa374537de3190881be05119deb9fd96ae28555d87e19a71fb00a4ba2c7f9825bdde759b9ccb0a820212c793",
            "file": "src/app/ui/timeline-page/timeline-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-page",
            "styleUrls": [
                "./timeline-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blockId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmationDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "documentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "itemDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PopupMenuComponent"
                        }
                    ]
                },
                {
                    "name": "timeLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "timeLineId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeLineId",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "timeLineModel$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TimeLineModelDto>",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "addMore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addMore",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeItemDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmAddItem",
                    "args": [
                        {
                            "name": "data",
                            "type": "ItemDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ItemDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmDeleteItem",
                    "args": [
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmRenameItem",
                    "args": [
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "ItemDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "ItemDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openItemDialog",
                    "args": [
                        {
                            "name": "dialogInput",
                            "type": "ItemDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dialogInput",
                            "type": "ItemDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "renameItem",
                    "args": [
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeLine",
                            "type": "TimeLineDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "TimeLineItemDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\nimport {share} from \"rxjs/operators\";\nimport {ConfirmationDialogSpec, LinkService, ModalService, PopupMenuComponent} from \"@storydoc/common\";\nimport {ArtifactDto, TimeLineDto, TimeLineId, TimeLineItemDto, TimeLineModelDto} from \"@storydoc/models\";\nimport {TimeLineControllerService} from \"@storydoc/services\";\nimport {ItemDialogData, ItemDialogSpec} from \"./create-item-dialog/create-item-dialog.component\";\n\n@Component({\n  selector: 'app-timeline-page',\n  templateUrl: './timeline-page.component.html',\n  styleUrls: ['./timeline-page.component.scss']\n})\nexport class TimelinePageComponent implements OnInit {\n\n  constructor(\n    private timeLineControllerService: TimeLineControllerService,\n    public link: LinkService,\n    private modalService: ModalService,\n    private route: ActivatedRoute\n  ) {\n  }\n\n  timeLineModel$: Observable<TimeLineModelDto>\n\n  documentId: string\n  blockId: string\n  id: string\n  timeLine: 'default'\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe((params) => {\n      this.documentId = params.get('documentId')\n      this.blockId = params.get('blockId')\n      this.id = params.get('artifactId')\n      if (this.id) {\n        this.reload();\n      }\n    });\n  }\n\n  timeLineId: TimeLineId;\n\n  private reload() {\n    this.timeLineModel$ = this.timeLineControllerService.getTimeLineModelUsingGet({\n      storyDocId: this.documentId,\n      blockId: this.blockId,\n      timeLineModelId: this.id\n    }).pipe(share())\n    this.timeLineModel$.subscribe({\n      next: timeLineModel => this.timeLineId = timeLineModel?.timeLines['default'].timeLineId\n    })\n  }\n\n  // item dialog\n  itemDialogSpec: ItemDialogSpec\n\n  getDialogId() {\n    return \"item-dialog\"\n  }\n\n  openItemDialog(dialogInput: ItemDialogSpec) {\n    this.itemDialogSpec = dialogInput\n    this.modalService.open(this.getDialogId())\n  }\n\n  closeItemDialog() {\n    this.modalService.close(this.getDialogId())\n  }\n\n  // add item\n  addItem(addMore: boolean = false) {\n    this.openItemDialog({\n      mode: 'NEW',\n      data: {\n        description: null,\n        addMore\n      },\n      confirm: (data) => {\n        this.confirmAddItem(data);\n        this.closeItemDialog()\n      },\n      cancel: () => this.closeItemDialog()\n    })\n  }\n\n  confirmAddItem(data: ItemDialogData) {\n    this.timeLineControllerService.createTimeLineItemUsingPost({\n      storyDocId: this.documentId,\n      blockId: this.blockId,\n      timeLineModelId: this.id,\n      // timeLineId: this.timeLineId.id,\n      name: data.description\n    }).subscribe({\n      next: value => { this.reload(); if (data.addMore) this.addItem(true) }\n    })\n  }\n\n  // menu\n  @ViewChild(PopupMenuComponent) menu: PopupMenuComponent\n\n  openMenu(event: MouseEvent, timeLine: TimeLineDto, item: TimeLineItemDto) {\n    this.menu.items = [\n      {\n        label: 'Rename',\n        onClick: () => this.renameItem(timeLine, item)\n      },\n      {\n        label: 'Delete',\n        onClick: () => this.deleteItem(timeLine, item)\n      }\n    ]\n    this.menu.open(event)\n    return false\n  }\n\n  private renameItem(timeLine: TimeLineDto, item: TimeLineItemDto) {\n    this.openItemDialog({\n      mode: 'UPDATE',\n      data: {\n        description: item.description,\n        addMore: false\n      },\n      confirm: (data) => { this.confirmRenameItem(timeLine, item, data); this.closeItemDialog() },\n      cancel: () => this.closeItemDialog()\n    })\n  }\n\n  private confirmRenameItem(timeLine: TimeLineDto, item: TimeLineItemDto, data: ItemDialogData) {\n    this.timeLineControllerService.renameTimeLineItemUsingPut({\n      storyDocId: this.documentId,\n      blockId: this.blockId,\n      timeLineModelId: this.id,\n      timeLineId: timeLine.timeLineId.id,\n      timeLineItemId: item.itemId.id,\n      name: data.description\n    }).subscribe({\n      next: value => this.reload()\n    })\n  }\n\n  deleteItem(timeLine: TimeLineDto, item: TimeLineItemDto) {\n    this.openConfirmationDialog({\n      title: \"Confim Delete\",\n      message: `Delete timeline item '${item.description}' ?`,\n      confirm: () => { this.confirmDeleteItem(timeLine, item); this.closeConfirmationDialog() },\n      cancel: () => this.closeConfirmationDialog()\n    })\n  }\n\n  private confirmDeleteItem(timeLine: TimeLineDto, item: TimeLineItemDto) {\n    this.timeLineControllerService.deleteTimeLineItemUsingDelete$Response({\n      storyDocId: this.documentId,\n      blockId: this.blockId,\n      timeLineModelId: this.id,\n      timeLineId: timeLine.timeLineId.id,\n      timeLineItemId: item.itemId.id,\n    }).subscribe({\n      next: value => this.reload()\n    })\n  }\n\n  // confirmation dialog\n\n  confirmationDialogSpec: ConfirmationDialogSpec\n\n  confirmationDialogId(): string {\n    return 'confirmation-dialog-' + this.blockId\n  }\n\n  openConfirmationDialog(confirmationDialogSpec: ConfirmationDialogSpec) {\n    this.confirmationDialogSpec = confirmationDialogSpec\n    this.modalService.open(this.confirmationDialogId())\n  }\n\n  closeConfirmationDialog() {\n    this.modalService.close(this.confirmationDialogId())\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./timeline-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "timeLineControllerService",
                        "type": "TimeLineControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "timeLineControllerService",
                        "type": "TimeLineControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-2col\n  [breadcrumb]=\"breadcrumb\"\n  [title]=\"title\"\n  [leftColumn]=\"itemList\">\n</app-layout-2col>\n\n<ng-template #breadcrumb>\n  <ng-container *ngIf=\"timeLineModel$ | async as timeLineModel\">\n    <nav>\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <app-back-button [routerLink]=\"link.toStoryDoc(timeLineModel.storyDocSummary)\"></app-back-button>\n          <a routerLink=\"/\">Home</a>\n        </li>\n        <li class=\"breadcrumb-item\">\n          <a [routerLink]=\"link.toStoryDoc(timeLineModel.storyDocSummary)\">{{timeLineModel.storyDocSummary.name}}</a>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{timeLineModel.name}}</li>\n      </ol>\n    </nav>\n  </ng-container>\n</ng-template>\n\n<ng-template #title>\n  <div class=\"container-fluid\" *ngIf=\"timeLineModel$ | async as timeLineModel\">\n    <div class=\"row\">\n      <h3>Timeline: {{timeLineModel.name}}</h3>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #itemList>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n    </div>\n    <div class=\"row\">\n      <div *ngIf=\"timeLineModel$ | async as timeLineModel ; else loading\">\n        <ng-container *ngVar=\"timeLineModel.timeLines['default'] as timeLine\">\n          <ul class=\"list-group\">\n            <li *ngFor=\"let item of timeLine.items\" (contextmenu)=\"openMenu($event, timeLine, item)\" class=\"list-group-item\">\n              {{item.description}}\n            </li>\n          </ul>\n        </ng-container>\n      </div>\n      <div class=\"btn  btn-sm btn-outline-primary\" (click)=\"addItem()\">Add Timeline item</div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #loading>loading...</ng-template>\n\n<app-popup-menu></app-popup-menu>\n\n<jw-modal [id]=\"getDialogId()\">\n  <app-create-item-dialog [spec]=\"itemDialogSpec\"></app-create-item-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n  <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "TimeLineSelectionPanelComponent",
            "id": "component-TimeLineSelectionPanelComponent-2a89d481b857cb592e031ff5fac7ac91b5cb7b6233421ba19fcf5a1132d2528bec6ed3975c99dd073f912ff755635c6368656a01cab02dc25605efb471581f0f",
            "file": "src/app/ui/uiscenario-page/time-line-selection-panel/time-line-selection-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-time-line-selection-panel",
            "styleUrls": [
                "./time-line-selection-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./time-line-selection-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    timeLine: new FormControl(),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "timeLineId$",
                    "defaultValue": "this.uiScenarioService.timeLineId$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "timeLineModel$",
                    "defaultValue": "this.uiScenarioService.timeLineModel$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTimeLineChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "timelinesAsArray",
                    "args": [
                        {
                            "name": "timeLines",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TimeLineDto[]",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timeLines",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {TimeLineDto, TimeLineId, TimeLineModelCoordinate, TimeLineModelSummaryDto} from \"@storydoc/models\";\nimport {TimeLineControllerService} from \"@storydoc/services\";\nimport {UIScenarioService} from \"../uiscenario.service\";\nimport {Subscription} from \"rxjs\";\n\nexport interface TimeLineSelection {\n  timeLineId: TimeLineId\n}\n\n@Component({\n  selector: 'app-time-line-selection-panel',\n  templateUrl: './time-line-selection-panel.component.html',\n  styleUrls: ['./time-line-selection-panel.component.scss']\n})\nexport class TimeLineSelectionPanelComponent implements OnInit, OnDestroy{\n\n  constructor(\n    private timeLineControllerService: TimeLineControllerService,\n    private uiScenarioService: UIScenarioService\n  ) {\n  }\n\n  timeLineModel$ = this.uiScenarioService.timeLineModel$\n\n  timeLineId$ = this.uiScenarioService.timeLineId$\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n    this.subscriptions.push(this.timeLineId$.subscribe(timelineId => {\n      this.timeLineControl.setValue(timelineId, {onlySelf: true})\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    timeLine: new FormControl(),\n  })\n\n  private get timeLineControl(): FormControl {\n    return <FormControl> this.formGroup.get('timeLine')\n  }\n\n  onTimeLineChange() {\n    let timeLineId = this.timeLineControl.value;\n    this.uiScenarioService.setScenarioTimeLine(timeLineId)\n  }\n\n  timelinesAsArray(timeLines: { [p: string]: TimeLineDto }): TimeLineDto[] {\n    return Object.keys(timeLines).map(key => timeLines[key])\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./time-line-selection-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "timeLineControllerService",
                        "type": "TimeLineControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "timeLineControllerService",
                        "type": "TimeLineControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "timeLineControl": {
                    "name": "timeLineControl",
                    "getSignature": {
                        "name": "timeLineControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 45
                    }
                }
            },
            "templateData": "<app-panel>\n  <form [formGroup]=\"formGroup\">\n    <div class=\"mb-3\">\n      <label for=\"timeLine\" class=\"form-label\">Timeline</label>\n      <select id=\"timeLine\" formControlName=\"timeLine\" class=\"form-select\" (change)=\"onTimeLineChange()\" >\n        <option>-- select --</option>\n        <ng-container *ngIf=\"timeLineModel$|async as timeLineModel\">\n          <option *ngFor=\"let timeLine of timelinesAsArray(timeLineModel.timeLines)\"\n                    [ngValue]=\"timeLine.timeLineId\">{{timeLine.name}}</option>\n        </ng-container>\n      </select>\n      <div class=\"form-text\">Select a timeline.</div>\n    </div>\n  </form>\n</app-panel>\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-b5b018cd69beb48fd794e780cb565a5b1cd2f9536d4a905da9e52f6bf0e392ec75a9e228d68f69af54dbece06544976607404aee3f8cf12d35c71250a3c0082e",
            "file": "src/app/document/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-title",
            "styleUrls": [
                "./title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "numbering",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberingAsString",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-title',\n  templateUrl: './title.component.html',\n  styleUrls: ['./title.component.scss']\n})\nexport class TitleComponent implements OnInit {\n\n  constructor() {\n  }\n\n  @Input()\n  text: string\n\n  @Input()\n  numbering: number[]\n\n  ngOnInit(): void {\n  }\n\n  numberingAsString(): string {\n    if (!this.numbering) return ''\n    let val = ''\n    // @ts-ignore\n    for (let nr of this.numbering) {\n      val += (val.length == 0 ? '' : '.') + nr\n    }\n    return val\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<container-element [ngSwitch]=\"numbering.length\">\n  <h3 *ngSwitchCase=\"1\">{{ numberingAsString() }} {{ text }}</h3>\n  <h5 *ngSwitchCase=\"2\">{{ numberingAsString() }} {{ text }}</h5>\n  <h5 *ngSwitchCase=\"3\">{{ numberingAsString() }} {{ text }}</h5>\n  <h6 *ngSwitchCase=\"4\">{{ numberingAsString() }} {{ text }}</h6>\n  <h6 *ngSwitchCase=\"5\">{{ numberingAsString() }} {{ text }}</h6>\n  <h6 *ngSwitchCase=\"6\">{{ numberingAsString() }} {{ text }}</h6>\n</container-element>\n"
        },
        {
            "name": "UIBlockComponent",
            "id": "component-UIBlockComponent-7ab0f275910000d179da544568a0c4530535cd0819580a0c0f788f8659150ff844ba2d50a595ff7aef33d9ba5b0dab6ea8db0822aff3861ad49d1d91ce0d50e4",
            "file": "_attick/uiblock/uiblock.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-uiblock",
            "styleUrls": [
                "./uiblock.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./uiblock.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$uiBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UiBlockDto>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component} from '@angular/core';\nimport {UiRestControllerService} from \"../../../api/services/ui-rest-controller.service\";\nimport {Observable} from \"rxjs\";\nimport {UiBlockDto} from \"../../../api/models/ui-block-dto\";\n\n@Component({\n  selector: 'app-uiblock',\n  templateUrl: './uiblock.component.html',\n  styleUrls: ['./uiblock.component.scss']\n})\nexport class UIBlockComponent {\n\n  constructor(private uiRestControllerService: UiRestControllerService ) {\n    this.$uiBlock = this.uiRestControllerService.getUiUsingGet({})\n  }\n\n  $uiBlock: Observable<UiBlockDto>\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./uiblock.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div *ngIf=\"$uiBlock | async as uiBlock ; else loading\">\n\n  <div class=\"d-flex flex-row\">\n    <div class=\"p-2\" *ngFor=\"let ui of uiBlock.uiList\">\n      <app-thumb-nail [ui]=\"ui\"></app-thumb-nail>\n    </div>\n  </div>\n</div>\n\n<ng-template #loading>loading...</ng-template>\n"
        },
        {
            "name": "UIScenarioPageComponent",
            "id": "component-UIScenarioPageComponent-6f1d2aa76e5791dd5f1b609f95c64ae8d32c808f596aafd14a6cb66559f66b70f5828dbd854eccb80ed396f66f27d57e66493ce13616245b3e4b51fef6c4f5ff",
            "file": "src/app/ui/uiscenario-page/uiscenario-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-uiscenario-page",
            "styleUrls": [
                "./uiscenario-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./uiscenario-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "presentationMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "presentationMode$",
                    "defaultValue": "this.uiScenarioService.presentationMode$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "scenarioConfigDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioConfigDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "uiScenario$",
                    "defaultValue": "this.uiScenarioService.uiScenario$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UiScenarioDto>",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "configurationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "configure",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmConfig",
                    "args": [
                        {
                            "name": "data",
                            "type": "ScenarioConfigDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ScenarioConfigDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePresentationMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {DOCUMENT} from '@angular/common';\nimport {Component, Inject, OnDestroy, OnInit} from '@angular/core';\nimport {Observable, Subscription} from \"rxjs\";\nimport {ActivatedRoute} from '@angular/router';\nimport {closeFullscreen, ConfirmationDialogSpec, LinkService, ModalService, openFullscreen} from \"@storydoc/common\";\nimport {BlockCoordinate, ScreenShotCollectionDto, TimeLineId, UiScenarioDto} from \"@storydoc/models\";\nimport {UIScenarioService} from \"./uiscenario.service\";\nimport {ScenarioConfigDialogData, ScenarioConfigDialogSpec} from \"./scenario-config-dialog/scenario-config-dialog.component\";\n\n\n@Component({\n  selector: 'app-uiscenario-page',\n  templateUrl: './uiscenario-page.component.html',\n  styleUrls: ['./uiscenario-page.component.scss']\n})\nexport class UIScenarioPageComponent implements OnInit, OnDestroy {\n\n  constructor(\n    @Inject(DOCUMENT) private document: any,\n    private modalService: ModalService,\n    private route: ActivatedRoute,\n    public link: LinkService,\n    private uiScenarioService: UIScenarioService\n  ) {\n  }\n\n  uiScenario$: Observable<UiScenarioDto> = this.uiScenarioService.uiScenario$\n\n  presentationMode$: Observable<boolean> = this.uiScenarioService.presentationMode$\n  presentationMode: boolean\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe((params) => {\n      let documentId = params.get('documentId')\n      let blockId = params.get('blockId')\n      let id = params.get('artifactId')\n      if (id) {\n        this.uiScenarioService.loadUIScenario({\n          storyDocId: {id: documentId},\n          blockId: {id: blockId},\n          uiScenarioId: id\n        })\n      }\n    });\n    this.subscriptions.push(this.presentationMode$.subscribe((presentationMode)=> {\n      this.presentationMode = presentationMode\n      if (presentationMode) {\n        openFullscreen(document)\n      } else {\n        closeFullscreen(document)\n      }\n    }))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  togglePresentationMode() {\n    this.uiScenarioService.togglePresentationMode()\n  }\n\n  // configuration dialog\n\n  configurationDialogId(): string {\n    return 'configuration-dialog-id'\n  };\n\n\n  scenarioConfigDialogSpec : ScenarioConfigDialogSpec\n\n  configure() {\n    this.scenarioConfigDialogSpec = {\n      data: null,\n      confirm: (data: ScenarioConfigDialogData) => this.confirmConfig(data),\n      cancel: () => this.cancelConfig()\n    }\n    this.modalService.open(this.configurationDialogId())\n  }\n\n  private confirmConfig(data: ScenarioConfigDialogData) {\n    this.uiScenarioService.selectTimeLineModel(data.timeLineModel)\n    this.modalService.close(this.configurationDialogId())\n  }\n\n  private cancelConfig() {\n    this.modalService.close(this.configurationDialogId())\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".vertical-center {\n  min-height: 60%;\n  min-height: 60vh;\n\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./uiscenario-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uiScenarioService",
                        "type": "UIScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"uiScenario$ | async as uiScenario\">\n  <ng-container *ngIf=\"uiScenario.state=='CREATED'\">\n    <app-layout-1col\n      [breadcrumb]=\"breadcrumb\"\n      [title]=\"menu\"\n      [middle]=\"configurePanel\"\n    >\n    </app-layout-1col>\n  </ng-container>\n  <ng-container *ngIf=\"uiScenario.state=='READY' && !presentationMode\">\n    <app-layout-2col\n      [breadcrumb]=\"breadcrumb\"\n      [title]=\"menu\"\n      [leftColumn]=\"inputPanels\"\n      [rightColumn]=\"scenarioPanel\"\n    >\n    </app-layout-2col>\n  </ng-container>\n  <ng-container *ngIf=\"uiScenario.state=='READY' && presentationMode\">\n      <app-scenario-presentation></app-scenario-presentation>\n  </ng-container>\n</ng-container>\n\n<ng-template #breadcrumb>\n  <ng-container *ngIf=\"uiScenario$ | async as uiScenario\">\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <app-back-button [routerLink]=\"link.toStoryDoc(uiScenario.storyDocSummary)\"></app-back-button>\n          <a routerLink=\"/\">Home</a>\n        </li>\n        <li class=\"breadcrumb-item\"><a\n          [routerLink]=\"link.toStoryDoc(uiScenario.storyDocSummary)\">{{uiScenario.storyDocSummary.name}}</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{uiScenario.name}}</li>\n      </ol>\n    </nav>\n  </ng-container>\n</ng-template>\n\n<ng-template #menu>\n  <div class=\"container-fluid\" *ngIf=\"uiScenario$ | async as uiScenario\">\n    <div class=\"row\">\n      <div class=\"col-md-10\">\n        <h3>\n          UI Scenario: {{uiScenario.name}}\n        </h3>\n      </div>\n      <div class=\"col-md-2\">\n        <div class=\"btn  btn-sm btn-outline-light float-right m-2\" (click)=\"configure()\">Configure</div>\n        <div *ngIf=\"uiScenario.state=='READY'\" class=\"btn  btn-sm btn-outline-light float-right\" (click)=\"togglePresentationMode()\">Start Presentation</div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #configurePanel>\n  <div class=\"jumbotron vertical-center\">\n    <div class=\"container\">\n      <div class=\"h-100 p-5 bg-light border rounded-3\">\n        <h4>The UI Scenario is not ready yet.</h4>\n        <p></p>\n        <p>Click the <a (click)=\"configure()\" href=\"javascript:void(0);\">configure button</a> to set up the scenario's dependencies.</p>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<jw-modal [id]=\"configurationDialogId()\">\n  <app-scenario-config-dialog [spec]=\"scenarioConfigDialogSpec\"></app-scenario-config-dialog>\n</jw-modal>\n\n<ng-template #inputPanels>\n  <app-time-line-selection-panel></app-time-line-selection-panel>\n  <app-screenshot-panel></app-screenshot-panel>\n</ng-template>\n\n<ng-template #scenarioPanel>\n  <app-scenario-panel></app-scenario-panel>\n</ng-template>\n\n<!-- presentation -->\n<ng-template #presentationModeMenu>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-11\"></div>\n      <div class=\"col-md-1\">\n        <div class=\"btn  btn-sm btn-outline-primary\" (click)=\"togglePresentationMode()\">End Presention</div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n\n\n<ng-template #loading>loading...</ng-template>\n"
        },
        {
            "name": "UiWalkthroughComponent",
            "id": "component-UiWalkthroughComponent-2d3c00f28d159a7e00c30df34ab965dad50149d6fcf76bd8ccdf68b1820fd11f25ce0967b16bb3d0f86f692426c9da109d94cac180a05d59f255a8060495de41",
            "file": "_attick/ui-walkthrough/ui-walkthrough.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ui-walkthrough",
            "styleUrls": [
                "./ui-walkthrough.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ui-walkthrough.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$uiBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UiBlockDto>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stepNr",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {UiRestControllerService} from \"../../../api/services/ui-rest-controller.service\";\nimport {Observable} from \"rxjs\";\nimport {UiBlockDto} from \"../../../api/models/ui-block-dto\";\n\n@Component({\n  selector: 'app-ui-walkthrough',\n  templateUrl: './ui-walkthrough.component.html',\n  styleUrls: ['./ui-walkthrough.component.scss']\n})\nexport class UiWalkthroughComponent implements OnInit {\n\n  constructor(private uiRestControllerService: UiRestControllerService ) {\n    this.$uiBlock = this.uiRestControllerService.getUiUsingGet({})\n  }\n\n  $uiBlock: Observable<UiBlockDto>\n\n  stepNr: number = 0\n\n  ngOnInit(): void {\n  }\n\n  previous() {\n    if (this.stepNr>0) {\n      this.stepNr--\n    }\n  }\n\n  next() {\n    this.stepNr++\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".active-step {\n  font-weight: bold;\n}\n\n.display-step {\n  border: 1px solid #ddd; /* Gray border */\n  border-radius: 4px;  /* Rounded border */\n  padding: 5px; /* Some padding */\n  width: 450px; /* Set a small width */\n}\n",
                    "styleUrl": "./ui-walkthrough.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "uiRestControllerService",
                        "type": "UiRestControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"$uiBlock | async as uiBlock ; else loading\">\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-3\">\n        <ul class=\"list-group\">\n          <li [class.active-step]=\"i==stepNr\" class=\"list-group-item\" *ngFor=\"let ui of uiBlock.uiList; let i = index\">\n            {{i+1}} {{ i==0 ? 'navigate to \\'Find owners\\' ' : ''}} {{ i==1 ? 'click \\'add visit\\' ' : ''}} {{ i==2 ? 'fill in form' : ''}}\n          </li>\n        </ul>\n      </div>\n      <div class=\"col-9\">\n        <img class=\"display-step\" src=\"{{uiBlock.uiList[stepNr].imgURL}}\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <nav>\n        <ul class=\"pagination\">\n          <li class=\"page-item\" (click)=\"previous()\">\n            <a class=\"page-link\" href=\"javascript:void(0);\">\n              <span aria-hidden=\"true\">&laquo;</span>\n            </a>\n          </li>\n          <li class=\"page-item\" (click)=\"next()\">\n            <a class=\"page-link\" href=\"javascript:void(0);\" aria-label=\"Next\">\n              <span aria-hidden=\"true\">&raquo;</span>\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  </div>\n</div>\n\n<ng-template #loading>loading...</ng-template>\n"
        }
    ],
    "modules": [
        {
            "name": "ApiModule",
            "id": "module-ApiModule-e8118458a8686decf5a255e2d3f538656ffba75c58e3d517c744075c0c93269f008f8ba8b56c5732ef545999055cfa5655676fd49aeb8d0569e52cc36a519897",
            "description": "<p>Module that provides all services and configuration.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/api/api.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "params",
                            "type": "ApiConfigurationParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ApiModule>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "ApiConfigurationParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "/* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { AdminControllerService } from './services/admin-controller.service';\nimport { CodeRestControllerService } from './services/code-rest-controller.service';\nimport { RedirectToAngularService } from './services/redirect-to-angular.service';\nimport { ScreenDesignRestControllerService } from './services/screen-design-rest-controller.service';\nimport { SqldbControllerService } from './services/sqldb-controller.service';\nimport { StoryDocRestControllerService } from './services/story-doc-rest-controller.service';\nimport { TimeLineControllerService } from './services/time-line-controller.service';\nimport { UiRestControllerService } from './services/ui-rest-controller.service';\nimport { WorkspaceRestControllerService } from './services/workspace-rest-controller.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    AdminControllerService,\n    CodeRestControllerService,\n    RedirectToAngularService,\n    ScreenDesignRestControllerService,\n    SqldbControllerService,\n    StoryDocRestControllerService,\n    TimeLineControllerService,\n    UiRestControllerService,\n    WorkspaceRestControllerService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AdminControllerService"
                        },
                        {
                            "name": "ApiConfiguration"
                        },
                        {
                            "name": "CodeRestControllerService"
                        },
                        {
                            "name": "RedirectToAngularService"
                        },
                        {
                            "name": "ScreenDesignRestControllerService"
                        },
                        {
                            "name": "SqldbControllerService"
                        },
                        {
                            "name": "StoryDocRestControllerService"
                        },
                        {
                            "name": "TimeLineControllerService"
                        },
                        {
                            "name": "UiRestControllerService"
                        },
                        {
                            "name": "WorkspaceRestControllerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-9ae9604299dc45d96c506216b10139dd07fad6982e1c204073fe8dfd5bc40e408dbef7fc6a174026e2f929834d0168958a8a5dd1af0aa5753dc21e711a771138",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "// angular\nimport {NgModule} from '@angular/core';\n// app global\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\n// core\n// common\n// document\n\nimport {UIModule} from './ui/ui.module'\nimport {CoreModule} from \"./core.module\";\nimport {CodeModule} from \"./code/code.module\";\nimport {DBModule} from \"./db/db.module\";\nimport {DocumentModule} from \"./document/document.module\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    CoreModule,\n    AppRoutingModule,\n    CodeModule,\n    DBModule,\n    UIModule,\n    DocumentModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CodeModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "DBModule"
                        },
                        {
                            "name": "DocumentModule"
                        },
                        {
                            "name": "UIModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f0a8753932b1770538805f03879345fb7b3986e2aea21b41685070ff4d82c912eba35f6598da15da6572ea4d0c3c7b48f2c905ac91bd23dd56aa5d338a2b3132",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {TimelinePageComponent} from \"./ui/timeline-page/timeline-page.component\";\nimport {ScreenshotCollectionPageComponent} from \"./ui/screenshot-collection-page/screenshot-collection-page.component\";\nimport {UIScenarioPageComponent} from \"./ui/uiscenario-page/uiscenario-page.component\";\nimport {DocumentComponent} from \"./document/document-page/document.component\";\nimport {DocumentManagerPageComponent} from './document/document-manager-page/document-manager-page.component';\nimport {CodeTracePageComponent} from \"./code/code-trace-page/code-trace-page.component\";\nimport {DBNavigationPageComponent} from \"./db/dbnavigation-page/dbnavigation-page.component\";\nimport {DBDataPageComponent} from \"./db/dbdata-page/dbdata-page.component\";\nimport {ScreenDesignPageComponent} from \"./ui/screen-design-page/screen-design-page.component\";\nimport {CodeConfigurationPageComponent} from \"./code/code-configuration-page/code-configuration-page.component\";\n\nconst routes: Routes = [\n  {path: '', redirectTo: '/fe/documents', pathMatch: 'full'},\n  {path: 'fe/documents', component: DocumentManagerPageComponent},\n  {path: 'fe/document/:id', component: DocumentComponent},\n  {path: 'fe/db-data', component: DBDataPageComponent},\n  {path: 'fe/db-navigation', component: DBNavigationPageComponent},\n  {path: 'fe/code-trace/d/:documentId/b/:blockId/a/:artifactId', component: CodeTracePageComponent},\n  {path: 'fe/source-code-config/d/:documentId/b/:blockId/a/:artifactId', component: CodeConfigurationPageComponent},\n  {path: 'fe/timeline/d/:documentId/b/:blockId/a/:artifactId', component: TimelinePageComponent},\n  {path: 'fe/ui-screenshot-collection/d/:documentId/b/:blockId/a/:artifactId', component: ScreenshotCollectionPageComponent},\n  {path: 'fe/ui-scenario/d/:documentId/b/:blockId/a/:artifactId', component: UIScenarioPageComponent},\n  {path: 'fe/ui-screen-design/d/:documentId/b/:blockId/a/:artifactId', component: ScreenDesignPageComponent},\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CodeModule",
            "id": "module-CodeModule-6f2095a4de0ac8475eb13a06a2ef7fc9c2e1d6971c12f3a6aa87926712939c0039aa130d6daafa06d04ca56137396ff0aa9c52c21235ecc09593cacffc3d18a8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/code/code.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport {CodeTracePageComponent} from './code-trace-page/code-trace-page.component';\nimport {CoreModule} from \"../core.module\";\nimport {StoryDocCommonModule} from \"../common/common.module\";\nimport { SourceCodePanelComponent } from './code-trace-page/source-code-panel/source-code-panel.component';\nimport { CodeTracePanelComponent } from './code-trace-page/code-trace-panel/code-trace-panel.component';\nimport { CodeConfigurationPageComponent } from './code-configuration-page/code-configuration-page.component';\nimport { CodeConfigurationDialogComponent } from './code-configuration-page/code-configuration-dialog/code-configuration-dialog.component';\nimport { CodeTraceConfigurationDialogComponent } from './code-trace-page/code-trace-configuration-dialog/code-trace-configuration-dialog.component';\nimport { BlueprintPanelComponent } from './code-trace-page/blueprint-panel/blueprint-panel.component';\n\n\n@NgModule({\n  declarations: [\n    CodeTracePageComponent,\n    SourceCodePanelComponent,\n    CodeTracePanelComponent,\n    CodeConfigurationPageComponent,\n    CodeConfigurationDialogComponent,\n    CodeTraceConfigurationDialogComponent,\n    BlueprintPanelComponent,\n  ],\n  imports: [\n    CoreModule,\n    StoryDocCommonModule,\n  ],\n  providers: [\n  ],\n  exports: [\n    CodeTracePageComponent\n  ]\n})\nexport class CodeModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BlueprintPanelComponent"
                        },
                        {
                            "name": "CodeConfigurationDialogComponent"
                        },
                        {
                            "name": "CodeConfigurationPageComponent"
                        },
                        {
                            "name": "CodeTraceConfigurationDialogComponent"
                        },
                        {
                            "name": "CodeTracePageComponent"
                        },
                        {
                            "name": "CodeTracePanelComponent"
                        },
                        {
                            "name": "SourceCodePanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "StoryDocCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CodeTracePageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-47d4b168b6eec34620a7101bb4f1ffd7f88d7b75550af2f86a571be2fdcb1431715ddee4ce67bd632dec250778141e6504e5eacb4e169568237529ae2ddb4c61",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {ApiModule} from \"./api/api.module\";\nimport {environment} from \"../environments/environment\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport {AppRoutingModule} from \"./app-routing.module\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {FontAwesomeModule} from \"@fortawesome/angular-fontawesome\";\nimport { TreeModule } from '@circlon/angular-tree-component';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    ApiModule.forRoot({ rootUrl: environment.production ? '' : ('http://localhost:' + environment.port) }),\n    DragDropModule,\n    HttpClientModule,\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FontAwesomeModule,\n    TreeModule\n  ],\n  exports: [\n    CommonModule,\n    DragDropModule,\n    HttpClientModule,\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FontAwesomeModule,\n    TreeModule\n  ]\n})\nexport class CoreModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ApiModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DBModule",
            "id": "module-DBModule-f9b0e7078b599b3efbd8ce323c6dd4fca5d0f79c26010c8dfb4cd81a4b992614228bdd3b620cce56cf1d6f6b91d7ce89567549cfadaeaab9ac4ec4974ac85295",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/db/db.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CoreModule} from \"../core.module\";\nimport {DBNavigationPageComponent} from \"./dbnavigation-page/dbnavigation-page.component\";\nimport {DBDataPageComponent} from \"./dbdata-page/dbdata-page.component\";\nimport {StoryDocCommonModule} from \"../common/common.module\";\n\n\n@NgModule({\n  declarations: [\n    DBNavigationPageComponent,\n    DBDataPageComponent,\n  ],\n  imports: [\n    CoreModule,\n    StoryDocCommonModule\n  ],\n  exports: [\n    DBNavigationPageComponent,\n    DBDataPageComponent,\n  ]\n})\nexport class DBModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DBDataPageComponent"
                        },
                        {
                            "name": "DBNavigationPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "StoryDocCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DBDataPageComponent"
                        },
                        {
                            "name": "DBNavigationPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocumentModule",
            "id": "module-DocumentModule-c05589628bc61b2746af138fff508ef9181bf5076da075fa372e6ae4e4eb92d4ddad19ff0d37ae6e4e1c2cce899dd0babc25e29f9229f39ea1c9f2f51fa24cd4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/document/document.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport {DocumentComponent} from './document-page/document.component';\nimport {BlockComponent} from './document-page/block/block.component';\nimport {TextBlockComponent} from './document-page/block/text-block/text-block.component';\nimport {ArtifactBlockComponent} from './document-page/block/artifact-block/artifact-block.component';\nimport {CreateArtifactDialogComponent} from './document-page/create-artifact-dialog/create-artifact-dialog.component';\nimport {CreateBlockDialogComponent} from './document-page/create-block-dialog/create-block-dialog.component';\nimport {TitleComponent} from './title/title.component';\nimport {CreateDocumentDialogComponent} from './document-manager-page/create-document-dialog/create-document-dialog.component';\nimport {DocumentManagerPageComponent} from './document-manager-page/document-manager-page.component';\nimport {StoryDocCommonModule} from \"../common/common.module\";\nimport {CoreModule} from \"../core.module\";\n\n\n@NgModule({\n  declarations: [\n    DocumentComponent,\n    BlockComponent,\n    TextBlockComponent,\n    TitleComponent,\n    ArtifactBlockComponent,\n    DocumentManagerPageComponent,\n    CreateDocumentDialogComponent,\n    CreateBlockDialogComponent,\n    CreateArtifactDialogComponent,\n  ],\n  imports: [\n    CoreModule,\n    StoryDocCommonModule\n  ], exports: [\n        DocumentManagerPageComponent,\n        DocumentComponent,\n    ]\n})\nexport class DocumentModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ArtifactBlockComponent"
                        },
                        {
                            "name": "BlockComponent"
                        },
                        {
                            "name": "CreateArtifactDialogComponent"
                        },
                        {
                            "name": "CreateBlockDialogComponent"
                        },
                        {
                            "name": "CreateDocumentDialogComponent"
                        },
                        {
                            "name": "DocumentComponent"
                        },
                        {
                            "name": "DocumentManagerPageComponent"
                        },
                        {
                            "name": "TextBlockComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "StoryDocCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DocumentComponent"
                        },
                        {
                            "name": "DocumentManagerPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoryDocCommonModule",
            "id": "module-StoryDocCommonModule-e029eb6387398c33b8928bdcc83383cfd7330aab65c640e02a03693663332f59c53eebe4e6defc738740e2093dd3e26de17d7a8444e980ea712be092ee08e648",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/common/common.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations'\n\nimport {CoreModule} from \"../core.module\";\n\nimport {VarDirective} from \"./ng-var.directive\";\nimport {BackButtonComponent} from './back-button/back-button.component';\nimport {LoadingDirective} from './loading.directive';\nimport {PanelComponent} from './panel/panel.component';\nimport {ConfirmationDialogComponent, ModalComponent, PopupMenuComponent} from '@storydoc/common';\nimport {Layout1ColComponent} from './layout-1col/layout-1col.component';\nimport {Layout2ColComponent} from './layout-2col/layout-2col.component';\nimport { BreadcrumbComponent } from './breadcrumb/breadcrumb.component';\nimport { HeaderComponent } from './header/header.component';\nimport { PLayerPanelComponent } from './presentation/player-panel/player-panel.component';\nimport { PresentationLayoutComponent } from './presentation/presentation-layout/presentation-layout.component';\nimport {ArtifactSelectionDialogComponent} from \"../document/document-page/artifact-selection-dialog/artifact-selection-dialog.component\";\nimport { DiagramExampleComponent } from './diagram/diagram-example/diagram-example.component';\nimport { BluePrintDiagramComponent } from './diagram/blue-print-diagram/blue-print-diagram.component';\nimport { ClassRoleDiagramComponent } from './diagram/class-role-diagram/class-role-diagram.component';\n\n@NgModule({\n  declarations: [\n    VarDirective,\n    ModalComponent,\n    PopupMenuComponent,\n    Layout2ColComponent,\n    Layout1ColComponent,\n    PanelComponent,\n    ConfirmationDialogComponent,\n    BackButtonComponent,\n    LoadingDirective,\n    BreadcrumbComponent,\n    HeaderComponent,\n    PLayerPanelComponent,\n    PresentationLayoutComponent,\n    ArtifactSelectionDialogComponent,\n    DiagramExampleComponent,\n    BluePrintDiagramComponent,\n    ClassRoleDiagramComponent,\n  ],\n  imports: [\n    CoreModule,\n    BrowserAnimationsModule\n  ],\n  exports: [\n    VarDirective,\n    ModalComponent,\n    PopupMenuComponent,\n    Layout2ColComponent,\n    Layout1ColComponent,\n    PanelComponent,\n    ConfirmationDialogComponent,\n    BackButtonComponent,\n    LoadingDirective,\n    BreadcrumbComponent,\n    PresentationLayoutComponent,\n    PLayerPanelComponent,\n    ArtifactSelectionDialogComponent\n  ]\n})\nexport class StoryDocCommonModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ArtifactSelectionDialogComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "BluePrintDiagramComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "ClassRoleDiagramComponent"
                        },
                        {
                            "name": "ConfirmationDialogComponent"
                        },
                        {
                            "name": "DiagramExampleComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "Layout1ColComponent"
                        },
                        {
                            "name": "Layout2ColComponent"
                        },
                        {
                            "name": "LoadingDirective"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "PLayerPanelComponent"
                        },
                        {
                            "name": "PanelComponent"
                        },
                        {
                            "name": "PopupMenuComponent"
                        },
                        {
                            "name": "PresentationLayoutComponent"
                        },
                        {
                            "name": "VarDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ArtifactSelectionDialogComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "ConfirmationDialogComponent"
                        },
                        {
                            "name": "Layout1ColComponent"
                        },
                        {
                            "name": "Layout2ColComponent"
                        },
                        {
                            "name": "LoadingDirective"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "PLayerPanelComponent"
                        },
                        {
                            "name": "PanelComponent"
                        },
                        {
                            "name": "PopupMenuComponent"
                        },
                        {
                            "name": "PresentationLayoutComponent"
                        },
                        {
                            "name": "VarDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIModule",
            "id": "module-UIModule-62711ae8102b9997aaa5e68090ea1586682834c80344477dd1c8fb2ef5771503897559004ddc14cf92dbfd557e809e58d05bda868fb059ddbe25fad6a6cde59e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui/ui.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport {CoreModule} from \"../core.module\";\nimport {StoryDocCommonModule} from \"../common/common.module\";\n\n// ui\nimport {TimelinePageComponent} from './timeline-page/timeline-page.component';\nimport {CreateItemDialogComponent} from './timeline-page/create-item-dialog/create-item-dialog.component';\nimport { ScreenshotCollectionPanelComponent } from './screenshot-collection-page/screenshot-collection-panel/screenshot-collection-panel.component';\nimport {ScreenshotCollectionPageComponent} from './screenshot-collection-page/screenshot-collection-page.component';\nimport {CreateScreenshotDialogComponent} from './screenshot-collection-page/create-screenshot-dialog/create-screenshot-dialog.component';\nimport {UIScenarioPageComponent} from './uiscenario-page/uiscenario-page.component';\nimport {AddScreenshotDialogComponent} from './uiscenario-page/add-screenshot-dialog/add-screenshot-dialog.component';\nimport {TimeLineSelectionPanelComponent} from './uiscenario-page/time-line-selection-panel/time-line-selection-panel.component';\nimport {ScreenshotPanelComponent} from './uiscenario-page/screenshot-panel/screenshot-panel.component';\nimport {ScreenshotThumbnailComponent} from './uiscenario-page/screenshot-thumbnail/screenshot-thumbnail.component';\nimport { ScenarioPanelComponent } from './uiscenario-page/scenario-panel/scenario-panel.component';\nimport { ScenarioConfigDialogComponent } from './uiscenario-page/scenario-config-dialog/scenario-config-dialog.component';\nimport { ScenarioPresentationComponent } from './uiscenario-page/scenario-presentation/scenario-presentation.component';\nimport { ScreenDesignPageComponent } from './screen-design-page/screen-design-page.component';\nimport { PaletteComponent } from './screen-design-page/palette/palette.component';\nimport { ComponentDetailsComponent } from './screen-design-page/component-details/component-details.component';\nimport { ComponentTreeComponent } from './screen-design-page/component-tree/component-tree.component';\nimport { CanvasComponent } from './screen-design-page/canvas/canvas.component';\n\n\n@NgModule({\n  declarations: [\n    // screenshot collection\n    CreateScreenshotDialogComponent,\n    AddScreenshotDialogComponent,\n    ScreenshotCollectionPageComponent,\n    // UI scenario\n    ScreenshotPanelComponent,\n    ScreenshotThumbnailComponent,\n    ScenarioPanelComponent,\n    ScenarioConfigDialogComponent,\n    TimeLineSelectionPanelComponent,\n    UIScenarioPageComponent,\n    // timeline\n    ScreenshotCollectionPanelComponent,\n    CreateItemDialogComponent,\n    TimelinePageComponent,\n    ScenarioPresentationComponent,\n    ScreenDesignPageComponent,\n    PaletteComponent,\n    ComponentDetailsComponent,\n    ComponentTreeComponent,\n    CanvasComponent,\n  ],\n  imports: [\n    CoreModule,\n    StoryDocCommonModule\n  ],\n  exports: [\n    UIScenarioPageComponent,\n    ScreenshotCollectionPageComponent,\n    TimelinePageComponent,\n  ]\n})\nexport class UIModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddScreenshotDialogComponent"
                        },
                        {
                            "name": "CanvasComponent"
                        },
                        {
                            "name": "ComponentDetailsComponent"
                        },
                        {
                            "name": "ComponentTreeComponent"
                        },
                        {
                            "name": "CreateItemDialogComponent"
                        },
                        {
                            "name": "CreateScreenshotDialogComponent"
                        },
                        {
                            "name": "PaletteComponent"
                        },
                        {
                            "name": "ScenarioConfigDialogComponent"
                        },
                        {
                            "name": "ScenarioPanelComponent"
                        },
                        {
                            "name": "ScenarioPresentationComponent"
                        },
                        {
                            "name": "ScreenDesignPageComponent"
                        },
                        {
                            "name": "ScreenshotCollectionPageComponent"
                        },
                        {
                            "name": "ScreenshotCollectionPanelComponent"
                        },
                        {
                            "name": "ScreenshotPanelComponent"
                        },
                        {
                            "name": "ScreenshotThumbnailComponent"
                        },
                        {
                            "name": "TimeLineSelectionPanelComponent"
                        },
                        {
                            "name": "TimelinePageComponent"
                        },
                        {
                            "name": "UIScenarioPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "StoryDocCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ScreenshotCollectionPageComponent"
                        },
                        {
                            "name": "TimelinePageComponent"
                        },
                        {
                            "name": "UIScenarioPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Case1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/diagram/diagram-example/diagram-example.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DiagramStory.bind({})"
            },
            {
                "name": "Case2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/diagram/diagram-example/diagram-example.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DiagramStory.bind({})"
            },
            {
                "name": "codeExecution",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  key: 'io.storydoc.server.code.domain.CodeExecution',\n  icon: '/assets/test-script.png',\n  label: 'Code Execution',\n  editorUrl: '/fe/code-trace'\n} as ArtifactDescriptor"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DiagramStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/diagram/diagram-example/diagram-example.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DiagramExampleComponent>",
                "defaultValue": "(args: DiagramExampleComponent) => ({\n  component: DiagramExampleComponent,\n  props: args,\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  port: 8080\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  port: 4200\n}"
            },
            {
                "name": "LeaderLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ArtifactDescriptor[]",
                "defaultValue": "[\n  timeLineModel,\n  uiScreenDesign,\n  uiScenario,\n  uiScreenshotCollection,\n  codeExecution,\n  sourceCodeConfig\n]"
            },
            {
                "name": "map",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  'io.storydoc.server.timeline.domain.TimeLineModel': timeLineModel,\n  'io.storydoc.server.ui.domain.screendesign.ScreenDesign': uiScreenDesign,\n  'io.storydoc.server.ui.domain.UIScenario': uiScenario,\n  'io.storydoc.server.ui.domain.ScreenShotCollection': uiScreenshotCollection,\n  'io.storydoc.server.code.domain.CodeExecution': codeExecution,\n  'io.storydoc.server.code.domain.SourceCodeConfig': sourceCodeConfig\n}"
            },
            {
                "name": "ParameterCodecInstance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/request-builder.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new ParameterCodec()"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "sourceCodeConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  key: 'io.storydoc.server.code.domain.SourceCodeConfig',\n  icon: '/assets/config.png',\n  label: 'SourceCode Config',\n  editorUrl: '/fe/source-code-config'\n} as ArtifactDescriptor"
            },
            {
                "name": "timeLineModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  key: 'io.storydoc.server.timeline.domain.TimeLineModel',\n  icon: '/assets/timeline.png',\n  label: 'Timeline',\n  editorUrl: '/fe/timeline'\n\n} as ArtifactDescriptor"
            },
            {
                "name": "uiScenario",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  key: 'io.storydoc.server.ui.domain.UIScenario',\n  icon: '/assets/artifact-ui-scenario.png',\n  label: 'UI Scenario',\n  editorUrl: '/fe/ui-scenario'\n\n} as ArtifactDescriptor"
            },
            {
                "name": "uiScreenDesign",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  key: 'io.storydoc.server.ui.domain.screendesign.ScreenDesign',\n  icon: '/assets/artifact-ui-design.png',\n  label: 'Screen design',\n  editorUrl: '/fe/ui-screen-design'\n\n} as ArtifactDescriptor"
            },
            {
                "name": "uiScreenshotCollection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  key: 'io.storydoc.server.ui.domain.ScreenShotCollection',\n  icon: '/assets/artifact-ui-design.png',\n  label: 'UI Screenshot collection',\n  editorUrl: '/fe/ui-screenshot-collection'\n} as ArtifactDescriptor"
            }
        ],
        "functions": [
            {
                "name": "closeFullscreen",
                "file": "src/app/common/fullscreen.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isCodeExecutionEnterEvent",
                "file": "src/app/code/code.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "event",
                        "type": "StitchEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "CodeExecutionEnterEvent",
                "jsdoctags": [
                    {
                        "name": "event",
                        "type": "StitchEvent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isCodeExecutionReturnEvent",
                "file": "src/app/code/code.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "event",
                        "type": "StitchEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "CodeExecutionReturnEvent",
                "jsdoctags": [
                    {
                        "name": "event",
                        "type": "StitchEvent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isCodeTestCaseBDDEvent",
                "file": "src/app/code/code.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "event",
                        "type": "StitchEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TestCaseBDDEvent",
                "jsdoctags": [
                    {
                        "name": "event",
                        "type": "StitchEvent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "log",
                "file": "src/app/common/logging.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "param1",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "param2",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "param1",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "param2",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logChangesToObservable",
                "file": "src/app/common/logging.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "observable",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "observable",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "openFullscreen",
                "file": "src/app/common/fullscreen.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setFocusOn",
                "file": "src/app/common/focus.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "StrictHttpResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/api/strict-http-response.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Constrains the http response to not have the body defined as <code>T | null</code>, but <code>T</code> only.</p>\n",
                "kind": 187
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/common/diagram/diagram-example/diagram-example.stories.ts": [
                {
                    "name": "Case1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/diagram/diagram-example/diagram-example.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DiagramStory.bind({})"
                },
                {
                    "name": "Case2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/diagram/diagram-example/diagram-example.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DiagramStory.bind({})"
                },
                {
                    "name": "DiagramStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/diagram/diagram-example/diagram-example.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DiagramExampleComponent>",
                    "defaultValue": "(args: DiagramExampleComponent) => ({\n  component: DiagramExampleComponent,\n  props: args,\n})"
                }
            ],
            "src/app/document/document-page/block/artifact-block/artifact-data.service.ts": [
                {
                    "name": "codeExecution",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  key: 'io.storydoc.server.code.domain.CodeExecution',\n  icon: '/assets/test-script.png',\n  label: 'Code Execution',\n  editorUrl: '/fe/code-trace'\n} as ArtifactDescriptor"
                },
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArtifactDescriptor[]",
                    "defaultValue": "[\n  timeLineModel,\n  uiScreenDesign,\n  uiScenario,\n  uiScreenshotCollection,\n  codeExecution,\n  sourceCodeConfig\n]"
                },
                {
                    "name": "map",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  'io.storydoc.server.timeline.domain.TimeLineModel': timeLineModel,\n  'io.storydoc.server.ui.domain.screendesign.ScreenDesign': uiScreenDesign,\n  'io.storydoc.server.ui.domain.UIScenario': uiScenario,\n  'io.storydoc.server.ui.domain.ScreenShotCollection': uiScreenshotCollection,\n  'io.storydoc.server.code.domain.CodeExecution': codeExecution,\n  'io.storydoc.server.code.domain.SourceCodeConfig': sourceCodeConfig\n}"
                },
                {
                    "name": "sourceCodeConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  key: 'io.storydoc.server.code.domain.SourceCodeConfig',\n  icon: '/assets/config.png',\n  label: 'SourceCode Config',\n  editorUrl: '/fe/source-code-config'\n} as ArtifactDescriptor"
                },
                {
                    "name": "timeLineModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  key: 'io.storydoc.server.timeline.domain.TimeLineModel',\n  icon: '/assets/timeline.png',\n  label: 'Timeline',\n  editorUrl: '/fe/timeline'\n\n} as ArtifactDescriptor"
                },
                {
                    "name": "uiScenario",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  key: 'io.storydoc.server.ui.domain.UIScenario',\n  icon: '/assets/artifact-ui-scenario.png',\n  label: 'UI Scenario',\n  editorUrl: '/fe/ui-scenario'\n\n} as ArtifactDescriptor"
                },
                {
                    "name": "uiScreenDesign",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  key: 'io.storydoc.server.ui.domain.screendesign.ScreenDesign',\n  icon: '/assets/artifact-ui-design.png',\n  label: 'Screen design',\n  editorUrl: '/fe/ui-screen-design'\n\n} as ArtifactDescriptor"
                },
                {
                    "name": "uiScreenshotCollection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  key: 'io.storydoc.server.ui.domain.ScreenShotCollection',\n  icon: '/assets/artifact-ui-design.png',\n  label: 'UI Screenshot collection',\n  editorUrl: '/fe/ui-screenshot-collection'\n} as ArtifactDescriptor"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  port: 8080\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  port: 4200\n}"
                }
            ],
            "src/app/common/diagram/diagram-example/diagram-example.component.ts": [
                {
                    "name": "LeaderLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/api/request-builder.ts": [
                {
                    "name": "ParameterCodecInstance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/request-builder.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new ParameterCodec()"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/common/fullscreen.utils.ts": [
                {
                    "name": "closeFullscreen",
                    "file": "src/app/common/fullscreen.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "document",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "document",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openFullscreen",
                    "file": "src/app/common/fullscreen.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "document",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "document",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/code/code.service.ts": [
                {
                    "name": "isCodeExecutionEnterEvent",
                    "file": "src/app/code/code.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "CodeExecutionEnterEvent",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCodeExecutionReturnEvent",
                    "file": "src/app/code/code.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "CodeExecutionReturnEvent",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCodeTestCaseBDDEvent",
                    "file": "src/app/code/code.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TestCaseBDDEvent",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "StitchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/common/logging.ts": [
                {
                    "name": "log",
                    "file": "src/app/common/logging.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "param1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "param2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logChangesToObservable",
                    "file": "src/app/common/logging.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observable",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observable",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/common/focus.utils.ts": [
                {
                    "name": "setFocusOn",
                    "file": "src/app/common/focus.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elem",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elem",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/api/strict-http-response.ts": [
                {
                    "name": "StrictHttpResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/api/strict-http-response.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Constrains the http response to not have the body defined as <code>T | null</code>, but <code>T</code> only.</p>\n",
                    "kind": 187
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/fe/documents",
                        "pathMatch": "full"
                    },
                    {
                        "path": "fe/documents",
                        "component": "DocumentManagerPageComponent"
                    },
                    {
                        "path": "fe/document/:id",
                        "component": "DocumentComponent"
                    },
                    {
                        "path": "fe/db-data",
                        "component": "DBDataPageComponent"
                    },
                    {
                        "path": "fe/db-navigation",
                        "component": "DBNavigationPageComponent"
                    },
                    {
                        "path": "fe/code-trace/d/:documentId/b/:blockId/a/:artifactId",
                        "component": "CodeTracePageComponent"
                    },
                    {
                        "path": "fe/source-code-config/d/:documentId/b/:blockId/a/:artifactId",
                        "component": "CodeConfigurationPageComponent"
                    },
                    {
                        "path": "fe/timeline/d/:documentId/b/:blockId/a/:artifactId",
                        "component": "TimelinePageComponent"
                    },
                    {
                        "path": "fe/ui-screenshot-collection/d/:documentId/b/:blockId/a/:artifactId",
                        "component": "ScreenshotCollectionPageComponent"
                    },
                    {
                        "path": "fe/ui-scenario/d/:documentId/b/:blockId/a/:artifactId",
                        "component": "UIScenarioPageComponent"
                    },
                    {
                        "path": "fe/ui-screen-design/d/:documentId/b/:blockId/a/:artifactId",
                        "component": "ScreenDesignPageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "_attick/dbconnection-settings/dbconnection-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DBConnectionSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "_attick/mock-block/mock-block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MockBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "_attick/ui-walkthrough/ui-walkthrough.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UiWalkthroughComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "_attick/uiblock/thumb-nail/thumb-nail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThumbNailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "_attick/uiblock/uiblock.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UIBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/api-configuration.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiConfiguration",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/api-configuration.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiConfigurationParams",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/base-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/models/artifact-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArtifactDto",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/artifact-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArtifactId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/block-coordinate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlockCoordinate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/block-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlockDto",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/block-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlockId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/blue-print-element.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BluePrintElement",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/blue-print.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BluePrint",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/code-execution-coordinate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeExecutionCoordinate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/code-execution-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeExecutionId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/code-trace-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeTraceDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/component-attribute-descriptor-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentAttributeDescriptorDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/component-attribute-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentAttributeDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/component-descriptor-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentDescriptorDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/composite-blue-print-element.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompositeBluePrintElement",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/db-data-set-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DbDataSetDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/file-store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileStore",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/file-system.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileSystem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/folder-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FolderDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/folder-urn.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FolderUrn",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/item-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/iterable-file-store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IterableFileStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/iterable-path.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IterablePath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/layered-layout.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LayeredLayout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/layout.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Layout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/navigation-item-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/navigation-model-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationModelDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/path.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Path",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/resource-urn.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResourceUrn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/role.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Role",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screen-design-coordinate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenDesignCoordinate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screen-design-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenDesignDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screen-design-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenDesignId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screen-shot-collection-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenShotCollectionDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screen-shot-collection-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenShotCollectionId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screen-shot-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenShotDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screen-shot-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenShotId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screen-shot-time-line-item-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenShotTimeLineItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screenshot-collection-coordinate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenshotCollectionCoordinate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screenshot-collection-summary-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenshotCollectionSummaryDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/screenshot-coordinate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenshotCoordinate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/sd-component-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SdComponentDto",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/sd-component-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SdComponentId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/sd-component-type-selection-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SdComponentTypeSelectionDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/sd-container-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SdContainerDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/source-code-config-coordinate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SourceCodeConfigCoordinate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/source-code-config-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SourceCodeConfigDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/source-code-config-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SourceCodeConfigId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/source-code-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SourceCodeDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/stitch-item-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StitchItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/story-doc-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoryDocDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/story-doc-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoryDocId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/story-doc-server-properties.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoryDocServerProperties",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/story-doc-summary-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoryDocSummaryDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/table-data-set-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableDataSetDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/time-line-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLineDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/time-line-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLineId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/time-line-item-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLineItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/time-line-item-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLineItemId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/time-line-model-coordinate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLineModelCoordinate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/time-line-model-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLineModelDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/time-line-model-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLineModelId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/time-line-model-summary-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLineModelSummaryDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/ui-scenario-coordinate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UiScenarioCoordinate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/ui-scenario-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UiScenarioDto",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/ui-scenario-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UiScenarioId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/user-principal-lookup-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserPrincipalLookupService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/workspace-settings.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WorkspaceSettings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HeaderParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Parameter",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ParameterCodec",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PathParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QueryParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RequestBuilder",
                "coveragePercent": 37,
                "coverageCount": "6/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ParameterOptions",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ParameterCodecInstance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/admin-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdminControllerService",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/api/services/code-rest-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CodeRestControllerService",
                "coveragePercent": 93,
                "coverageCount": "28/30",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/redirect-to-angular.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RedirectToAngularService",
                "coveragePercent": 92,
                "coverageCount": "25/27",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/screen-design-rest-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScreenDesignRestControllerService",
                "coveragePercent": 91,
                "coverageCount": "22/24",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/sqldb-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SqldbControllerService",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/story-doc-rest-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoryDocRestControllerService",
                "coveragePercent": 94,
                "coverageCount": "34/36",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/time-line-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TimeLineControllerService",
                "coveragePercent": 90,
                "coverageCount": "19/21",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/ui-rest-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UiRestControllerService",
                "coveragePercent": 93,
                "coverageCount": "31/33",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/workspace-rest-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WorkspaceRestControllerService",
                "coveragePercent": 86,
                "coverageCount": "13/15",
                "status": "very-good"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-configuration-page/code-configuration-dialog/code-configuration-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeConfigurationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-configuration-page/code-configuration-dialog/code-configuration-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeConfigurationData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-configuration-page/code-configuration-dialog/code-configuration-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeConfigurationSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-configuration-page/code-configuration-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeConfigurationPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-trace-page/blueprint-panel/blueprint-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlueprintPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-trace-page/code-trace-configuration-dialog/code-trace-configuration-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeTraceConfigurationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-trace-page/code-trace-configuration-dialog/code-trace-configuration-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeTraceConfigDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-trace-page/code-trace-configuration-dialog/code-trace-configuration-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeTraceConfigDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-trace-page/code-trace-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeTracePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-trace-page/code-trace-panel/code-trace-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeTracePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code-trace-page/source-code-panel/source-code-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SourceCodePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CodeService",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BluePrintDiagram",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlueprintStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeExecutionEnterEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeExecutionReturnEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigPanelState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DiagramPoint",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SourceCodeConfigStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SourceCodeStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StitchEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TestCaseBDDEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TraceStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeNode",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isCodeExecutionEnterEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isCodeExecutionReturnEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/code/code.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isCodeTestCaseBDDEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/admin-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdminDataService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/admin-data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/back-button/back-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmationDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/blue-print-diagram/blue-print-diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BluePrintDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/class-role-diagram/class-role-diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClassRoleDiagramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DiagramExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BluePrint",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BluePrintElem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClassElem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompositeBluePrintElem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Line",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MethodElem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeaderLine",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/diagram/diagram-example/diagram-example.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DiagramStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/focus.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setFocusOn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/fullscreen.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "closeFullscreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/fullscreen.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "openFullscreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/layout-1col/layout-1col.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Layout1ColComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/layout-2col/layout-2col.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Layout2ColComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/link.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LinkService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/loading.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LoadingDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/logging.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/logging.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "logChangesToObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/modal-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/common/ng-var.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "VarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/panel/panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/popup-menu/popup-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/common/popup-menu/popup-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PopupMenuItemSpec",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/presentation/player-panel/player-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PLayerPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/common/presentation/presentation-layout/presentation-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PresentationLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/db/dbdata-page/dbdata-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DBDataPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/db/dbdata-page/dbdata.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DBDataService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/db/dbdata-page/dbdata.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/db/dbnavigation-page/dbnavigation-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DBNavigationPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/db/dbnavigation-page/dbnavigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DBNavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/db/dbnavigation-page/dbnavigation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-manager-page/create-document-dialog/create-document-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateDocumentDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-manager-page/create-document-dialog/create-document-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocumentDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-manager-page/create-document-dialog/create-document-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocumentDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-manager-page/document-manager-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentManagerPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-manager-page/document-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DocumentManagerService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-manager-page/document-manager.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocumentManagerState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/artifact-selection-dialog/artifact-selection-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArtifactSelectionDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/artifact-selection-dialog/artifact-selection-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArtifactSelectionDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/artifact-selection-dialog/artifact-selection-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArtifactSelectionDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/artifact-selection-dialog/artifact-selection.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ArtifactSelectionService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArtifactBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ArtifactDataService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArtifactDescriptor",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "codeExecution",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "map",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sourceCodeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "timeLineModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uiScenario",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uiScreenDesign",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/artifact-block/artifact-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uiScreenshotCollection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/block/text-block/text-block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/create-artifact-dialog/create-artifact-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateArtifactDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/create-artifact-dialog/create-artifact-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArtifactDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/create-artifact-dialog/create-artifact-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArtifactDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/create-block-dialog/create-block-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateBlockDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/create-block-dialog/create-block-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlockDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/create-block-dialog/create-block-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlockDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/document-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DocumentDataService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/document-data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocumentState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/document/document-page/document.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/document/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/canvas/canvas.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CanvasComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/canvas/canvas.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddComponentData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/canvas/canvas.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DragRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/canvas/canvas.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MoveComponentData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/component-details/component-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/component-tree/component-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/component-tree/component-tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "item",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/palette/palette.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaletteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/screen-design-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenDesignPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/screen-design.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScreenDesignService",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screen-design-page/screen-design.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screenshot-collection-page/create-screenshot-dialog/create-screenshot-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateScreenshotDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screenshot-collection-page/create-screenshot-dialog/create-screenshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenshotDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screenshot-collection-page/create-screenshot-dialog/create-screenshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenshotDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screenshot-collection-page/screenshot-collection-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenshotCollectionPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screenshot-collection-page/screenshot-collection-panel/screenshot-collection-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenshotCollectionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screenshot-collection-page/screenshot-collection.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScreenshotCollectionService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/screenshot-collection-page/screenshot-collection.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/timeline-page/create-item-dialog/create-item-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateItemDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/timeline-page/create-item-dialog/create-item-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/timeline-page/create-item-dialog/create-item-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/timeline-page/timeline-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelinePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/add-screenshot-dialog/add-screenshot-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddScreenshotDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/add-screenshot-dialog/add-screenshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddScreenshotDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/add-screenshot-dialog/add-screenshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddScreenshotDialogInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/scenario-config-dialog/scenario-config-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioConfigDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/scenario-config-dialog/scenario-config-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScenarioConfigDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/scenario-config-dialog/scenario-config-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScenarioConfigDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/scenario-panel/scenario-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/scenario-presentation/scenario-presentation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioPresentationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/screenshot-panel/screenshot-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenshotPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/screenshot-thumbnail/screenshot-thumbnail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScreenshotThumbnailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/time-line-selection-panel/time-line-selection-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimeLineSelectionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/time-line-selection-panel/time-line-selection-panel.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLineSelection",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/uiscenario-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UIScenarioPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/uiscenario.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UIScenarioService",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/uiscenario.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigPanelState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/uiscenario.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PresentationState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/uiscenario.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScenarioPanelState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/uiscenario-page/uiscenario.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScreenshotSelectionPanelState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}